<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aemon&#39;s Blog</title>
  <icon>http://www.aemon.top/images/avatar.jpg</icon>
  <subtitle>切勿浅尝辄止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.aemon.top/"/>
  <updated>2021-01-07T09:39:02.529Z</updated>
  <id>http://www.aemon.top/</id>
  
  <author>
    <name>Aemon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员常用单词</title>
    <link href="http://www.aemon.top/2020/12/28/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D/"/>
    <id>http://www.aemon.top/2020/12/28/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D/</id>
    <published>2020-12-28T08:38:15.000Z</published>
    <updated>2021-01-07T09:39:02.529Z</updated>
    
    <content type="html"><![CDATA[<p>因为我的英语基础比较差，所以开一篇文章记录一些程序员常见，常用的一些单词、缩写。</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">administrator</td><td align="left">-</td><td align="left">Noun</td><td align="left">管理员</td><td align="left">Windows 默认管理员用户名称。</td></tr><tr><td align="left">analyze</td><td align="left">-</td><td align="left">Verb</td><td align="left">分析</td><td align="left">-</td></tr><tr><td align="left">API</td><td align="left">Application Programming Interface</td><td align="left">Noun</td><td align="left">应用程序接口</td><td align="left">-</td></tr><tr><td align="left">array</td><td align="left">-</td><td align="left">Noun</td><td align="left">数组</td><td align="left">-</td></tr><tr><td align="left">authentication</td><td align="left">-</td><td align="left">Noun</td><td align="left">认证方式</td><td align="left">-</td></tr><tr><td align="left">authorization</td><td align="left">-</td><td align="left">Noun</td><td align="left">授权</td><td align="left">-</td></tr></tbody></table><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">BDFL</td><td align="left">Benevolent Dictator For Life</td><td align="left">Noun</td><td align="left">终身仁慈独裁者</td><td align="left"><a href="https://zh.wikipedia.org/wiki/%E7%BB%88%E8%BA%AB%E4%BB%81%E6%85%88%E7%8B%AC%E8%A3%81%E8%80%85" target="_blank" rel="noopener">终身仁慈独裁者 - 维基百科</a></td></tr><tr><td align="left">bug</td><td align="left">-</td><td align="left">Noun</td><td align="left">程序错误</td><td align="left">-</td></tr></tbody></table><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">cursor</td><td align="left">-</td><td align="left">Noun</td><td align="left">光标</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor</a></td></tr></tbody></table><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">description</td><td align="left">-</td><td align="left">Noun</td><td align="left">描述</td><td align="left">-</td></tr></tbody></table><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">emit</td><td align="left">-</td><td align="left">Verb</td><td align="left">发射；发出</td><td align="left"><a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#vm-emit</a></td></tr></tbody></table><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">filter</td><td align="left">-</td><td align="left">Noun</td><td align="left">过滤器；筛选器</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></td></tr></tbody></table><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">guard</td><td align="left">-</td><td align="left">Noun</td><td align="left">守卫</td><td align="left"><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></td></tr><tr><td align="left">gutter</td><td align="left">-</td><td align="left">Noun</td><td align="left">槽；排水沟</td><td align="left"><a href="https://element.eleme.cn/#/zh-CN/component/layout#row-attributes" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/component/layout#row-attributes</a></td></tr><tr><td align="left">GNU</td><td align="left">GNU’s Not Unix!</td><td align="left">Noun</td><td align="left">一个自由的操作系统</td><td align="left">-</td></tr></tbody></table><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">handler</td><td align="left">-</td><td align="left">Noun</td><td align="left">处理程序</td><td align="left">-</td></tr></tbody></table><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">install</td><td align="left">-</td><td align="left">Verb</td><td align="left">安装</td><td align="left">-</td></tr><tr><td align="left">integer</td><td align="left">-</td><td align="left">Noun</td><td align="left">整数</td><td align="left">-</td></tr><tr><td align="left">interface</td><td align="left">-</td><td align="left">Noun</td><td align="left">接口</td><td align="left">-</td></tr></tbody></table><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">JSON</td><td align="left">JavaScript Object Notation</td><td align="left">Noun</td><td align="left">JavaScript对象表示法</td><td align="left">-</td></tr></tbody></table><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">MVVM</td><td align="left">Model–view–viewmodel</td><td align="left">Noun</td><td align="left">模型，视图，视图模型，一种软件架构模式</td><td align="left">-</td></tr></tbody></table><h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">primary</td><td align="left">-</td><td align="left">Adjective</td><td align="left">主要的</td><td align="left">-</td></tr><tr><td align="left">prototype</td><td align="left">-</td><td align="left">Noun</td><td align="left">原型</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Prototype" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Glossary/Prototype</a></td></tr><tr><td align="left">public</td><td align="left">-</td><td align="left">Noun</td><td align="left">公开；公共</td><td align="left">-</td></tr></tbody></table><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">replicate</td><td align="left">-</td><td align="left">Verb</td><td align="left">复现（BUG）</td><td align="left"></td></tr><tr><td align="left">request</td><td align="left">-</td><td align="left">Noun</td><td align="left">请求</td><td align="left">-</td></tr><tr><td align="left">required</td><td align="left">-</td><td align="left">Adjective</td><td align="left">需要</td><td align="left"><a href="https://cn.vuejs.org/v2/api/#props" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#props</a></td></tr><tr><td align="left">resolve</td><td align="left">-</td><td align="left">Verb</td><td align="left">解决</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve</a></td></tr><tr><td align="left">response</td><td align="left">-</td><td align="left">Noun</td><td align="left">响应</td><td align="left">-</td></tr></tbody></table><h3 id="S"><a href="#S" class="headerlink" title="S"></a>S</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">schema</td><td align="left">-</td><td align="left">Noun</td><td align="left">架构（数据库）</td><td align="left">-</td></tr></tbody></table><h3 id="T"><a href="#T" class="headerlink" title="T"></a>T</h3><table><thead><tr><th align="left">Word</th><th align="left">Unabbreviated</th><th align="left"><a href="https://en.wikipedia.org/wiki/Part_of_speech#Functional_classification" target="_blank" rel="noopener">Part of speech</a></th><th align="left">Meaning</th><th align="left">Source</th></tr></thead><tbody><tr><td align="left">target</td><td align="left">-</td><td align="left">Noun</td><td align="left">目标；靶；指标</td><td align="left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      不积硅步，无以至千里。
    
    </summary>
    
    
      <category term="英语" scheme="http://www.aemon.top/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="英语" scheme="http://www.aemon.top/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>What is this thing 6</title>
    <link href="http://www.aemon.top/2020/12/26/whatisthisthing-6/"/>
    <id>http://www.aemon.top/2020/12/26/whatisthisthing-6/</id>
    <published>2020-12-26T06:56:40.000Z</published>
    <updated>2021-01-07T09:39:02.337Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.reddit.com/r/whatisthisthing/" target="_blank" rel="noopener">What is this thing</a> 是 reddit 上的一个社区（community），上面时不时会有人发一些没见过的玩意来提问。</p><p>一起来看看吧！</p><a id="more"></a><h3 id="砚"><a href="#砚" class="headerlink" title="砚"></a>砚</h3><blockquote><p>Q: Does anyone know what this box is?</p></blockquote><p>有谁知道这个盒子是什么吗？</p><!-- ![砚](./whatisthisthing-6/砚.jpg) --><!-- ![砚](./whatisthisthing-6/砚2.jpg) --><!-- ![砚](./whatisthisthing-6/砚3.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E7%A0%9A.jpg" class="砚"><img data-src="/2020/12/26/whatisthisthing-6/%E7%A0%9A2.jpg" class="砚"><img data-src="/2020/12/26/whatisthisthing-6/%E7%A0%9A3.jpg" class="砚"><blockquote><p>A: Chinese or Japanese ink, in block form. You use the dish, with a little water, to grind it into a usable liquid.</br><a href="https://www.bitsandpiecesuk.co.uk/product/sumi-e-ink-set" target="_blank" rel="noopener">https://www.bitsandpiecesuk.co.uk/product/sumi-e-ink-set</a></p></blockquote><p>中国或日本的墨。成块状的，你可以用少许水将碟子研磨成可用的液体。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/ki8bsy/does_anyone_know_what_this_box_is/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/ki8bsy/does_anyone_know_what_this_box_is/</a></p><h3 id="奇怪编号顺序的板子"><a href="#奇怪编号顺序的板子" class="headerlink" title="奇怪编号顺序的板子"></a>奇怪编号顺序的板子</h3><blockquote><p>Q: Found in a storage cupboard at work. The black bits come out. The number order is … weird?</p></blockquote><p>在工作的储藏室里发现的，上面有黑色的小块，编号顺序看起来也好奇怪。</p><!-- ![板子](./whatisthisthing-6/板子.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%9D%BF%E5%AD%90.jpg" class="板子"><blockquote><p>A: It almost looks like sales samples for plastic parts that might be button actuators or something.</br>The numbers might be the model/part numbers. I know this has nothing to do with rail controls.</p></blockquote><p>它看起来就像塑料部件的销售样品，可能是按钮驱动器之类的。</p><p>编号可能是型号/零件号。我知道这和铁路控制无关。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k20dox/found_in_a_storage_cupboard_at_work_the_black/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k20dox/found_in_a_storage_cupboard_at_work_the_black/</a></p><h3 id="鸡头？"><a href="#鸡头？" class="headerlink" title="鸡头？"></a>鸡头？</h3><blockquote><p>Q: What is this hoof looking thing? Very light and feels rubbery. Found on farmland in Central Victoria, Australia.</p></blockquote><p>这个长得像蹄子的东西是什么?很轻，摸起来有橡胶的感觉。发现于澳大利亚维多利亚州中部的农田。</p><!-- ![蹄子](./whatisthisthing-6/蹄子.jpg) --><!-- ![蹄子](./whatisthisthing-6/蹄子2.jpg) --><!-- ![蹄子](./whatisthisthing-6/蹄子3.jpg) --><!-- ![蹄子](./whatisthisthing-6/蹄子4.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E8%B9%84%E5%AD%90.jpg" class="蹄子"><img data-src="/2020/12/26/whatisthisthing-6/%E8%B9%84%E5%AD%902.jpg" class="蹄子"><img data-src="/2020/12/26/whatisthisthing-6/%E8%B9%84%E5%AD%903.jpg" class="蹄子"><img data-src="/2020/12/26/whatisthisthing-6/%E8%B9%84%E5%AD%904.jpg" class="蹄子"><blockquote><p>A: I shoe horses for a living. I use a pour in pad that sets up and sort of looks like that. It is made to provide some cushion for a horses foot. When it comes off it looks a lot like that.</br>You can see the edge around it. That is where some of the material was under a horse shoe.</p></blockquote><p>我以给马钉蹄铁为生。我用了一个像这样的倒料垫。它是用来给马蹄提供垫子的。当它脱落的时候，看起来很像这样。</p><p>你可以看到它周围的边缘。这是马蹄铁下的一些材料。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k6j55u/what_is_this_hoof_looking_thing_very_light_and/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k6j55u/what_is_this_hoof_looking_thing_very_light_and/</a></p><h3 id="水槽"><a href="#水槽" class="headerlink" title="水槽"></a>水槽</h3><blockquote><p>Q: This device in a nursing home that appears to be halfway between a sink and a toilet</p></blockquote><p>这个装置位于疗养院的水槽和马桶之间。</p><!-- ![水槽](./whatisthisthing-6/水槽.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%B0%B4%E6%A7%BD.jpg" class="水槽"><blockquote><p>A: Clinical sink, it’s for dumping bedpans.</p></blockquote><p>临床水槽，用于倾倒便盆。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k3jms6/this_device_in_a_nursing_home_that_appears_to_be/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k3jms6/this_device_in_a_nursing_home_that_appears_to_be/</a></p><h3 id="迷你手榴弹？"><a href="#迷你手榴弹？" class="headerlink" title="迷你手榴弹？"></a>迷你手榴弹？</h3><blockquote><p>Q: This solid metal thing threaded through this hollow wooden cylinder</p></blockquote><p>这个坚固的金属穿过了这个空心的木圆柱体。</p><!-- ![手榴弹](./whatisthisthing-6/手榴弹.jpg) --><!-- ![手榴弹](./whatisthisthing-6/手榴弹2.jpg) --><!-- ![手榴弹](./whatisthisthing-6/手榴弹3.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%89%8B%E6%A6%B4%E5%BC%B9.jpg" class="手榴弹"><img data-src="/2020/12/26/whatisthisthing-6/%E6%89%8B%E6%A6%B4%E5%BC%B92.jpg" class="手榴弹"><img data-src="/2020/12/26/whatisthisthing-6/%E6%89%8B%E6%A6%B4%E5%BC%B93.jpg" class="手榴弹"><blockquote><p>A: Bird call.</p></blockquote><p>鸟哨。</p><p>（译者注：这个翻译可能不太准确，因为它不是用来吹的。叫「鸟叫发生器」可能会好一点。）</p><iframe src="//player.bilibili.com/player.html?aid=415795337&bvid=BV18V411b7iY&cid=271173362&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k7q03a/this_solid_metal_thing_threaded_through_this/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k7q03a/this_solid_metal_thing_threaded_through_this/</a></p><h3 id="五粮液"><a href="#五粮液" class="headerlink" title="五粮液"></a>五粮液</h3><blockquote><p>Q: Weird stuff found in an old jewelry</p></blockquote><p>在一个旧珠宝里发现了一些奇怪的东西。</p><!-- ![酒](./whatisthisthing-6/酒.jpg) --><!-- ![酒](./whatisthisthing-6/酒2.jpg) --><!-- ![酒](./whatisthisthing-6/酒3.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E9%85%92.jpg" class="酒"><img data-src="/2020/12/26/whatisthisthing-6/%E9%85%922.jpg" class="酒"><img data-src="/2020/12/26/whatisthisthing-6/%E9%85%923.jpg" class="酒"><blockquote><p>A: The art technique is called Cloisonne. The bottles could be snuff bottles sold as souvenirs.</p></blockquote><p>这种工艺叫做景泰蓝。这些鼻烟壶可以作为纪念品出售。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kcip09/weird_stuff_found_in_an_old_jewelry_info_first/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kcip09/weird_stuff_found_in_an_old_jewelry_info_first/</a></p><h3 id="缆绳桶"><a href="#缆绳桶" class="headerlink" title="缆绳桶"></a>缆绳桶</h3><blockquote><p>Q: What is this weird large barrel looking thing hanging on a wire at local park?</p></blockquote><p>这个挂在当地公园电线上的奇怪的大桶是什么？</p><!-- ![桶](./whatisthisthing-6/桶.jpg) --><!-- ![桶](./whatisthisthing-6/桶2.jpg) --><!-- ![桶](./whatisthisthing-6/桶3.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%A1%B6.jpg" class="桶"><img data-src="/2020/12/26/whatisthisthing-6/%E6%A1%B62.jpg" class="桶"><img data-src="/2020/12/26/whatisthisthing-6/%E6%A1%B63.jpg" class="桶"><blockquote><p>A: It is for fire hose competition. Move the barrel back and forth with fire hoses.</p></blockquote><p>这是消防水带比赛用的。用消防水管来回移动水桶。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kilt8q/what_is_this_weird_large_barrel_looking_thing/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kilt8q/what_is_this_weird_large_barrel_looking_thing/</a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><blockquote><p>Q: This was found with old tools. Doesn’t seem to attach to anything. It can lock in place and the middle bit turns round, unravelling two straps of fabric. I’m stumped!</p></blockquote><p>这是在旧工具中找到的。似乎没有依附于任何东西。它可以锁定到位，中间的钻头转动，解开两束织物。我被难倒了！</p><!-- ![书](./whatisthisthing-6/书.jpg) --><!-- ![书](./whatisthisthing-6/书2.jpg) --><!-- ![书](./whatisthisthing-6/书3.jpg) --><!-- ![书](./whatisthisthing-6/书4.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A6.jpg" class="书"><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A62.jpg" class="书"><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A63.jpg" class="书"><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A64.jpg" class="书"><blockquote><p>A: It’s for carrying books.</p></blockquote><p>它是用来拿书的。</p><!-- ![书](./whatisthisthing-6/书5.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A65.jpg" class="书"><blockquote><p>Q: Solved! Thank you. I’ve been thinking about this for MONTHS and you found it in minutes haha. Thank you again! (even though I’m slightly embarrassed!)</p></blockquote><p>解决了!谢谢你！我想了好几个月了，你几分钟就找到了，哈哈。再一次感谢您！（尽管我有点尴尬！）</p><!-- ![书](./whatisthisthing-6/书6.jpg) --><!-- ![书](./whatisthisthing-6/书7.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A66.jpg" class="书"><img data-src="/2020/12/26/whatisthisthing-6/%E4%B9%A67.jpg" class="书"><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kbpauf/this_was_found_with_old_tools_doesnt_seem_to/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kbpauf/this_was_found_with_old_tools_doesnt_seem_to/</a></p><h3 id="不知道"><a href="#不知道" class="headerlink" title="不知道"></a>不知道</h3><blockquote><p>Q: Silver drum/disks, 1 in 40 had this inside, the rest were empty</p></blockquote><p>银色桶/碟子里面发现的，每 40 个里面就有一个这个，其余都是空的。</p><!-- ![激光元件](./whatisthisthing-6/激光元件.jpg) --><!-- ![激光元件](./whatisthisthing-6/激光元件2.jpg) --><!-- ![激光元件](./whatisthisthing-6/激光元件3.jpg) --><!-- ![激光元件](./whatisthisthing-6/激光元件4.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%BF%80%E5%85%89%E5%85%83%E4%BB%B6.jpg" class="激光元件"><img data-src="/2020/12/26/whatisthisthing-6/%E6%BF%80%E5%85%89%E5%85%83%E4%BB%B62.jpg" class="激光元件"><img data-src="/2020/12/26/whatisthisthing-6/%E6%BF%80%E5%85%89%E5%85%83%E4%BB%B63.jpg" class="激光元件"><img data-src="/2020/12/26/whatisthisthing-6/%E6%BF%80%E5%85%89%E5%85%83%E4%BB%B64.jpg" class="激光元件"><blockquote><p>A: It looks a lot like the optical element of a ring laser gyroscope.</br><a href="https://en.wikipedia.org/wiki/Ring_laser_gyroscope" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Ring_laser_gyroscope</a></br>Take a look at the first picture on Wikipedia.</br>And here are some optical elements by themself:</br><a href="https://www.alibaba.com/product-detail/50-Optics-Cavity-Of-Laser-Gyro_60784225297.html" target="_blank" rel="noopener">https://www.alibaba.com/product-detail/50-Optics-Cavity-Of-Laser-Gyro_60784225297.html</a></p></blockquote><p>它看起来很像环形激光陀螺仪的光学元件。</p><p><a href="https://en.wikipedia.org/wiki/Ring_laser_gyroscope" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Ring_laser_gyroscope</a></p><p>看看维基百科上的第一张照片。</p><!-- ![激光元件](./whatisthisthing-6/激光元件5.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%BF%80%E5%85%89%E5%85%83%E4%BB%B65.jpg" class="激光元件"><p>这里是一些光学元件本身:</p><p><a href="https://www.alibaba.com/product-detail/50-Optics-Cavity-Of-Laser-Gyro_60784225297.html" target="_blank" rel="noopener">https://www.alibaba.com/product-detail/50-Optics-Cavity-Of-Laser-Gyro_60784225297.html</a></p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kdsytm/silver_drumdisks_1_in_40_had_this_inside_the_rest/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kdsytm/silver_drumdisks_1_in_40_had_this_inside_the_rest/</a></p><h3 id="指尖陀螺"><a href="#指尖陀螺" class="headerlink" title="指尖陀螺"></a>指尖陀螺</h3><blockquote><p>Q: Solid brass.. and every pin on the outside unscrews. The center hole is threaded and around 3/4” - 1” in diameter.</p></blockquote><p>黄铜做的，外部的每一个大头针都能打开，内部的圆直径大概四分之三英寸到一英寸之间。</p><!-- ![指尖陀螺](./whatisthisthing-6/指尖陀螺.jpg) --><img data-src="/2020/12/26/whatisthisthing-6/%E6%8C%87%E5%B0%96%E9%99%80%E8%9E%BA.jpg" class="指尖陀螺"><blockquote><p>A: It was a fidget-spinner but the bearings are gone</p></blockquote><p>原本是个指尖陀螺，但是中间的轴承不见了。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k6yzte/solid_brass_and_every_pin_on_the_outside_unscrews/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k6yzte/solid_brass_and_every_pin_on_the_outside_unscrews/</a></p>]]></content>
    
    <summary type="html">
    
      For the identification of mysterious objects
    
    </summary>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/categories/What-is-this-thing/"/>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/tags/What-is-this-thing/"/>
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>What is this thing 5</title>
    <link href="http://www.aemon.top/2020/12/25/whatisthisthing-5/"/>
    <id>http://www.aemon.top/2020/12/25/whatisthisthing-5/</id>
    <published>2020-12-25T07:29:13.000Z</published>
    <updated>2021-01-07T09:39:02.261Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.reddit.com/r/whatisthisthing/" target="_blank" rel="noopener">What is this thing</a> 是 reddit 上的一个社区（community），上面时不时会有人发一些没见过的玩意来提问。</p><p>一起来看看吧！</p><a id="more"></a><h3 id="桶"><a href="#桶" class="headerlink" title="桶"></a>桶</h3><blockquote><p>Q: Huge metal cylinder found in the middle of the woods (Central Pennsylvania)</p></blockquote><p>在树林中发现的巨大金属圆筒（宾夕法尼亚州中部）</p><!-- ![桶](./whatisthisthing-5/桶.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%A1%B6.jpg" class="桶"><blockquote><p>A: It’s an “upright” tank for fluid storage. Normally 12’ diameter and 20’ tall, they hold 400 barrels of fluid. This one is laid on its side, which is how most are transported.</br>Used in oilfield applications, this one was probably ditched illegally because it has been exposed to or contains excessive amounts of NORM or naturally occurring radioactive material. NORM is present in small amounts in produced fluids, builds up in storage tanks over time and is very expensive to get rid of.</br>See this for some examples of modern versions.</p></blockquote><p>这是一个用来储存液体的“立式”容器。它们通常直径 12 英尺，高 20 英尺，可容纳 400 桶（47600 升）液体。这个桶是侧卧的，大多数都是这样运输的。</p><p>在油田应用中，使用的这一种可能是非法丢弃的，因为它暴露于或含有过量的标准或自然产生的放射性物质。天然放射物质以少量的形式存在于生产流体中，随着时间的推移在储存罐中积累，并且去除它非常昂贵。</p><p>看看这些现代版本的样子。</p><!-- ![桶](./whatisthisthing-5/桶2.jpg) --><!-- ![桶](./whatisthisthing-5/桶3.jpg) --><!-- ![桶](./whatisthisthing-5/桶4.jpg) --><!-- ![桶](./whatisthisthing-5/桶5.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%A1%B62.jpg" class="桶"><img data-src="/2020/12/25/whatisthisthing-5/%E6%A1%B63.jpg" class="桶"><img data-src="/2020/12/25/whatisthisthing-5/%E6%A1%B64.jpg" class="桶"><img data-src="/2020/12/25/whatisthisthing-5/%E6%A1%B65.jpg" class="桶"><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k2q3x9/huge_metal_cylinder_found_in_the_middle_of_the/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k2q3x9/huge_metal_cylinder_found_in_the_middle_of_the/</a></p><h3 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h3><blockquote><p>Q: Strange Robot Friend Neighbors Trashed After Moving Out</p></blockquote><p>邻居们都在吐槽被搬出去的奇怪机器人。</p><!-- ![机器人](./whatisthisthing-5/机器人1.jpg) --><!-- ![机器人](./whatisthisthing-5/机器人2.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%9C%BA%E5%99%A8%E4%BA%BA1.jpg" class="机器人"><img data-src="/2020/12/25/whatisthisthing-5/%E6%9C%BA%E5%99%A8%E4%BA%BA2.jpg" class="机器人"><blockquote><p>A: My guess is a robot used for a laser tag game. The thing is holding a blaster and the eyes likely have sort of photocell or means to detect the laser. Laser tags were big back in the 90s.</p></blockquote><p>我猜是用来玩激光枪战游戏的机器人。这东西拿着一个爆破器，眼睛可能有某种光电池或手段来探测激光。激光枪战在 90 年代很流行。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k3v3q8/strange_robot_friend_neighbors_trashed_after/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k3v3q8/strange_robot_friend_neighbors_trashed_after/</a></p><h3 id="新生儿"><a href="#新生儿" class="headerlink" title="新生儿"></a>新生儿</h3><blockquote><p>Q: Someone was gifted this for a new baby with no note on what it is</p></blockquote><p>有人把这个礼物送给了一个新生儿，却没有说明是什么。</p><!-- ![新生儿](./whatisthisthing-5/新生儿1.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%96%B0%E7%94%9F%E5%84%BF1.jpg" class="新生儿"><blockquote><p>A: It is a door silencer. It wraps around and covers the latch on a door so that it doesn’t latch and the rubber also makes the door open and close silently. The straps go around the doorknob on each side.</br>EDIT: I could only find a foreign language site with this version, but here’s a picture from there: <a href="http://ae01.alicdn.com/kf/H8c7289b680bc4ef59fd8915e0eeafd8bP/-.jpg" target="_blank" rel="noopener">http://ae01.alicdn.com/kf/H8c7289b680bc4ef59fd8915e0eeafd8bP/-.jpg</a></p></blockquote><p>这是一个门消音器。它可以包裹并覆盖门上的闩锁，从而不会使门关上，并且橡胶还可以使门安静地打开和关闭。带子绕在门把手的每一侧。</p><p>编辑：我只能用此版本找到一个外语网站，但是这里有一张照片：</p><!-- ![新生儿](./whatisthisthing-5/新生儿2.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%96%B0%E7%94%9F%E5%84%BF2.jpg" class="新生儿"><p>（译者注：答案中的这张图片还是从淘宝拿来的。）</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k95b1x/someone_was_gifted_this_for_a_new_baby_with_no/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k95b1x/someone_was_gifted_this_for_a_new_baby_with_no/</a></p><h3 id="杀虫"><a href="#杀虫" class="headerlink" title="杀虫"></a>杀虫</h3><blockquote><p>Q: They installed this thing on the ceiling of my apartment building. The green light makes a buzz sound with each flash</p></blockquote><p>他们在我公寓的天花板上安装了这个。绿灯每闪一次就发出嗡嗡声。</p><!-- ![杀虫](./whatisthisthing-5/杀虫.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%9D%80%E8%99%AB.jpg" class="杀虫"><blockquote><p>A: It’s called the Pestinator 360. It repels insects and rodents. A rather janky install for a ceiling though. <a href="https://www.amazon.com/gp/aw/d/B06ZY79XLC/ref=cm_cr_arp_mb_bdcrb_top?ie=UTF8" target="_blank" rel="noopener">https://www.amazon.com/gp/aw/d/B06ZY79XLC/ref=cm_cr_arp_mb_bdcrb_top?ie=UTF8</a></p></blockquote><p>它被称为 Pestinator 360。它能驱赶昆虫和啮齿动物。不过天花板的安装还真不怎么样。<a href="https://www.amazon.com/gp/aw/d/B06ZY79XLC/ref=cm_cr_arp_mb_bdcrb_top?ie=UTF8" target="_blank" rel="noopener">https://www.amazon.com/gp/aw/d/B06ZY79XLC/ref=cm_cr_arp_mb_bdcrb_top?ie=UTF8</a></p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/keshzv/they_installed_this_thing_on_the_ceiling_of_my/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/keshzv/they_installed_this_thing_on_the_ceiling_of_my/</a></p><h3 id="金砖？"><a href="#金砖？" class="headerlink" title="金砖？"></a>金砖？</h3><blockquote><p>Q: WITT? Mom bought a box of old pins and this was among them. Appears to be metal, backside is empty aside from marks of being glued to something</p></blockquote><p>这是个嘛？妈妈买了一盒旧别针，这是其中之一。似乎是金属的，背面是空的，除了有些粘在什么东西上的痕迹。</p><!-- ![金砖](./whatisthisthing-5/金砖.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E9%87%91%E7%A0%96.jpg" class="金砖"><blockquote><p>A: Readers Digest sweepstakes token</p></blockquote><p>读者文摘的抽奖代币</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kg7izm/witt_mom_bought_a_box_of_old_pins_and_this_was/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kg7izm/witt_mom_bought_a_box_of_old_pins_and_this_was/</a></p><h3 id="不知道用途的工具"><a href="#不知道用途的工具" class="headerlink" title="不知道用途的工具"></a>不知道用途的工具</h3><blockquote><p>Q: Kitchen tool made by winco. No idea what it is</p></blockquote><p>winco（超市）制作的厨房工具。不知道是什么。</p><!-- ![工具](./whatisthisthing-5/工具1.jpg) --><!-- ![工具](./whatisthisthing-5/工具2.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E5%B7%A5%E5%85%B71.jpg" class="工具"><img data-src="/2020/12/25/whatisthisthing-5/%E5%B7%A5%E5%85%B72.jpg" class="工具"><blockquote><p>A: Winco SDS-3, Shrimp Peeler with Comfort Grip Handle, Stainless Steel</p></blockquote><p>Winco SDS-3，带舒适手柄的虾剥皮机，不锈钢。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k0xx73/kitchen_tool_made_by_winco_no_idea_what_it_is/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k0xx73/kitchen_tool_made_by_winco_no_idea_what_it_is/</a></p><h3 id="报警器"><a href="#报警器" class="headerlink" title="报警器"></a>报警器</h3><blockquote><p>Q: Found in my new home, built in the 1950s</p></blockquote><p>在我的新家发现的，建于 20 世纪 50 年代。</p><!-- ![报警器](./whatisthisthing-5/报警器.jpg) --><img data-src="/2020/12/25/whatisthisthing-5/%E6%8A%A5%E8%AD%A6%E5%99%A8.jpg" class="报警器"><blockquote><p>A: It’s an on / off for a house alarm.</p></blockquote><p>它被用来打开或关闭房屋报警。</p><blockquote><p>A: Although in this case it’s 99% likely for an alarm, switches like this were used for other things as well. I did a remodel last summer where a same/similar switch was used to lower and raise a massive chandelier- for cleaning or bulb replacement.</p></blockquote><p>虽然在这种情况下警报器的可能性是99%，但像这样的开关也被用于其他用途。去年夏天，我做了一次改造，用了一个相同或类似的开关来降低和提高一个巨大的吊灯——为了清洁或更换灯泡。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kc23cn/found_in_my_new_home_built_in_the_1950s/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kc23cn/found_in_my_new_home_built_in_the_1950s/</a></p>]]></content>
    
    <summary type="html">
    
      For the identification of mysterious objects
    
    </summary>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/categories/What-is-this-thing/"/>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/tags/What-is-this-thing/"/>
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>What is this thing 4</title>
    <link href="http://www.aemon.top/2020/12/25/whatisthisthing-4/"/>
    <id>http://www.aemon.top/2020/12/25/whatisthisthing-4/</id>
    <published>2020-12-25T03:06:13.000Z</published>
    <updated>2021-01-07T09:39:02.217Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.reddit.com/r/whatisthisthing/" target="_blank" rel="noopener">What is this thing</a> 是 reddit 上的一个社区（community），上面时不时会有人发一些没见过的玩意来提问。</p><p>一起来看看吧！</p><a id="more"></a><h3 id="地下通道"><a href="#地下通道" class="headerlink" title="地下通道"></a>地下通道</h3><blockquote><p>Q: Tunnel in basement of Pennsylvania rowhouse</p></blockquote><p>宾夕法尼亚州排屋的地窖中的隧道。</p><!-- ![Tunnel-1.jpg](./whatisthisthing-4/Tunnel-1.jpg) --><!-- ![Tunnel-2.jpg](./whatisthisthing-4/Tunnel-2.jpg) --><!-- ![Tunnel-3.jpg](./whatisthisthing-4/Tunnel-3.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Tunnel-1.jpg" class="Tunnel-1"><img data-src="/2020/12/25/whatisthisthing-4/Tunnel-2.jpg" class="Tunnel-2"><img data-src="/2020/12/25/whatisthisthing-4/Tunnel-3.jpg" class="Tunnel-3"><blockquote><p>A: Coal delivery, perhaps.</p></blockquote><p>可能是用来煤炭运输。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kiwfj7/tunnel_in_basement_of_pennsylvania_rowhouse/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kiwfj7/tunnel_in_basement_of_pennsylvania_rowhouse/</a></p><h3 id="球"><a href="#球" class="headerlink" title="球"></a>球</h3><blockquote><p>Q: What is this attachment and why is it round?</p></blockquote><p>这个附着物是什么？为什么它是圆的？</p><!-- ![Ball.jpg](./whatisthisthing-4/Ball.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Ball.jpg" class="Ball"><blockquote><p>A: I doubt it is, but it looks like an anchor buoy to me.</p></blockquote><p>我不太确定，但是在我看来，它像是个锚浮标。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k505lm/what_is_this_attachment_and_why_is_it_round/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k505lm/what_is_this_attachment_and_why_is_it_round/</a></p><h3 id="沙子"><a href="#沙子" class="headerlink" title="沙子"></a>沙子</h3><blockquote><p>Q: What is this thing: some beach sand in Ecuador is magnetic.</p></blockquote><p>这是个啥？厄瓜多尔的沙滩看起来是有磁性的。</p><!-- ![Ironsand.jpg](./whatisthisthing-4/Ironsand.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Ironsand.jpg" class="Ironsand"><blockquote><p>A: Probably a bunch of iron Like here: <a href="https://en.m.wikipedia.org/wiki/Ironsand" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/Ironsand</a></p></blockquote><p>可能是一堆铁，就像维基百科说的一样：<a href="https://en.m.wikipedia.org/wiki/Ironsand" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/Ironsand</a></p><p>铁砂，也称为铁砂或铁砂，是一种铁含量高的砂。它通常是深灰色或黑色。它主要由磁铁矿，Fe₃O₄，以及还含有少量的钛，二氧化硅，锰，钙和钒。铁砂在阳光直射下容易变热，导致温度高到足以引起轻微灼伤。因此，在新西兰皮哈（Piha）等受欢迎的西海岸冲浪海滩上，它构成了危害。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/khgtin/what_is_this_thing_some_beach_sand_in_ecuador_is/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/khgtin/what_is_this_thing_some_beach_sand_in_ecuador_is/</a></p><h3 id="薯片"><a href="#薯片" class="headerlink" title="薯片"></a>薯片</h3><blockquote><p>Q: What is this brown bumpy thing on my Pringle??</p></blockquote><p>我的品客薯片上的这些个棕色小东西是什么？？</p><!-- ![Pringle.jpg](./whatisthisthing-4/Pringle.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Pringle.jpg" class="Pringle"><blockquote><p>A: The previous Pringle that didn’t completely make it out of the rolling mold. Pringles aren’t sliced potatoes, they are mashed potatoes pressed flat and cut like cookies. That’s a stuck previous Pringle. <a href="https://youtu.be/YDUTOo2tq3k" target="_blank" rel="noopener">https://youtu.be/YDUTOo2tq3k</a></p></blockquote><p>之前的品客薯片并没有完全成型。品客薯片不是切成片的土豆，它们是压扁并切得像饼干一样的土豆泥。</p><iframe src="//player.bilibili.com/player.html?aid=373272953&bvid=BV18Z4y137Mz&cid=270707762&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k9mp1l/what_is_this_brown_bumpy_thing_on_my_pringle/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k9mp1l/what_is_this_brown_bumpy_thing_on_my_pringle/</a></p><h3 id="玻璃筒"><a href="#玻璃筒" class="headerlink" title="玻璃筒"></a>玻璃筒</h3><blockquote><p>Q: I found these in my grandmothers house (germany), they are made of thin glass. Unfortunately there is no box cover explaining what they are.</p></blockquote><p>我在我奶奶的房子（德国）里发现了这些，它们是用薄玻璃做的。不幸的是，没有盒子盖解释它们是什么。</p><!-- ![Glass.jpg](./whatisthisthing-4/Glass.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Glass.jpg" class="Glass"><blockquote><p>A: They are for flower decoration. One singular flower goes in the tube. There is probably a stand for them somewhere around, but some people like to stick them in foam together with other decorations, or in pieces of driftwood with holes drilled into them, or even into other flowerpots.I saw very similar ones in the Bodenmais Glasmanufaktur</p></blockquote><p>它们是用来装饰花卉的。一朵奇异的花在花筒里。也许在附近的什么地方有一个供它们用的架子，但有些人喜欢把它们和其他装饰品一起用泡沫塑料粘在一起，或者用钻了洞的浮木碎片粘在一起，甚至把它们粘在别的花盆里。我在博登迈斯（德国）的玻璃制造厂见过。</p><!-- ![Glass2.jpg](./whatisthisthing-4/Glass2.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Glass2.jpg" class="Glass2"><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k8fzsw/i_found_these_in_my_grandmothers_house_germany/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k8fzsw/i_found_these_in_my_grandmothers_house_germany/</a></p><h3 id="公交车站"><a href="#公交车站" class="headerlink" title="公交车站"></a>公交车站</h3><blockquote><p>Q: What is this thing I saw above a bus station in Germany?</p></blockquote><p>我在德国的公交车站台上方看到的是什么？</p><!-- ![Bus.jpg](./whatisthisthing-4/Bus.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Bus.jpg" class="Bus"><blockquote><p>A: It’s a charging station for electric/hybrid busses. They usually put these at the station where the line terminates, so the bus can sit and charge for the 10-15 minutes before it starts its next route. At least that’s how they work in Sweden.</p></blockquote><p>这是电动/混合动力巴士的充电站。他们通常把这些装置放在线路的终点站，这样公交车就可以坐下来充电10-15分钟，然后再开始下一条线路。至少在瑞典是这样的。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k5yd8p/what_is_this_thing_i_saw_above_a_bus_station_in/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k5yd8p/what_is_this_thing_i_saw_above_a_bus_station_in/</a></p><h3 id="炸药"><a href="#炸药" class="headerlink" title="炸药"></a>炸药</h3><blockquote><p>Q: What explosive is this? Found in an attic today. Diameter: ~10cm</p></blockquote><p>这是什么炸药，今天在阁楼上发现的，直径大概十厘米。</p><!-- ![Explosive.jpg](./whatisthisthing-4/Explosive.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Explosive.jpg" class="Explosive"><blockquote><p>A: Deactivated or not, it’s still nothing you want to have in your home, and might quite possibly be illegal to possess, depending on where you live.</p></blockquote><p>不管是否失效，它仍然不是你想在家里拥有的东西，而且拥有它很可能是非法的，这取决于你住在哪里。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/kgum9e/what_explosive_is_this_found_in_an_attic_today/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/kgum9e/what_explosive_is_this_found_in_an_attic_today/</a></p><h3 id="Cybertruck"><a href="#Cybertruck" class="headerlink" title="Cybertruck"></a>Cybertruck</h3><blockquote><p>Q: I have seen a couple of these truck covers and have no idea what it’s purpose is.</p></blockquote><p>我见过蛮多辆这样子的卡车了，但是我不知道它的用途是什么。</p><!-- ![Cybertruck.jpg](./whatisthisthing-4/Cybertruck.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Cybertruck.jpg" class="Cybertruck"><blockquote><p>A: Its a tent. For camping</p></blockquote><p>这个是用来露营的帐篷。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/k5gmsd/i_have_seen_a_couple_of_these_truck_covers_and/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/k5gmsd/i_have_seen_a_couple_of_these_truck_covers_and/</a></p><h3 id="打麻将"><a href="#打麻将" class="headerlink" title="打麻将"></a>打麻将</h3><blockquote><p>Q: Found some old Oriental silk garments of my great grandfathers.</p></blockquote><p>发现了我曾祖父的一些古老的东方丝绸服装。</p><!-- ![Garments.jpg](./whatisthisthing-4/Garments.jpg) --><!-- ![Garments2.jpg](./whatisthisthing-4/Garments2.jpg) --><img data-src="/2020/12/25/whatisthisthing-4/Garments.jpg" class="Garments"><img data-src="/2020/12/25/whatisthisthing-4/Garments2.jpg" class="Garments2"><blockquote><p>A: Dressing in robes like these to play mah jong was quite in vogue in the 1920s-30s.</p></blockquote><p>在20世纪二三十年代，穿这样的长袍打麻将相当流行。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/jzpw4e/found_some_old_oriental_silk_garments_of_my_great/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/jzpw4e/found_some_old_oriental_silk_garments_of_my_great/</a></p>]]></content>
    
    <summary type="html">
    
      For the identification of mysterious objects
    
    </summary>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/categories/What-is-this-thing/"/>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/tags/What-is-this-thing/"/>
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API 设计：13 个让你用户开心的最佳实践</title>
    <link href="http://www.aemon.top/2020/12/14/restful-api-design-13-best-practices-to-make-your-users-happy/"/>
    <id>http://www.aemon.top/2020/12/14/restful-api-design-13-best-practices-to-make-your-users-happy/</id>
    <published>2020-12-14T07:21:48.000Z</published>
    <updated>2021-01-07T09:39:02.097Z</updated>
    
    <content type="html"><![CDATA[<p>Web 服务在 HTTP 协议存在的时候就已经存在了。但是，特别是当云计算问世以来，它们已成为让客户与我们的数据进行交互的一种非常普遍的方式。</p><p>当在使用 SOAP API 的时候，我还没有足够幸运地成为一名开发者。因此，我对 <strong>REST</strong> 比较了解，这是一种用于构建 API 的基于资源的体系结构风格。</p><p><strong>我一直在从事涉及构建或使用 API 的项目</strong>，已经一两年了。</p><p>我见过的大多数 API 都声称是 <strong>RESTful</strong> ——即符合 REST 体系结构的原则和约束。</p><p>然而，<strong>他们中的一些人一直给 REST 带来非常、非常坏的名声。</strong></p><iframe src="//player.bilibili.com/player.html?aid=44368211&bvid=BV1zb411h7GM&cid=77689275&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>错误的使用状态码，纯文本的响应，模式（schemas）不一致……<strong>这些我都见过</strong>（或者说至少见过很多**）。所以我决定写一些我认为在设计 REST API 时的一些好的实践。</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>我没有权力说下面的做法 100% 符合神圣的 RESTful 原则（如果有的话！）。我从构建和使用各种 API 的经验中收集了这些信息。</p><p>同样，我也不假装已经掌握了 REST API 设计！这是一门<strong>手艺</strong>——你练习得越多，就做得越好。</p><p>我将公开一些代码片段作为「糟糕设计的例子」。如果它们看起来和你写的东西很像，那也没关系！唯一重要的是我们一起学习。我希望这篇简单的清单体文章能够帮助我们做到这一点。</p><p>接下来：<strong>这里有一些技巧、建议和建议来设计让你的用户开心的 REST API。</strong></p><h2 id="了解适用于-REST-的-HTTP-的基础知识"><a href="#了解适用于-REST-的-HTTP-的基础知识" class="headerlink" title="了解适用于 REST 的 HTTP 的基础知识"></a>了解适用于 REST 的 HTTP 的基础知识</h2><p>如果你要构建一个设计良好的 <strong>REST API</strong>，那么最好了解 <strong>HTTP 协议的基础知识</strong>。我坚信<strong>这将帮助你做出更好的设计决策</strong>。</p><p>我发现 MDN Web 文档上的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview" target="_blank" rel="noopener">HTTP 概览</a>是一个非常好的阅读材料。然而这太长了，这里列出一个 HTTP 应用于 REST 的基础知识摘要：</p><ul><li>HTTP 有<strong>动词</strong>（或者说是请求方法）最常见的有：GET，POST，PUT，PATCH和DELETE。</li><li>REST 是<strong>面向资源</strong>的，资源由 <strong>URI</strong> 表示：<code>/newspapers/</code>。</li><li>一个<strong>端点</strong>（endpoints）是一个动词和一个 URI 的组合，例如：<code>GET: /articles/</code>。</li><li>一个端点可以解释为一个<strong>资源上的操作</strong>，例如：<code>POST: /articles/</code> 可能意味着「创建一篇新文章」。</li><li>在高层次，<strong>动词映射到 CRUD 操作</strong>：<code>GET</code> 代表<code>读取</code>，<code>POST</code> 代表<code>创建</code>，<code>PUT</code> 和 <code>PATCH</code> 代表<code>更新</code>，<code>DELETE</code> 代表……emm，<code>删除</code>。</li><li>相应的状态由其<strong>状态码</strong>指定：<code>1xx</code> 用于信息，<code>2xx</code> 用于成功，<code>3xx</code> 用于重定向，<code>4xx</code> 用于客户端错误，<code>5xx</code> 用于服务端错误。</li></ul><p>当然，你可以可使用 HTTP 协议为 REST API 设计提供任何内容，但是我相信这些是基本注意事项。</p><h2 id="不要返回纯文本"><a href="#不要返回纯文本" class="headerlink" title="不要返回纯文本"></a>不要返回纯文本</h2><p>大多数 REST APIs 都使用 JSON 作为数据格式，尽管它不是由 REST 风格强加的。</p><p>但是返回包含 JSON 格式字符串的主体（body）是不够的。你需要<strong>指定 <code>Content-Type</code> 头</strong>！它的值必须设置为 <strong><code>application/json</code></strong>。</p><p>这对于一些<strong>编程客户端</strong>（例如，某人或某服务通过 Python 中的 <code>requests</code> 库来与你的 API 进行交互）来说尤其重要——它们中的一些依赖于这个头来正确解码相应。</p><p><strong>重要提示</strong>：你可以用 Firefox 很容易的验证一个响应（reponse）的 <code>Content-Type</code>。它为响应内置了 <code>Content-Type: application/json</code> 的漂亮提示。🔥</p><!-- ![在Firefox中，“内容类型：文本/纯文本”看起来很普通。](restful-api-design-13-best-practices-to-make-your-users-happy/restapi-plain.png) --><img data-src="/2020/12/14/restful-api-design-13-best-practices-to-make-your-users-happy/restapi-plain.png" class="" title="在Firefox中，“内容类型：文本&#x2F;纯文本”看起来很普通。"><!-- ![检测到“内容类型：application / json”！看这是多么的漂亮和实用。🕺](restful-api-design-13-best-practices-to-make-your-users-happy/restapi-json.png) --><img data-src="/2020/12/14/restful-api-design-13-best-practices-to-make-your-users-happy/restapi-json.png" class="" title="检测到“内容类型：application &#x2F; json”！看这是多么的漂亮和实用。🕺"><h2 id="避免在-URI-中使用动词"><a href="#避免在-URI-中使用动词" class="headerlink" title="避免在 URI 中使用动词"></a>避免在 URI 中使用动词</h2><p>如果你已经了解了基础知识，那么你现在就会知道在 URI 中加入动词是<strong>不 RESTful</strong> 的。</p><p>这是因为 <strong>HTTP 的请求方法应该足以描述在资源上执行的操作</strong>。</p><p>假如你希望提供一个端点来生成和检索文章的 Banner，我会加上 <code>:param</code> 一个 URI 参数的占位符（例如 ID 或者 slug）。你可以会尝试着这么写：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/:slug/generateBanner/</span><br></pre></td></tr></table></figure><p>但是这里 <code>GET</code> 方式在语义上已经足够说明我们正在检索（”GETting”）一个 Banner。那么，让我们使用：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/:slug/banner/</span><br></pre></td></tr></table></figure><p>类似的，对于创建新文章的端点：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不要这样</span></span><br><span class="line">POST: /articles/createNewArticle/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应该这样</span></span><br><span class="line">POST: /articles/</span><br></pre></td></tr></table></figure><p>HTTP 请求方法就是一切！</p><h2 id="使用复数名词"><a href="#使用复数名词" class="headerlink" title="使用复数名词"></a>使用复数名词</h2><p>对于资源名词，你可能很难决定应该使用复数还是单数形式。</p><p>你应该用 <code>/article/:id/</code> （单数）还是 <code>/articles/:id/</code> （复数）？</p><p><strong>我建议使用复数形式。</strong></p><p>为什么？因为它能更好的匹配所有类型的端点。</p><p>我同意 <code>GET /article/2/</code> 很好，但是 <code>GET /article/</code> 怎么样？我们得到的是系统中唯一的条目，还是全部？</p><p>为了避免这种模棱两可，让我们保持一致，在任何地方都使用复数：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/2/</span><br><span class="line">POST: /articles/</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="在响应体中返回错误详细信息"><a href="#在响应体中返回错误详细信息" class="headerlink" title="在响应体中返回错误详细信息"></a>在响应体中返回错误详细信息</h2><p>当 API 服务器处理错误时，在 JSON 正文中返回<strong>错误详细信息</strong>来帮助用户调试是很方便的（也是推荐的!）如果你包含了哪些字段受到了错误的影响，那么将获得特别的荣誉！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Invalid payoad."</span>,</span><br><span class="line">  <span class="attr">"detail"</span>: &#123;</span><br><span class="line">    <span class="attr">"surname"</span>: <span class="string">"This field is required."</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意状态码"><a href="#注意状态码" class="headerlink" title="注意状态码"></a>注意状态码</h2><p>这一点非常重要，如果你在这篇文章只能记住一件事，那就可能是这个：</p><blockquote><p>你的 API 可能做的最糟糕的事情是返回一个错误响应 <code>200 OK</code> 状态代码。</p></blockquote><p>这只是糟糕的做法。应该<strong>返回有意义的状态代码</strong>，以正确的描述错误的类型。</p><p>当然，你可能会想：「但是，我正在按照你给的建议在响应正文中发送错误的详细信息，那么这有什么问题呢？」</p><p>让我给你讲个故事。</p><p>我曾经不得不使用一个 API，每一个响应都返回 <code>200 OK</code>，表明是否请求成功是通过一个 <code>status</code> 字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，即使状态为200 OK，我也不能绝对确定它不会失败。</p><p>实际上，这个 API 还会返回如下响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "status": "failure",</span><br><span class="line">    "data": &#123;</span><br><span class="line">        "error": "Expected at least two items in list."</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（是的——它还返回 HTML 内容，为什么不呢？）</p><p>因此，在我读取 <code>data</code> 之前，我必须检查状态码和特别的 <code>status</code> 字段，以完全确保一切正常。</p><p><strong>这种设计是绝对不能的，因为它破坏了API和用户之间的信任。</strong> 开始担心API可能在欺骗你。</p><p>这一切都是 <em>非常</em> un-RESTful 的。那么你应该怎么做呢？</p><p><strong>使用状态代码，只使用响应体提供错误详细信息。</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">400</span> Bad Request</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "error": "Expected at least two items in list."</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一致使用状态码"><a href="#一致使用状态码" class="headerlink" title="一致使用状态码"></a>一致使用状态码</h2><p>一旦你掌握了状态码，你就应该努力一致地使用它们。</p><p>例如，如果你选择 <code>POST</code> 端点返回某个地方创建的 <code>201 Created</code>，那么对每个 <code>POST</code> 端点使用相同的状态码。</p><p>为什么？因为用户不必担心哪个端点上的 _which方法会在哪个环境中返回哪个状态码_。</p><p>因此，请保持<strong>一致</strong>，如果你偏离约定，请在有明显标志的地方进行<strong>记录</strong>。</p><p>通常，我坚持以下几点：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET: 200 OK</span><br><span class="line">POST: 201 Created</span><br><span class="line">PUT: 200 OK</span><br><span class="line">PATCH: 200 OK</span><br><span class="line">DELETE: 204 No Content</span><br></pre></td></tr></table></figure><h2 id="不要嵌套资源"><a href="#不要嵌套资源" class="headerlink" title="不要嵌套资源"></a>不要嵌套资源</h2><p>REST API 处理资源，并且检索资源的列表或单个实例很简单。但是，当你处理<strong>相关资源</strong>时会发生什么？</p><p>假设我们想要检索特定作者的文章列表——具有 <code>id = 12</code> 的作者。基本上有两种选择。</p><p>第一种方法是将 <code>articles</code> 资源<strong>嵌套</strong>在 <code>authors</code> 资源下，例如:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /authors/12/articles/</span><br></pre></td></tr></table></figure><p>有些人推荐它，因为它确实代表了作者与其文章之间的一对多关系。</p><p>然而，<strong>现在已经不清楚</strong>你在请求什么类型的资源了。这是作者吗？这篇文章吗？</p><p>同样，<a href="https://www.python.org/dev/peps/pep-0020/#id3" target="_blank" rel="noopener">扁平比嵌套更好</a>，因此必须有更好的方法……而且确实有！</p><p>我的建议是<strong>使用 querystring</strong> 直接过滤 <code>articles</code>资源：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/?author_id=12</span><br></pre></td></tr></table></figure><p>这显然意味着：「获取作者#12的所有文章」，不是吗？👍</p><h2 id="优雅地处理拖尾斜杠"><a href="#优雅地处理拖尾斜杠" class="headerlink" title="优雅地处理拖尾斜杠"></a>优雅地处理拖尾斜杠</h2><p>URI 是否应该在后面加上 <code>/</code> 并不是一个真正的争论。简单地选择一种方法或另一种方法（即：带或不带尾斜杠），并且<strong>在用户错误使用的时候，优雅的进行重定向</strong>。</p><p>（我得说，我自己也犯过不止一次这样的错误。🙈）</p><p>又到了故事时间！有一天，当我将 REST API 集成到项目中时，每次调用我都收到了 <code>500 Internal Error</code>。我使用的端点看起来长这个样子：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST: /entities</span><br></pre></td></tr></table></figure><p>我很生气，不知道自己做错了什么。</p><p>最后，事实证明<strong>服务出了问题，因为我缺少了一个结尾斜杠！</strong>所以我开始使用：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST: /entities/</span><br></pre></td></tr></table></figure><p>在此之后，一切都很正常。🤦‍♂️</p><p>该 API 尚未修复这个问题，但是希望你可以为用户防止这种类型的问题。</p><p><strong>温馨提示</strong>：大多数 Web 框架都有一个选项来重定向到URL的尾随或未尾随版本，找到那个选项并激活它。</p><h2 id="使用-querystring-进行过滤和分页"><a href="#使用-querystring-进行过滤和分页" class="headerlink" title="使用 querystring 进行过滤和分页"></a>使用 querystring 进行过滤和分页</h2><p>很多时候，一个简单的端点不足以满足复杂的业务逻辑。</p><p>你的用户可能希望检索满足特定条件的选项，或者一次检索少量的选项以提高性能。</p><p>这正是<strong>过滤</strong>和<strong>分页</strong>的目的。</p><p>使用<strong>过滤</strong>，用户可以指定返回的项目应该具有的属性。</p><p><strong>分页</strong>允许用户检索数据集的一部分。最简单的分页就是<strong>页码分页</strong>，它由 <code>page</code> 和 <code>page_size</code> 决定。</p><p>现在的问题是：如何将这些功能集成到 <code>RESTful API</code> 中？</p><p>我的答案是：<strong>使用 querystring</strong>。</p><p>我想说，使用 querystring 进行分页的原因是非常明显的。它是这样的：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/?page=1&amp;page_size=10</span><br></pre></td></tr></table></figure><p>但对于过滤来说，它可能不那么明显。刚开始，你可能会考虑这样做，只检索已发表文章的列表：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/published/</span><br></pre></td></tr></table></figure><p>设计问题：<strong>published 不是资源</strong>！相反，它是你正在检索的数据的特征。这种事情应该放在 <strong>querystring</strong> 中。</p><p>因此最后，用户可以检索「包含 20 篇的已发布文章的第二页」，如下所示：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET: /articles/?published=true&amp;page=2&amp;page_size=20</span><br></pre></td></tr></table></figure><p>很漂亮，不是吗？</p><h2 id="学习-401-Unauthorized-和-403-Forbidden-之间的区别"><a href="#学习-401-Unauthorized-和-403-Forbidden-之间的区别" class="headerlink" title="学习 401 Unauthorized 和 403 Forbidden 之间的区别"></a>学习 <code>401 Unauthorized</code> 和 <code>403 Forbidden</code> 之间的区别</h2><p>在处理 API 中的安全性错误时，很容易混淆该错误是与<strong>authentication</strong>还是<strong>authorization</strong>（也称为permissions）有关——我经常遇到这种情况。</p><p>下面是我的备忘单，让你知道根据情况我该如何应对：</p><ul><li>用户是否未提供身份验证凭据？他们无效吗？👉 <code>401 Unauthorized</code>。</li><li>用户是否已正确验证身份，但没有访问资源所需的权限？👉 <code>403 Forbidden</code>。</li></ul><h2 id="充分利用-202-Accepted"><a href="#充分利用-202-Accepted" class="headerlink" title="充分利用 202 Accepted"></a>充分利用 <code>202 Accepted</code></h2><p>我发现 <code>202 Accepted</code> 被用来代替 <code>201 Created</code> 是非常方便的。它的意思是：</p><blockquote><p>我，服务器，已经理解了你的请求。我还没有创建资源，但这很好（指这不是一个错误）。</p></blockquote><p>我认为 <code>202 Accepted</code> 特别适用于以下两种情况：</p><ul><li>资源是否会用于将来的处理而创建——例如，在一个工作完成后。</li><li>如果资源已经以某种方式存在，但是不应将其解释为错误。</li></ul><h2 id="使用专门用于-REST-API-的-web-框架"><a href="#使用专门用于-REST-API-的-web-框架" class="headerlink" title="使用专门用于 REST API 的 web 框架"></a>使用专门用于 REST API 的 web 框架</h2><p>作为最后一个最佳实践，我们将讨论这个问题：<strong>你如何实际在 API 中实现最佳实践？</strong></p><p>通常，你想创建一个快速的 API，以便一些服务可以相互交互。</p><p>Python 开发人员将使用 Flask，JS 开发人员将使用 Express，他们将实现一些简单的路由来处理 HTTP 请求。</p><p>这种选择的问题在于，<strong>通常而言，该框架并非针对构建 REST API 服务</strong>。</p><p>例如，Flask 和 Express 都是两个非常通用的框架，但是它们并不是<em>专门</em>用来帮助你构建 REST API 的。</p><p>因此，你必须采取<strong>额外的步骤</strong>在你的 API 中实现最佳实践。大多数时候，「懒惰」或「缺乏时间」意味着你不会付出努力，从而留给你的用户一个古怪的 API。</p><p>解决方案很简单：<strong>使用合适的工具</strong>。</p><p>各种语言中出现了专门用于构建 REST API 的新框架。<strong>他们帮助你遵循最佳实现，不会很麻烦，也不牺牲生产力。</strong></p><p>在 Python 中，我发现的最好的 API 框架之一是 <a href="https://falconframework.org" target="_blank" rel="noopener">Falcon</a>。它与 Flask 一样简单易用，非常快，并且非常适合在几分钟内构建 REST API。</p><!-- ![Falcon: Unburdening APIs for over 0.0564 centuries.](restful-api-design-13-best-practices-to-make-your-users-happy/Falcon.png) --><img data-src="/2020/12/14/restful-api-design-13-best-practices-to-make-your-users-happy/Falcon.png" class="" title="Falcon: Unburdening APIs for over 0.0564 centuries."><p>如果你使用的是 Django，那么转到 <a href="http://www.django-rest-framework.org" target="_blank" rel="noopener">Django REST Framework</a> 即可。它不是那么直观，但是功能强大。</p><p>在 NodeJS 中，尽管我尚未尝试过 <a href="http://restify.com" target="_blank" rel="noopener">Restify</a>，但它似乎也是一个不错的选择。</p><p>我强烈建议你尝试一下这些框架！它们将帮助你构建美观，优雅且设计良好的 REST API。</p><h2 id="让我们给-REST-一个好名声！"><a href="#让我们给-REST-一个好名声！" class="headerlink" title="让我们给 REST 一个好名声！"></a>让我们给 REST 一个好名声！</h2><p>我们都应该努力使 API 成为一种使用乐趣。希望本文能够帮助你学习一些技巧和技术，以构建<strong>更好的 REST API</strong>。对我而言，它归结为<strong>良好的语义</strong>，<strong>简单性</strong>和常识。</p><p>REST API 设计是一门手艺。如果你对以上几点有不同的看法，我很乐意听听。</p><p>在此期间，请持续提供优质的API！💻</p><hr><p>原文地址：<a href="https://florimond.dev/blog/articles/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy/" target="_blank" rel="noopener">RESTful API Design: 13 Best Practices to Make Your Users Happy</a>, by Florimond Manca</p>]]></content>
    
    <summary type="html">
    
      RESTful 之路第一步：确保错误不会返回 200 OK
    
    </summary>
    
    
      <category term="翻译" scheme="http://www.aemon.top/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="RESTful" scheme="http://www.aemon.top/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>What is this thing 3</title>
    <link href="http://www.aemon.top/2020/09/17/whatisthisthing-3/"/>
    <id>http://www.aemon.top/2020/09/17/whatisthisthing-3/</id>
    <published>2020-09-17T01:33:54.000Z</published>
    <updated>2021-01-07T09:39:02.157Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.reddit.com/r/whatisthisthing/" target="_blank" rel="noopener">What is this thing</a> 是 reddit 上的一个社区（community），上面时不时会有人发一些没见过的玩意来提问。</p><p>一起来看看吧！</p><a id="more"></a><h3 id="跳绳"><a href="#跳绳" class="headerlink" title="跳绳"></a>跳绳</h3><blockquote><p>Q: Jump Rope Spike? Two spring covered spikes connected with paracord</p></blockquote><p>带钉子的跳绳？两个带有钉子的弹性握把被伞绳连接在了一起。</p><!-- ![JumpRope.jpg](./whatisthisthing-3/JumpRope.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/JumpRope.jpg" class="JumpRope"><blockquote><p>A: They are rescue grips for things like ice fishing. Run the cord through your jacket sleeves and the spikesv are at hand if you fall through the ice.</p></blockquote><p>这是用于类似冰钓的时候的救援物。将绳子穿过夹克的袖子，这样当你落水时，钉子就在你触手可及的地方。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/itl1j2/jump_rope_spike_two_spring_covered_spikes/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/itl1j2/jump_rope_spike_two_spring_covered_spikes/</a></p><h3 id="狗牌"><a href="#狗牌" class="headerlink" title="狗牌"></a>狗牌</h3><blockquote><p>Q: WITT My dad passed away early Monday morning and my siblings and I are in the process of cleaning out his things from his room. We found these items in a jewelry box with his US Air Force dog tag from Vietnam. Quite obviously they’re pins, but I’m looking for some help identifying them- if they are from his service and if not, what they might be from. He didn’t much like to talk about his time in the military.</p></blockquote><p>这是什么？我爸爸在星期一清晨去世了，我和我的兄弟姐妹们在清理他房间里的东西，我们在一个装有他越南的美国空军狗牌的首饰盒里发现了这些东西，很明显这些是别针。我们在寻找能够帮我们鉴别它们的信息，如果它们是他服役期间的，如果不是的话，那这些又是什么呢？他不太愿意谈论他在军队时候的日子。</p><!-- ![DogTag.jpg](./whatisthisthing-3/DogTag.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/DogTag.jpg" class="DogTag"><blockquote><p>A: Top 2 are pins of the PAVN of a major general rank and a corporal. Third pin too blurry. 4th pin dont know. Top 2 pins are obviously “war souvenirs”.</p></blockquote><p>前两枚是少将和下士的徽章，第三枚太模糊了，第四枚没清楚。前两枚徽章显然是「战争纪念品」。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/ir4snh/my_dad_passed_on_monday_and_in_the_process_of/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/ir4snh/my_dad_passed_on_monday_and_in_the_process_of/</a></p><h3 id="肩章"><a href="#肩章" class="headerlink" title="肩章"></a>肩章</h3><blockquote><p>Q: Buddy bought a shop, the shop had a military uniform in the attic. Appears WWII era. What does this patch mean?</p></blockquote><p>朋友盘了家商店，商店的阁楼上发现了这件军装，出现在二战时期，这个标志是什么意思？</p><!-- ![insignia.jpg](./whatisthisthing-3/insignia.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/insignia.jpg" class="insignia"><blockquote><p>A: The six pointed star is significant of the number “six” and the red letter “A” signifies “Army.” The red and white colors are the colors of the design approved for distinguishing flags for the numbered Armies.</br>The shoulder sleeve insignia was originally approved for the Sixth Army on 26 January 1927. The original design was cancelled and a new design approved on 10 January 1945. It was amended to change the background color from olive drab to Army Green on 6 December 1960.</br><a href="http://www.milbadges.com/corps/USA/field" target="_blank" rel="noopener">From here:</a></p></blockquote><p>美国第六陆军，肩袖徽章。</p><p>六个尖角代表数字六，红色的A代表军队（Army）。红色和白色是批准用于区分编号的陆军旗帜的设计颜色。</p><p>最初在1927年1月26日第六军批准了肩袖徽章。原来的设计被取消，新的设计于1945年1月10日获得批准。1960年12月6日，修改后的背景色由橄榄色改为军绿色。</p><!-- ![insignia.gif](./whatisthisthing-3/insignia.gif) --><img data-src="/2020/09/17/whatisthisthing-3/insignia.gif" class="insignia"><p><a href="https://www.reddit.com/r/whatisthisthing/comments/irtrnq/buddy_bought_a_shop_the_shop_had_a_military/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/irtrnq/buddy_bought_a_shop_the_shop_had_a_military/</a></p><h3 id="洞"><a href="#洞" class="headerlink" title="洞"></a>洞</h3><blockquote><p>Q: Built into the side of a small hill in SE Pennsylvania. Doorway is about 4-5’ high. This road used to be well traveled before cars came along. Very close to a creek.</p></blockquote><p>建在宾夕法尼亚州东南部一座小山上。门口大约有4-5英尺高。这条路在汽车出现之前行人就很多了。离小溪很近。</p><!-- ![LimeKilns.gif](./whatisthisthing-3/LimeKilns.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/LimeKilns.jpg" class="LimeKilns"><blockquote><p>A: kind’a resembles old historic lime kilns</p></blockquote><p>有几分像有着古老历史的石灰窑。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/irid2p/built_into_the_side_of_a_small_hill_in_se/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/irid2p/built_into_the_side_of_a_small_hill_in_se/</a></p><h3 id="艺术品"><a href="#艺术品" class="headerlink" title="艺术品"></a>艺术品</h3><blockquote><p>Q: I found this glass type thing while digging in my yard. It was about 2 feet deep in the dirt, as in the first picture, and it is 16.5 pounds or 7.5kg.</p></blockquote><p> 我在院子里挖东西的时候发现了这个玻璃样的东西。就和第一张照片一样，它被埋在泥土中大约有2英尺深，重16.5磅(7.5公斤)。</p> <!-- ![glass1.png](./whatisthisthing-3/glass1.png) --> <!-- ![glass2.jpg](./whatisthisthing-3/glass2.jpg) --> <!-- ![glass3.jpg](./whatisthisthing-3/glass3.jpg) --> <!-- ![glass4.jpg](./whatisthisthing-3/glass4.jpg) -->  <img data-src="/2020/09/17/whatisthisthing-3/glass2.jpg" class="glass2"> <img data-src="/2020/09/17/whatisthisthing-3/glass3.jpg" class="glass3"> <img data-src="/2020/09/17/whatisthisthing-3/glass4.jpg" class="glass4"><blockquote><p>A: Looks like <a href="https://www.google.com/search?q=white+slag+glass+chunks&safe=active&rlz=1CAPPDO_enUS786US786&sxsrf=ALeKk02rK8k0TcJIDPGZVwPSi-BkUJCKaQ:1600028469435&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjb6bPE-ubrAhWids0KHQDXCywQ_AUoAnoECA0QBA&biw=1318&bih=665" target="_blank" rel="noopener">slag glass</a>. It may have been used for decoration.</p></blockquote><p> 看起来像炉渣玻璃，它可能被用来装饰。</p><blockquote><p>A: Popular in the art nouveau and Craftsman styles and again in the ‘50s.</p></blockquote><p>在新艺术和工匠风格中流行，在50年代再次流行。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/is5nux/i_found_this_glass_type_thing_while_digging_in_my/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/is5nux/i_found_this_glass_type_thing_while_digging_in_my/</a></p><h3 id="绝对是古董"><a href="#绝对是古董" class="headerlink" title="绝对是古董"></a>绝对是古董</h3><blockquote><p>Q: Found while cleaning up my parents estate, never seen anything like it before. It’s rusted and definitely antique</p></blockquote><p>在清理父母的财产时发现的，之前从未见过类似的东西。生锈了，绝对是古董。</p><!-- ![CandleTommy.jpg](./whatisthisthing-3/CandleTommy.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/CandleTommy.jpg" class="CandleTommy"><blockquote><p>A: I think that’s a <a href="https://www.google.com/search?q=miner%27s+candle+holder&safe=active&rlz=1CAPPDO_enUS786US786&sxsrf=ALeKk03M6eSF7tFqPtzsxrUYRzmgcOtKbQ:1599781113489&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjQlPOH4d_rAhWWHM0KHQpCAZAQ_AUoAnoECA4QBA&biw=1318&bih=665" target="_blank" rel="noopener">miner’s candle holder</a>. It would have been stuck into a timber. It’s called a sticking tommy</p></blockquote><p>我觉得这是个矿工用的烛台，它被卡在木头中。它叫做 sticking tommy（不知道咋翻译了）</p><p>注：去找了下它的使用办法，直接看图：</p><!-- ![CandleTommy.jpg](./whatisthisthing-3/CandleTommy2.jpg) --><!-- ![CandleTommy.jpg](./whatisthisthing-3/CandleTommy3.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/CandleTommy2.jpg" class="CandleTommy2"><img data-src="/2020/09/17/whatisthisthing-3/CandleTommy3.jpg" class="CandleTommy3"><p><a href="https://www.reddit.com/r/whatisthisthing/comments/iqetl8/found_while_cleaning_up_my_parents_estate_never/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/iqetl8/found_while_cleaning_up_my_parents_estate_never/</a></p><h3 id="一战"><a href="#一战" class="headerlink" title="一战"></a>一战</h3><blockquote><p>Q: WWI-era army tool found in a bag of rifle and pistol rounds</p></blockquote><p>在一袋步枪和手枪子弹中发现的一战时期的军用工具</p><!-- ![WWI.jpg](./whatisthisthing-3/WWI.jpg) --><img data-src="/2020/09/17/whatisthisthing-3/WWI.jpg" class="WWI"><blockquote><p>A: This is a tool used to tear down the rifle for maintenance and cleaning. It can also help adjust the sights of the rifle.</p></blockquote><p>这是一种用来拆卸步枪进行维护和清洁的工具。它还可以帮助调整步枪的瞄准器。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/iqsnqx/wwiera_army_tool_found_in_a_bag_of_rifle_and/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/iqsnqx/wwiera_army_tool_found_in_a_bag_of_rifle_and/</a></p>]]></content>
    
    <summary type="html">
    
      For the identification of mysterious objects
    
    </summary>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/categories/What-is-this-thing/"/>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/tags/What-is-this-thing/"/>
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>What is this thing 2</title>
    <link href="http://www.aemon.top/2020/09/16/whatisthisthing-2/"/>
    <id>http://www.aemon.top/2020/09/16/whatisthisthing-2/</id>
    <published>2020-09-16T04:12:21.000Z</published>
    <updated>2021-01-07T09:39:02.113Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.reddit.com/r/whatisthisthing/" target="_blank" rel="noopener">What is this thing</a> 是 reddit 上的一个社区（community），上面时不时会有人发一些没见过的玩意来提问。</p><p>一起来看看吧！</p><a id="more"></a><h3 id="瓦片"><a href="#瓦片" class="headerlink" title="瓦片"></a>瓦片</h3><blockquote><p>Q: Slave Tile?? Found at an antique store in Orlando. WITT</p></blockquote><p>奴隶瓦片？在一家奥兰多的古董店里找到的。这是个嘛？</p><!-- ![weird-notes-2.jpg](./whatisthisthing-2/slave-tile.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/slave-tile.jpg" class="slave-tile"><blockquote><p>A: Tiles of this type were reportedly made and used by slaves in Georgia as grave markers and garden tiles.</p></blockquote><p>据说，这种类型的瓦片是乔治亚州的奴隶制造的，被用于墓碑和花园的瓦片。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/it9uvo/slave_tile_found_at_an_antique_store_in_orlando/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/it9uvo/slave_tile_found_at_an_antique_store_in_orlando/</a></p><h3 id="被裱起来的电路板"><a href="#被裱起来的电路板" class="headerlink" title="被裱起来的电路板"></a>被裱起来的电路板</h3><blockquote><p>Q: Framed old circuit board. Belonged to my great uncle. I’m curious to know what it was used for and why it might have been framed.</p></blockquote><p>被装裱起来的旧电路板，属于我的叔公，我很想知道它是做什么的，为什么要被裱起来。</p><!-- ![circuit-board-1.jpg](./whatisthisthing-2/circuit-board-1.jpg) --><!-- ![circuit-board-2.jpg](./whatisthisthing-2/circuit-board-2.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/circuit-board-1.jpg" class="circuit-board-1"><img data-src="/2020/09/16/whatisthisthing-2/circuit-board-2.jpg" class="circuit-board-2"><blockquote><p>A: ml747m seems to be an op amp. date code is 1973. so it is some sort of analog circuit. maybe your great uncle designed it. i have many of the boards i have designed mounted in frames and hanging on the wall.</p></blockquote><p>ML747M 看起来像一个运算放大器，日期代码是 1973。所以这应该是某种模拟电路。或许这是你的叔公设计的。我设计的很多板子都放在框架中挂在了墙上。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/ipdjs5/framed_old_circuit_board_belonged_to_my_great/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/ipdjs5/framed_old_circuit_board_belonged_to_my_great/</a></p><h3 id="组装带"><a href="#组装带" class="headerlink" title="组装带"></a>组装带</h3><blockquote><p>Q: “Assembly tape” on my Pop-Tart this morning. It’s also on the inside of the wrapper.</p></blockquote><p>早上在「Pop-Tart」上发现的组装带，在包装袋的内部也有。</p><!-- ![assembly-tape-1.jpg](./whatisthisthing-2/assembly-tape-1.jpg) --><!-- ![assembly-tape-2.jpg](./whatisthisthing-2/assembly-tape-2.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/assembly-tape-1.jpg" class="assembly-tape-1"><img data-src="/2020/09/16/whatisthisthing-2/assembly-tape-2.jpg" class="assembly-tape-2"><blockquote><p>A: Splice from film change on flow wrapper during processing. When one roll of “wrapper” is exhausted the next roll is taped to the tag end to run it through the equipment. High visibility tape typically ensures it is removed downstream in the production process.</p></blockquote><p>这种胶接来自包装生产线的上薄膜的变化，当一卷组装带用完时，下一卷组装带粘贴到标签端使其穿过设备。这种看起来非常明显的胶带，通常可以确保在生产线下游发现并移除他们。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/iqooe6/assembly_tape_on_my_poptart_this_morning_its_also/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/iqooe6/assembly_tape_on_my_poptart_this_morning_its_also/</a></p><h3 id="铁片"><a href="#铁片" class="headerlink" title="铁片"></a>铁片</h3><blockquote><p>Q: Found metal detecting outside of an old church.</p></blockquote><p>在一座老教堂外边发现的铁片。</p><!-- ![metal.jpg](./whatisthisthing-2/metal.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/metal.jpg" class="metal"><blockquote><p>A: It looks like a Ferrotype photograph. They started being used in the 1850s’s.</p></blockquote><p>这个看起来像一个铁板照片，在19世纪50年代开始使用。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/iq4lj3/found_metal_detecting_outside_of_an_old_church/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/iq4lj3/found_metal_detecting_outside_of_an_old_church/</a></p><h3 id="天花板上的钥匙"><a href="#天花板上的钥匙" class="headerlink" title="天花板上的钥匙"></a>天花板上的钥匙</h3><blockquote><p>Q: Key in the ceiling at school</p></blockquote><p>学校天花板上的钥匙。</p><!-- ![key.jpg](./whatisthisthing-2/key.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/key.jpg" class="key"><blockquote><p>A: This could be to test duct detectors in a fire alarm system. Duct detectors will shut off the air conditioning unit if it senses smoke to prevent it from circulating the air.</p></blockquote><p>这个可能是为了测试火灾报警系统中的风管探测器，如果风管探测器检测到烟雾，它将关闭空调，防止空气流通。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/ir4ivm/key_in_the_ceiling_at_school/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/ir4ivm/key_in_the_ceiling_at_school/</a></p><h3 id="谷歌地图"><a href="#谷歌地图" class="headerlink" title="谷歌地图"></a>谷歌地图</h3><blockquote><p>Q: Found on Google maps in the Yukon/Delta region in Alaska, went back to look for it agaun after screen shot but couldn’t find anything. What is it?</p></blockquote><p>使用谷歌地图在阿拉斯加州的育空三角洲地区的找到的，截图下来继续查找，没有任何发现，这个是什么？</p><!-- ![LORAN.jpg](./whatisthisthing-2/LORAN.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/LORAN.jpg" class="LORAN"><blockquote><p>A: <a href="https://goo.gl/maps/Te4nCUtFCKzBckfJ8" target="_blank" rel="noopener">Here it is</a></br><a href="https://www.loran-history.info/tok/tok.htm" target="_blank" rel="noopener">Here’s some information on it.</a> Decommissioned LORAN array.</p></blockquote><p>一个正式停用的远距离无线电导航系统阵列。</p><p>（译者注：英文缩写LORAN，为“Long Range Navigation”（远程导航）的缩写，中文音译为“罗兰”或“劳兰”，是在二战期间由美国开发的一种无线电导航及授时系统。目前已衍生了多个版本。）</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/ip68ur/found_on_google_maps_in_the_yukondelta_region_in/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/ip68ur/found_on_google_maps_in_the_yukondelta_region_in/</a></p><h3 id="钟"><a href="#钟" class="headerlink" title="钟"></a>钟</h3><blockquote><p>Q: Weird old bell found in the Hudson Valley.</p></blockquote><p>哈德逊河谷发现的怪异的古钟。</p><!-- ![bell.jpg](./whatisthisthing-2/bell.jpg) --><img data-src="/2020/09/16/whatisthisthing-2/bell.jpg" class="bell"><blockquote><p>A: Dutch East Indian Nautical bell?</p></blockquote><p>荷兰东印度航海钟？</p><blockquote><p>A: Vereenigde Oostindische Compagnie</p></blockquote><p>荷兰东印度公司</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/iq3ij4/weird_old_bell_found_in_the_hudson_valley/" target="_blank" rel="noopener">https://www.reddit.com/r/whatisthisthing/comments/iq3ij4/weird_old_bell_found_in_the_hudson_valley/</a></p>]]></content>
    
    <summary type="html">
    
      For the identification of mysterious objects
    
    </summary>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/categories/What-is-this-thing/"/>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/tags/What-is-this-thing/"/>
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>What is this thing</title>
    <link href="http://www.aemon.top/2020/09/15/whatisthisthing/"/>
    <id>http://www.aemon.top/2020/09/15/whatisthisthing/</id>
    <published>2020-09-15T11:38:35.000Z</published>
    <updated>2021-01-07T09:39:02.465Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.reddit.com/r/whatisthisthing/" target="_blank" rel="noopener">What is this thing</a> 是 reddit 上的一个社区（community），上面时不时会有人发一些没见过的玩意来提问。</p><p>一起来看看吧！</p><a id="more"></a><h3 id="奇怪的笔记"><a href="#奇怪的笔记" class="headerlink" title="奇怪的笔记"></a>奇怪的笔记</h3><blockquote><p>Q: my grandpa recently passed away and we found these weird notes in a random briefcase, there’s heaps more pages that look the same too, any clue what it is??</p></blockquote><p>我的爷爷前不久去世了，我们在一个杂乱的公文包里发现了这些奇怪的笔记，有非常多页而且看起来都差不多，有人能告诉我这是什么么？</p><!-- ![weird-notes-1.jpg](./whatisthisthing/weird-notes-1.jpg) --><!-- ![weird-notes-2.jpg](./whatisthisthing/weird-notes-2.jpg) --><img data-src="/2020/09/15/whatisthisthing/weird-notes-1.jpg" class="weird-notes-1"><img data-src="/2020/09/15/whatisthisthing/weird-notes-2.jpg" class="weird-notes-2"><blockquote><p>A: It definitely looks like he’s keeping score for 2 players. And the goal of the game is to stay under 100. Which player 1 does 17 times, and player 2 does 14 times.</p></blockquote><p>看起来他是在为两位玩家计分，并且这个游戏的要求是得分需要在 100 分以下，玩家一做到了 17 次，玩家二做到了 14 次。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/isyukx/my_grandpa_recently_passed_away_and_we_found/" target="_blank" rel="noopener">Source</a></p><h3 id="吊坠"><a href="#吊坠" class="headerlink" title="吊坠"></a>吊坠</h3><blockquote><p>Q: Found in a creek bed in Oak Hill, Texas. Has a small hole on top of the head that goes all the way through.</p></blockquote><p>在德克萨斯州橡树山的一个河床中找到的，头顶有一个贯穿的小孔。</p><!-- ![caddo-1.jpg](./whatisthisthing/caddo-1.jpg) --><!-- ![caddo-2.jpg](./whatisthisthing/caddo-2.jpg) --><!-- ![caddo-3.jpg](./whatisthisthing/caddo-3.jpg) --><img data-src="/2020/09/15/whatisthisthing/caddo-1.jpg" class="caddo-1"><img data-src="/2020/09/15/whatisthisthing/caddo-2.jpg" class="caddo-2"><img data-src="/2020/09/15/whatisthisthing/caddo-3.jpg" class="caddo-3"><blockquote><p>A: “Seems to be a pendant head from the Caddo tribe. Looks legit and definitely pre-columbian. There’s an oak hill Caddo site near there. Could be an import as well but unlikely.” -My Archeologist Father</p></blockquote><p>我的考古学家老爹说：“似乎是是来自卡多部落的吊坠，看起来是真的并且是前哥伦布时期。橡树山附近有卡多遗址，也可能是进口，但是可能性不大。”</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/isa0vn/found_in_a_creek_bed_in_oak_hill_texas_has_a/" target="_blank" rel="noopener">Source</a></p><h3 id="发声的杯子"><a href="#发声的杯子" class="headerlink" title="发声的杯子"></a>发声的杯子</h3><blockquote><p>Q: Found in Freiburg, Germany. False bottom with this chip and sensor inside. Balls’ in your court…</p></blockquote><p>在德国弗莱堡发现的，假的杯底里面有着芯片和传感器，看你的了。</p><!-- ![mug-1.jpg](./whatisthisthing/mug-1.jpg) --><!-- ![mug-2.jpg](./whatisthisthing/mug-2.jpg) --><!-- ![mug-3.jpg](./whatisthisthing/mug-3.jpg) --><!-- ![mug-4.jpg](./whatisthisthing/mug-4.jpg) --><img data-src="/2020/09/15/whatisthisthing/mug-1.jpg" class="mug-1"><img data-src="/2020/09/15/whatisthisthing/mug-2.jpg" class="mug-2"><img data-src="/2020/09/15/whatisthisthing/mug-3.jpg" class="mug-3"><img data-src="/2020/09/15/whatisthisthing/mug-4.jpg" class="mug-4"><blockquote><p>A: it is probably a mug that made sounds when filled with liquid, I only assume so due to a kid friendly design on the side of the mug.</p></blockquote><p>这个大概是一个当里面倒满水后会发出声音的马克杯，我这样猜只是因为马克杯身上有着儿童喜欢的卡通图案。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/it40n1/found_in_freiburg_germany_false_bottom_with_this/" target="_blank" rel="noopener">Source</a></p><h3 id="声波技术"><a href="#声波技术" class="headerlink" title="声波技术"></a>声波技术</h3><blockquote><p>Q: The only words on the case are “sonic technology”</p></blockquote><p>上面唯一能看到的字是「声波技术」。</p><!-- ![onic-technology.jpg](./whatisthisthing/onic-technology.jpg) --><img data-src="/2020/09/15/whatisthisthing/sonic-technology.jpg" class="sonic-technology"><blockquote><p>A: Bug repeller.</br>Edit- scratch that. It’s a Sonic Technologies ultrasonic rodent repeller. Just an old one.</p></blockquote><p>驱虫器，一种使用超声波技术的驱鼠器，只是很旧了。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/isq73x/the_only_words_on_the_case_are_sonic_technology/" target="_blank" rel="noopener">Source</a></p><h3 id="电话"><a href="#电话" class="headerlink" title="电话"></a>电话</h3><blockquote><p>Q: Found at an antique store. WITT?</p></blockquote><p>在一个古董店里找到的，这是个嘛？</p><!-- ![NCR.jpg](./whatisthisthing/NCR.jpg) --><img data-src="/2020/09/15/whatisthisthing/NCR.jpg" class="NCR"><blockquote><p>A: It’s an NCR stamping phone / charge phone. Was used for automated credit approval in department stores.</p></blockquote><p>这是一个 NCR 牌的冲压/收费电话，曾经用于百货公司自动信贷审批。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/isbesi/found_at_an_antique_store_witt/" target="_blank" rel="noopener">Source</a></p><h3 id="拆弹小组"><a href="#拆弹小组" class="headerlink" title="拆弹小组"></a>拆弹小组</h3><blockquote><p>Q: Bomb squad called in to examine a possible “antique missile” found at a construction site down the road. Any chance that’s really what this is?</p></blockquote><p>拆弹小组被叫来检查这个在路边某个建筑工地上发现的「古董炸弹」,这是真的吗？</p><!-- ![bomb.jpg](./whatisthisthing/bomb.jpg) --><img data-src="/2020/09/15/whatisthisthing/bomb.jpg" class="bomb"><blockquote><p>A: 105mm tank round, no Fuze on it.</p></blockquote><p>105 毫米坦克炮弹，没有引信。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/ist2f6/bomb_squad_called_in_to_examine_a_possible/" target="_blank" rel="noopener">Source</a></p><h3 id="小屋"><a href="#小屋" class="headerlink" title="小屋"></a>小屋</h3><blockquote><p>Q: Found next to a cliff in the UK, has chains in it. Any ideas what this thing is?</p></blockquote><p>在英国的一个悬崖边发现的，上面有铁链，知道这是什么吗？</p><!-- ![huts.jpg](./whatisthisthing/huts.jpg) --><img data-src="/2020/09/15/whatisthisthing/huts.jpg" class="huts"><blockquote><p>A: Is this near the railway line? then it could be a line workers hut, used to store equipment and bits and pieces. With the casualisation of the workforce these huts have gone out of use.</p></blockquote><p>它是不是很靠近铁路线？它可能是一个铁路线工人小屋，用于存放一些设备和零碎的东西，由于劳动力临时化，这些小屋已经不再被使用了。</p><p><a href="https://www.reddit.com/r/whatisthisthing/comments/irveg5/found_next_to_a_cliff_in_the_uk_has_chains_in_it/" target="_blank" rel="noopener">Source</a></p>]]></content>
    
    <summary type="html">
    
      For the identification of mysterious objects
    
    </summary>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/categories/What-is-this-thing/"/>
    
    
      <category term="What is this thing?" scheme="http://www.aemon.top/tags/What-is-this-thing/"/>
    
      <category term="翻译" scheme="http://www.aemon.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Symbol 是什么？</title>
    <link href="http://www.aemon.top/2020/04/25/Symbol-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.aemon.top/2020/04/25/Symbol-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2020-04-25T12:21:04.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>前些天偶然发现了 Symbol，学习了一番，这里记录一下。</p><a id="more"></a><h2 id="Symbol-是什么"><a href="#Symbol-是什么" class="headerlink" title="Symbol 是什么"></a>Symbol 是什么</h2><p>symbol 是一种基本数据类型（primitive data type），它是在 ECMAScript 6 引入的一种新的基本数据类型，将 JavaScript 的基本数据类型扩展到了 7 种（分别是 string，number，bigint，boolean，null，undefined 和 symbol）。</p><h2 id="Symbol-有什么用"><a href="#Symbol-有什么用" class="headerlink" title="Symbol 有什么用"></a>Symbol 有什么用</h2><p>我们来看一个例子，现在要开发一个学校管理系统简单的权限功能，一共有三种权限：学生、老师和管理员：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> permissions = &#123;</span><br><span class="line">    student: <span class="string">'student'</span>,</span><br><span class="line">    teacher: <span class="string">'teacher'</span>,</span><br><span class="line">    administrator: <span class="string">'administrator'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当我们的功能对于不同权限的人有不同的实现的时候就可以通过以下方法来完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.permission === permissions.student) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.permission === permissions.teacher) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.permission === permissions.administrator) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以用 <code>switch</code> 来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (user.permission) &#123;</span><br><span class="line">    <span class="keyword">case</span> permissions.student:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> permissions.teacher:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> permissions.administrator:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，就能根据不同的权限实现不能的功能。</p><p>这时，我们回过头来看 <code>permissions</code> 的时候会发现：<code>permissions.student</code>、<code>permissions.teacher</code> 和 <code>permissions.administrator</code> 具体取了什么值并不重要，换句话说只要三者的值各不相同即使我们写成下面这样也是无所谓的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> permissions = &#123;</span><br><span class="line">    student: <span class="string">'mv@RR&amp;gr76!6YA'</span>,</span><br><span class="line">    teacher: <span class="string">'GF53@A$o4MWgE$'</span>,</span><br><span class="line">    administrator: <span class="string">'5ypSmN4prP#xAb'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，程序也能正常运行。</p><p>而 Symbol 就能做到这一点：Symbol 的值都是独一无二的。</p><p>可以通过 <code>symbol()</code> 来生成一个 symbol 类型的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="built_in">Symbol</span>()</span><br></pre></td></tr></table></figure><p>那我们的代码就可以改写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> permissions = &#123;</span><br><span class="line">    student: <span class="built_in">Symbol</span>(),</span><br><span class="line">    teacher: <span class="built_in">Symbol</span>(),</span><br><span class="line">    administrator: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不用再定义一些无意义的字符串来作为判断的值了，代码中就会少很多魔术字符串。</p><h2 id="Symbol-还有什么用"><a href="#Symbol-还有什么用" class="headerlink" title="Symbol 还有什么用"></a>Symbol 还有什么用</h2><p>Symbol 还可以做为属性的键名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numKey = <span class="built_in">Symbol</span>(<span class="string">'Number'</span>)</span><br><span class="line"><span class="keyword">var</span> funKey = <span class="built_in">Symbol</span>(<span class="string">'Funtion'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    [numKey]: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj[funKey] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，我们就不用担心某一个键被不小心覆写或改写。</p><p>当我们需要调用的时候，只能通过 Symbol 实例来调用，又因为每一个 Symbol 实例都是独一无二的，所以就不存在被误写的可能啦。</p><p>需要注意的是，不能用 <code>.</code> 运算符来定义或调用，而是要将 Symbol 实例放在方括号中。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>当 Symbol 作为属性名的时候，如果我们对对象进行遍历，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numKey = <span class="built_in">Symbol</span>(<span class="string">'Number'</span>)</span><br><span class="line"><span class="keyword">var</span> funKey = <span class="built_in">Symbol</span>(<span class="string">'Funtion'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    [numKey]: <span class="number">1</span>,</span><br><span class="line">    [funKey]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">    strKey: <span class="string">'String'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br></pre></td></tr></table></figure><p>那些使用 Symbol 作为属性名的属性是不会出现在遍历循环中的，包括一些常用的遍历方法：<code>for...in</code>、<code>for...of</code>、<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code> 和 <code>JSON.stringify()</code>。</p><p>但是这不代表这些属性是私有属性，我们可以用 <code>Object.getOwnPropertySymbols()</code> 方法来获取所有的 Symbol 属性名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numKey = <span class="built_in">Symbol</span>(<span class="string">'Number'</span>)</span><br><span class="line"><span class="keyword">var</span> funKey = <span class="built_in">Symbol</span>(<span class="string">'Funtion'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    [numKey]: <span class="number">1</span>,</span><br><span class="line">    [funKey]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">    strKey: <span class="string">'String'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj)</span><br><span class="line"><span class="comment">// [Symbol(Number), Symbol(Funtion)]</span></span><br></pre></td></tr></table></figure><p>或者是使用一个新的 API：<code>Reflect.ownKeys()</code> 来返回所有的键名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numKey = <span class="built_in">Symbol</span>(<span class="string">'Number'</span>)</span><br><span class="line"><span class="keyword">var</span> funKey = <span class="built_in">Symbol</span>(<span class="string">'Funtion'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    [numKey]: <span class="number">1</span>,</span><br><span class="line">    [funKey]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">    strKey: <span class="string">'String'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">// ["strKey", Symbol(Number), Symbol(Funtion)]</span></span><br></pre></td></tr></table></figure><h2 id="Symbol-怎么用"><a href="#Symbol-怎么用" class="headerlink" title="Symbol 怎么用"></a>Symbol 怎么用</h2><p>基本的用法之前已经说了，使用 <code>Symbol()</code> 就可以生成一个独一无二的 symbol。</p><h3 id="Symbol-参数"><a href="#Symbol-参数" class="headerlink" title="Symbol() 参数"></a>Symbol() 参数</h3><p><code>Symbol()</code> 可以传入一个字符串作为参数，表示对 Symbol 实例的描述。主要作用是为了调试和字符串打印输出的时候方便分辨：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'student'</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'teacher'</span>)</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(student)</span></span><br><span class="line">s2 <span class="comment">// Symbol(teacher)</span></span><br><span class="line"></span><br><span class="line">s1.toString() <span class="comment">// "Symbol(student)"</span></span><br><span class="line">s2.toString() <span class="comment">// "Symbol(teacher)"</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h3><p>上面提到在生成 Symbol 实例的时候可以添加一个字符串参数作为其描述，如果需要读取这个值就可以用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = <span class="built_in">Symbol</span>(<span class="string">'student'</span>)</span><br><span class="line"></span><br><span class="line">student.description <span class="comment">// "student"</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for()"></a>Symbol.for()</h3><p><code>Symbol.for()</code> 可以通过传入一个字符串来全局寻找我们已经定义过的 Symbol 实例，如果没有找到则返回一个新的 Symbol 实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Symbol.for()</code> 和 <code>Symbol()</code> 虽然都会返回一个 Symbol 类型，但是不同的是，如果分别多次调用这两个方法，前者只在第一次返回一个新的 Symbol 实例，之后如果参数不改变的话，不管调用多少次都是会返回第一次返回的 Symbol 实例。而后者，每次调用都会生成一个全新的 Symbol 实例，调用多少次就生成多少个，不论参数是否改变。</p><h3 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor()"></a>Symbol.keyFor()</h3><p><code>Symbol.keyFor()</code> 可以通过传入一个 Symbol 实例来获取它的 <code>key</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>)</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>Symbol.keyFor()</code> 只对通过 <code>Symbol.for()</code> 生成的 Symbol 实例有效。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener">Symbol - JavaScript | MDN</a></p><p><a href="https://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/symbol</a></p><p><a href="https://zhuanlan.zhihu.com/p/22652486" target="_blank" rel="noopener">「每日一题」JS 中的 Symbol 是什么？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天偶然发现了 Symbol，学习了一番，这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.aemon.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.aemon.top/tags/JavaScript/"/>
    
      <category term="ECMAScript 6" scheme="http://www.aemon.top/tags/ECMAScript-6/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式（Abstract Factory Pattern）</title>
    <link href="http://www.aemon.top/2020/04/18/Abstract-Factory-Pattern/"/>
    <id>http://www.aemon.top/2020/04/18/Abstract-Factory-Pattern/</id>
    <published>2020-04-18T10:22:47.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>抽象工厂模式的定义是：</p><blockquote><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p></blockquote><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>上一篇中，我们已经能生产不同区域的不同披萨了，但是每家店使用的原料都是不一致的，做为一个好的连锁店，我们需要确保原料的高质量。这里需要注意的是，即使是同一种披萨，在不同的区域使用的原料也是会有区别的，会根据当地人的口味进行调整，那么为了保证以上两点，我们需要建立原料的工厂。</p><p>首先，即使原料略有不同，但是原料的种类就是那么几种：面团（Dough）、酱（Sauce）、起司（Cheese）、蔬菜（Veggies）、意大利辣香肠（Pepperoni）和蛤（Clam）。</p><p>大多数的披萨，都是由上面这些原料组成的，所以我们的原料工厂要保证能生产这些原料：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 披萨原料工厂</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IDough <span class="title">createDough</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISauce <span class="title">createSauce</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICheese <span class="title">createCheese</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IVeggies[] <span class="title">createVeggies</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPepperoni <span class="title">createPepperoni</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IClams <span class="title">createClam</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种原料下面又分成好多种不同地区的原料，以面团为例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.AbstractFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 面团</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDough</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 厚皮面团</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThickCrustDough</span> : <span class="title">IDough</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"厚皮面团"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 薄皮面团</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThinCrustDough</span> : <span class="title">IDough</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"薄皮面团"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他种类的原料也是类似：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.AbstractFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 酱</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISauce</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 意大利西红柿酱</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MarinaraSauce</span> : <span class="title">ISauce</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"意大利西红柿酱"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 梅子番茄酱</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlumTomatoSauce</span> : <span class="title">ISauce</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"梅子西红柿酱"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.AbstractFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 起司</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICheese</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 芝士丝</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MozzarellaCheese</span> : <span class="title">ICheese</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"芝士丝"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 帕尔马干酪</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ParmesanCheese</span> : <span class="title">ICheese</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"帕尔马干酪"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 雷吉亚诺奶酪</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReggianoCheese</span> : <span class="title">ICheese</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"雷吉亚诺奶酪"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.AbstractFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 蔬菜</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 茄子</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Eggplant</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"茄子"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 大蒜</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Garlic</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"大蒜"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 菠菜</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Spinach</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"菠菜"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 洋葱</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Onion</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"洋葱"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 蘑菇</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mushroom</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"蘑菇"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 辣椒</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedPepper</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"辣椒"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 黑橄榄</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BlackOlives</span> : <span class="title">IVeggies</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"黑橄榄"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.AbstractFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 意大利辣香肠</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPepperoni</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SlicedPepperoni</span> : <span class="title">IPepperoni</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> String <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"切意大利辣香肠"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.AbstractFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 蛤</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IClams</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 新鲜的蛤</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FreshClams</span> : <span class="title">IClams</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> String <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"长岛之声的新鲜蛤"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 冷冻的蛤</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FrozenClams</span> : <span class="title">IClams</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> String <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"切萨皮克湾的冷冻蛤"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就可以根据原料工厂来创建不同地区的原料工厂了，以纽约原料工厂为例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 纽约披萨原料工厂</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NYPizzaIngredientFactory</span> : <span class="title">PizzaIngredientFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IDough <span class="title">createDough</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThinCrustDough();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISauce <span class="title">createSauce</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarinaraSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICheese <span class="title">createCheese</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IVeggies[] <span class="title">createVeggies</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IVeggies[] veggies = &#123;</span><br><span class="line">        <span class="keyword">new</span> Garlic(),</span><br><span class="line">        <span class="keyword">new</span> Onion(),</span><br><span class="line">        <span class="keyword">new</span> Mushroom(),</span><br><span class="line">        <span class="keyword">new</span> RedPepper()</span><br><span class="line">    &#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPepperoni <span class="title">createPepperoni</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IClams <span class="title">createClam</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FreshClams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，芝加哥原料工厂如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 芝加哥披萨原料工厂</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChicagoPizzaIngredientFactory</span> : <span class="title">PizzaIngredientFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IDough <span class="title">createDough</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThickCrustDough();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISauce <span class="title">createSauce</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PlumTomatoSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICheese <span class="title">createCheese</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MozzarellaCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IVeggies[] <span class="title">createVeggies</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IVeggies[] veggies = &#123;</span><br><span class="line">            <span class="keyword">new</span> BlackOlives(),</span><br><span class="line">            <span class="keyword">new</span> Spinach(),</span><br><span class="line">            <span class="keyword">new</span> Eggplant()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPepperoni <span class="title">createPepperoni</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IClams <span class="title">createClam</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FrozenClams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，所有的原料已经准备完成，我们需要修改一下披萨，使其只能使用我们原料工厂提供的原料：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IDough dough;</span><br><span class="line">    <span class="keyword">public</span> ISauce sauce;</span><br><span class="line">    <span class="keyword">public</span> IVeggies[] veggies;</span><br><span class="line">    <span class="keyword">public</span> ICheese cheese;</span><br><span class="line">    <span class="keyword">public</span> IPepperoni pepperoni;</span><br><span class="line">    <span class="keyword">public</span> IClams clam;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 准备</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 烘焙</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"350摄氏度烘焙25分钟。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 切</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"将披萨切成对角。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 装盒</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"将披萨放入盒中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> String <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        result.Append(<span class="string">"---- "</span> + name + <span class="string">" ----\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (dough != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Append(dough);</span><br><span class="line">            result.Append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sauce != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Append(sauce);</span><br><span class="line">            result.Append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cheese != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Append(cheese);</span><br><span class="line">            result.Append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (veggies != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; veggies.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Append(veggies[i]);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; veggies.Length - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Append(<span class="string">", "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.Append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clam != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Append(clam);</span><br><span class="line">            result.Append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pepperoni != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Append(pepperoni);</span><br><span class="line">            result.Append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在抽象类 <code>Pizza</code> 中，<code>prepare</code> 方法也被定义为抽象方法，因为这里我们需要根据不同的披萨生成不同的原料。</p><p>接下来，我们就可以制作披萨了：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 芝士披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CheesePizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span>(<span class="params">PizzaIngredientFactory ingredientFactory</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"准备："</span> + name);</span><br><span class="line">        dough = ingredientFactory.createDough();</span><br><span class="line">        sauce = ingredientFactory.createSauce();</span><br><span class="line">        cheese = ingredientFactory.createCheese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在重写的 <code>prepare</code> 方法中，当我们需要什么原料我们只要向原料工厂要就行了。具体是什么原料，由原料工厂来决定，纽约的原料工厂就给纽约风格的原料，芝加哥的原料工厂就给芝加哥风格的原料。</p><p>同样的，蛤蜊披萨也是：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 蛤蜊披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClamPizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span>(<span class="params">PizzaIngredientFactory ingredientFactory</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"准备："</span> + name);</span><br><span class="line">        dough = ingredientFactory.createDough();</span><br><span class="line">        sauce = ingredientFactory.createSauce();</span><br><span class="line">        cheese = ingredientFactory.createCheese();</span><br><span class="line">        clam = ingredientFactory.createClam();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对于 <code>CheesePizza</code>，<code>ClamPizza</code> 多了蛤蜊作为原谅，至于蛤蜊的种类，就由所在地的工厂来决定。如果是靠海的纽约，那就可以拿到新鲜的蛤蜊，如果是内陆的芝加哥，那么就只能使用冷冻的蛤蜊了。</p><p>另外两种披萨：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 素食披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VeggiePizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VeggiePizza</span>(<span class="params">PizzaIngredientFactory ingredientFactory</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"准备："</span> + name);</span><br><span class="line">        dough = ingredientFactory.createDough();</span><br><span class="line">        sauce = ingredientFactory.createSauce();</span><br><span class="line">        cheese = ingredientFactory.createCheese();</span><br><span class="line">        veggies = ingredientFactory.createVeggies();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 意大利辣香肠比萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PepperoniPizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PepperoniPizza</span>(<span class="params">PizzaIngredientFactory ingredientFactory</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"准备："</span> + name);</span><br><span class="line">        dough = ingredientFactory.createDough();</span><br><span class="line">        sauce = ingredientFactory.createSauce();</span><br><span class="line">        cheese = ingredientFactory.createCheese();</span><br><span class="line">        veggies = ingredientFactory.createVeggies();</span><br><span class="line">        pepperoni = ingredientFactory.createPepperoni();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再回到披萨店：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PizzaStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Pizza <span class="title">createPizza</span>(<span class="params">String item</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span>(<span class="params">String type</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Pizza pizza = createPizza(type);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"制作一个"</span> + pizza.getName());</span><br><span class="line"></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建纽约披萨加盟店和芝加哥披萨加盟店：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 纽约披萨店</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NYPizzaStore</span> : <span class="title">PizzaStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Pizza <span class="title">createPizza</span>(<span class="params"><span class="keyword">string</span> item</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Pizza pizza = <span class="literal">null</span>;</span><br><span class="line">        PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> NYPizzaIngredientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item.Equals(<span class="string">"cheese"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"纽约风格芝士披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.Equals(<span class="string">"veggie"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"纽约风格素食披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.Equals(<span class="string">"clam"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"纽约风格蛤蜊披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.Equals(<span class="string">"pepperoni"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"纽约风格意大利辣香肠披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 芝加哥披萨店</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> : <span class="title">PizzaStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Pizza <span class="title">createPizza</span>(<span class="params"><span class="keyword">string</span> item</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Pizza pizza = <span class="literal">null</span>;</span><br><span class="line">        PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> ChicagoPizzaIngredientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item.Equals(<span class="string">"cheese"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"芝加哥风格芝士披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.Equals(<span class="string">"veggie"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"芝加哥风格素食披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.Equals(<span class="string">"clam"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"芝加哥风格蛤蜊披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item.Equals(<span class="string">"pepperoni"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"芝加哥风格意大利辣香肠披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两家披萨店就是抽象工厂的客户，如果想生产纽约风格的披萨，只需要使用纽约披萨原料工厂提供的原料。</p><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><ul><li><p>抽象工厂定义了一个接口，所有的具体工厂都必须实现此接口。</p></li><li><p>在客户的代码中，只需要涉及抽象工厂，当运行时将自动使用实际的具体工厂。</p></li><li><p>当需要创建产品家族和想让制造的相关产品集合起来时，可以使用抽象工厂，而当目前还不知道将来需要实例化哪些具体类时，就可以使用工厂方法。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/AemonCao/DesignPattern/tree/master/DesignPattern/AbstractFactoryPattern" target="_blank" rel="noopener">AbstractFactoryPattern</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后让我们点个披萨吃吧：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PizzaStore nyStore = <span class="keyword">new</span> NYPizzaStore();</span><br><span class="line">Pizza pizza = nyStore.orderPizza(<span class="string">"cheese"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抽象工厂模式的定义是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.aemon.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="C#" scheme="http://www.aemon.top/tags/C/"/>
    
      <category term="设计模式" scheme="http://www.aemon.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="http://www.aemon.top/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Abstract Factory Pattern" scheme="http://www.aemon.top/tags/Abstract-Factory-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Spotify 听没有版权的歌</title>
    <link href="http://www.aemon.top/2020/04/10/%E5%A6%82%E4%BD%95%E5%9C%A8-Spotify-%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E6%AD%8C/"/>
    <id>http://www.aemon.top/2020/04/10/%E5%A6%82%E4%BD%95%E5%9C%A8-Spotify-%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E6%AD%8C/</id>
    <published>2020-04-10T13:57:42.000Z</published>
    <updated>2021-01-07T09:39:02.513Z</updated>
    
    <content type="html"><![CDATA[<p>转到 Spotify 好久了，当初是因为音乐版权的原因到 Spotify 的。用了一段时间免费版的，发现还行，就上了车。</p><a id="more"></a><p>但是渐渐的发现，外国的月亮也没有很圆，还是有些歌是找不到的。不知道是不是所在区域的原因（我是美区）。但是如果是这个原因，我想我也不会因为个别歌曲去频繁换区。</p><p>之前在网易云，如果有些歌曲没有版权，那么可以在音乐云盘中上传那些歌，这样就可以缓存到各个终端去听了。</p><p>曾经有人夸赞过这个功能：「想出音乐云盘的产品经理真是个天才」。</p><p>在 Spotify 中也是有类似的功能的，只是没有很显式的标注出来。</p><h2 id="程序版本"><a href="#程序版本" class="headerlink" title="程序版本"></a>程序版本</h2><h3 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h3><p>1.1.29.592.gf0779179（Windows 10 10.0.18363）</p><h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><p>8.5.52.935（IOS 13.4）</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>没有特别标注的，默认在 PC 端操作。</p><h3 id="添加本地文件夹"><a href="#添加本地文件夹" class="headerlink" title="添加本地文件夹"></a>添加本地文件夹</h3><p>在 Spotify 也是能听本地音乐的，具体方法如下：</p><p>设置（Settings）-本地文件（Local Files）-添加源（ADD A SOURCE）</p><p>然后选择你存放本地音频文件的文件夹。</p><h3 id="播放本地音乐"><a href="#播放本地音乐" class="headerlink" title="播放本地音乐"></a>播放本地音乐</h3><p>在侧边栏你的音乐库（YOUR LIBRARY）选择本地文件（Local Files）；</p><p>这时候你只要右键需要同步的歌曲，选择添加到播放列表（Add to Playlist），然后选择一个播放列表（Playlist）就可以了。之后你就能在各个终端听了。</p><img data-src="/2020/04/10/%E5%A6%82%E4%BD%95%E5%9C%A8-Spotify-%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E6%AD%8C/2020-04-10.png" class="" title="2020-04-10.png"><p>但是，如果这时候你想要给这首歌打上赞（Like），加入到已按赞的歌曲（Liked Songs）却是不行。</p><p>而我一般上下班听歌的时候，都是直接播放已按赞的歌曲（Liked Songs），每过一段时间就备份一次，清空列表重新选歌。</p><p>那么该如何将本地的歌曲加入到已按赞的歌曲（Liked Songs）呢？</p><p>这时你需要播放你这首歌曲。</p><h3 id="打开手机-APP"><a href="#打开手机-APP" class="headerlink" title="打开手机 APP"></a>打开手机 APP</h3><p>因为 Spotify 只允许一个终端播放，所以你的 APP 会跳出这个提示：</p><img data-src="/2020/04/10/%E5%A6%82%E4%BD%95%E5%9C%A8-Spotify-%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E6%AD%8C/APP-PLAY.png" class="" title="APP-PLAY.png"><p>点击继续，然后打开播放页：</p><img data-src="/2020/04/10/%E5%A6%82%E4%BD%95%E5%9C%A8-Spotify-%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E6%AD%8C/PLAY.png" class="" title="PLAY.png"><p>这时你会发现在手机 APP 上是有心形按钮的，你只需要点击一下，虽然点击之后，在当前界面没有显示标记为赞。</p><p>但是，当你去到已按赞的歌曲（Liked Songs），就能看到这首歌了。</p><img data-src="/2020/04/10/%E5%A6%82%E4%BD%95%E5%9C%A8-Spotify-%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E6%AD%8C/Liked-Songs.png" class="" title="Liked-Songs.png"><p>一般我都是将所有的歌曲下载的。</p><p>这时在所有的终端就都可以听这首歌了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>要注意的是，在 Spotify 中，歌曲下载后也是无法离线播放的。在播放前 Spotify 应该会有一个验证的过程，验证通过后才能播放下载的歌曲。</p><p>另外还有一个比较头疼的是，每次你的 Spotify Premium 到期后，所有已经下载的歌曲就被删除，下次再开通 Spotify Premium 需要重新下载，比较费时间。</p><p>所以，尽量在到期前对 Spotify Premium 进行续费，不要使其存在空档期。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转到 Spotify 好久了，当初是因为音乐版权的原因到 Spotify 的。用了一段时间免费版的，发现还行，就上了车。&lt;/p&gt;
    
    </summary>
    
    
      <category term="奇技淫巧" scheme="http://www.aemon.top/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="奇技淫巧" scheme="http://www.aemon.top/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
      <category term="Spotify" scheme="http://www.aemon.top/tags/Spotify/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式（Factory Method Pattern）</title>
    <link href="http://www.aemon.top/2020/03/31/Factory-Method-Pattern/"/>
    <id>http://www.aemon.top/2020/03/31/Factory-Method-Pattern/</id>
    <published>2020-03-31T14:55:39.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>工厂方法模式的目的是：</p><blockquote><p>通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。</p></blockquote><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们还是继续<a href="/2020/03/29/Simple-Factory-Pattern/" title="简单工厂模式（Simple Factory Pattern）">简单工厂模式（Simple Factory Pattern）</a>中的披萨店。</p><p>首先我们需要修改一下 <code>Pizza</code> 类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 披萨抽象类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> dough;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> sauce;</span><br><span class="line">    <span class="keyword">public</span> ArrayList toppings = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 准备 Pizza</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Prepring "</span> + name);</span><br><span class="line">        Console.WriteLine(<span class="string">"Tossing dough..."</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"Adding sauce..."</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"Adding toppings: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; toppings.Count; i++)</span><br><span class="line">            Console.WriteLine(<span class="string">"    "</span> + toppings[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 烘培 Pizza</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Bake for 25 minutes at 350"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 切 Pizza</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Cutting the pizza into diagonal slices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 装箱 Pizza</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Place pizza in official PizzaStore box"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过继承，我们有了几种不同风格和口味的 <code>Pizza</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 纽约芝士披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NYStyleCheesePizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NYStyleCheesePizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        name = <span class="string">"NY Style Sauce and Cheese Pizza"</span>;</span><br><span class="line">        dough = <span class="string">"Thin Crust Dough"</span>;</span><br><span class="line">        sauce = <span class="string">"Marinara Sauce"</span>;</span><br><span class="line"></span><br><span class="line">        toppings.Add(<span class="string">"Grated Reggiano Cheese"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 纽约素食披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NYStyleVeggiePizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NYStyleVeggiePizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        name = <span class="string">"NY Style Sauce and Veggie Pizza"</span>;</span><br><span class="line">        dough = <span class="string">"Thin Crust Dough"</span>;</span><br><span class="line">        sauce = <span class="string">"Marinara Sauce"</span>;</span><br><span class="line"></span><br><span class="line">        toppings.Add(<span class="string">"Grated Reggiano Veggie"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 芝加哥芝士披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChicagoStyleCheesePizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChicagoStyleCheesePizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        name = <span class="string">"Chicago Style Deep Dish Cheese Pizza"</span>;</span><br><span class="line">        dough = <span class="string">"Extra Thick Crust Dough"</span>;</span><br><span class="line">        sauce = <span class="string">"Plum Tomato Sauce"</span>;</span><br><span class="line"></span><br><span class="line">        toppings.Add(<span class="string">"Shredded Mozzarella Cheese"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Cutting the pizza into square slices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 芝加哥素食披萨</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChicagoStyleVeggiePizza</span> : <span class="title">Pizza</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChicagoStyleVeggiePizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        name = <span class="string">"Chicago Style Deep Dish Veggie Pizza"</span>;</span><br><span class="line">        dough = <span class="string">"Extra Thick Crust Dough"</span>;</span><br><span class="line">        sauce = <span class="string">"Plum Tomato Sauce"</span>;</span><br><span class="line"></span><br><span class="line">        toppings.Add(<span class="string">"Shredded Mozzarella Veggie"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Cutting the pizza into square slices"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较之前的写法，新的写法将 <code>Pizza</code> 抽象类中的方法改成了虚方法（<code>virtual</code>）。这样的话，之后继承此抽象类的子类就不需要某些不用改动的方法进行重复的 <code>override</code> 了。就像代码所展示的一样，我们只对 <code>Cut</code> 方法进行了覆写，因为 Chicago Style 的披萨需要切成方形的。</p><p>之后是 <code>PizzaStore</code> 的部分：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PizzaStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Pizza <span class="title">CreatePizza</span>(<span class="params"><span class="keyword">string</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">OrderPizza</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        pizza = CreatePizza(type);</span><br><span class="line"></span><br><span class="line">        pizza.Prepare();</span><br><span class="line">        pizza.Bake();</span><br><span class="line">        pizza.Cut();</span><br><span class="line">        pizza.Box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将 <code>PizzaStore</code> 也写成了一个抽象类，我们把它称作<strong>抽象创造者类</strong>，同时还有一个 <code>CreatePizza</code> 的抽象方法。而这就是<strong>工厂方法</strong>，当然，是抽象的。它返回一个 <code>Pizza</code>，这就是<strong>产品</strong>。</p><p>继承：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NYStylePizzaStore</span> : <span class="title">PizzaStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Pizza <span class="title">CreatePizza</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (type.Equals(<span class="string">"cheese"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NYStyleCheesePizza();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.Equals(<span class="string">"viggie"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NYStyleVeggiePizza();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChicagoStylePizzaStore</span> : <span class="title">PizzaStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Pizza <span class="title">CreatePizza</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (type.Equals(<span class="string">"cheese"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleCheesePizza();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.Equals(<span class="string">"viggie"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleVeggiePizza();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个 <code>PizzaStore</code> 的子类（<strong>具体创造者</strong>）实现了 <code>CreatePizza</code> 抽象方法，这就是真正实现实例化的工厂方法。</p><p>我们把实例化的工作都交给了子类，或者说是交给了子类中的一个方法，这个方法就是一个工厂。</p><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><ul><li>简单工厂和工厂方法之间的差异：简单方法把全部的事情都在一个地方做完了，而工厂方法则是定义了一个框架，通过继承抽象类来创造实际的产品。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/AemonCao/DesignPattern/tree/master/DesignPattern/FactoryMethodPattern" target="_blank" rel="noopener">FactoryMethodPattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工厂方法模式的目的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.aemon.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="C#" scheme="http://www.aemon.top/tags/C/"/>
    
      <category term="设计模式" scheme="http://www.aemon.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂方法模式" scheme="http://www.aemon.top/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Factory Method Pattern" scheme="http://www.aemon.top/tags/Factory-Method-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式（Simple Factory Pattern）</title>
    <link href="http://www.aemon.top/2020/03/29/Simple-Factory-Pattern/"/>
    <id>http://www.aemon.top/2020/03/29/Simple-Factory-Pattern/</id>
    <published>2020-03-29T12:27:46.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>简单工厂模式的目的是：</p><blockquote><p>使用一个类来生产对象。</p></blockquote><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>以订购披萨为例。</p><p>首先我们需要一些披萨：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SimpleFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 披萨抽象类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Pizza</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 准备 Pizza</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Prepare</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 烘培 Pizza</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 切 Pizza</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 装箱 Pizza</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Box</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 芝士披萨</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CheesePizza</span> : <span class="title">Pizza</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"芝士披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"准备芝士披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"烘焙芝士披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"切芝士披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"装箱芝士披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 蛤披萨</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClamPizza</span> : <span class="title">Pizza</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"蛤披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"准备蛤披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"烘焙蛤披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"切蛤披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"装箱蛤披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 意大利辣香肠披萨</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PepperoniPizza</span> : <span class="title">Pizza</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PepperoniPizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"意大利辣香肠披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"准备意大利辣香肠披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"烘焙意大利辣香肠披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"切意大利辣香肠披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"装箱意大利辣香肠披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 素食披萨</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VeggiePizza</span> : <span class="title">Pizza</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VeggiePizza</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"素食披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Prepare</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"准备素食披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"烘焙素食披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Cut</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"切素食披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"装箱素食披萨!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们需要一个工厂（Factory）来生产披萨：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SimpleFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimplePizzaFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Pizza <span class="title">CreatePizza</span>(<span class="params">String type</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Pizza pizza = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (type.Equals(<span class="string">"cheese"</span>))</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type.Equals(<span class="string">"pepperoni"</span>))</span><br><span class="line">                pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type.Equals(<span class="string">"clam"</span>))</span><br><span class="line">                pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (type.Equals(<span class="string">"veggie"</span>))</span><br><span class="line">                pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pizza;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以订购披萨啦：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SimpleFactoryPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PizzaStore</span></span><br><span class="line">    &#123;</span><br><span class="line">        SimplePizzaFactory factory;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span>(<span class="params">SimplePizzaFactory factory</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Pizza <span class="title">OrderPizza</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Pizza pizza;</span><br><span class="line"></span><br><span class="line">            pizza = factory.CreatePizza(type);</span><br><span class="line"></span><br><span class="line">            pizza.Prepare();</span><br><span class="line">            pizza.Bake();</span><br><span class="line">            pizza.Cut();</span><br><span class="line">            pizza.Box();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pizza;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在 <code>PizzaStore</code> 中，我们实例化了一个 <code>SimplePizzaFactory</code>。之后在 <code>OrderPizza</code> 中当我们需要一个 <code>Pizza</code> 的时候，我们是通过工厂的 <code>CreatePizza</code> 方法来创建传入 <code>type</code> 相对应的 <code>Pizza</code>。</p><p>这就是一个最简单的简单工厂模式的实现，我们可以看到，在 <code>PizzaStore</code> 中，并非是通过 <code>new</code> 来获取一个对象，而是将实例化的工作交给了 <code>SimplePizzaFactory</code>，而这就是工厂类的用途。</p><p>这样做有什么好处呢？</p><p>在这个例子里，我们只有一个 <code>PizzaStore</code> 使用了工厂来创建披萨。但是披萨店可不止有一家，当我们做大做强，拥有了更多的连锁店的时候，我们就能体会到 <code>SimplePizzaFactory</code> 的好处了，如果我们需要升级一下披萨的制作工艺，我们不必对每个门店进行改造，而是只对工厂进行升级，这样所有使用 <code>SimplePizzaFactory</code> 的披萨店都可以享受到最新的工艺做出来的披萨啦。</p><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><ul><li>如果将工厂定义为静态方法，这么做的好处是不必再创建对象的方法来实例化对象，但是缺点是无法通过继承来改变创建方法的行为。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/AemonCao/DesignPattern/tree/master/DesignPattern/SimpleFactoryPattern" target="_blank" rel="noopener">SimpleFactoryPattern</a></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>这部分的代码来自《Head First 设计模式》。</p><p>话说好久没吃披萨了，写得我好饿。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单工厂模式的目的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用一个类来生产对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.aemon.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="C#" scheme="http://www.aemon.top/tags/C/"/>
    
      <category term="设计模式" scheme="http://www.aemon.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="简单工厂模式" scheme="http://www.aemon.top/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Simple Factory Pattern" scheme="http://www.aemon.top/tags/Simple-Factory-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>单例模式（Singleton Pattern）</title>
    <link href="http://www.aemon.top/2020/03/29/Singleton-Pattern/"/>
    <id>http://www.aemon.top/2020/03/29/Singleton-Pattern/</id>
    <published>2020-03-29T12:25:58.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式的目的是：</p><blockquote><p>确保类只有一个实例并提供全局访问。</p></blockquote><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先是最简单的单例模式的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SingletonPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 单例</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 记录唯一实例的静态变量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 私有的构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>唯一的 Singleton 实例<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">                uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Singleton</code> 的构造方法被定义成了 <code>private</code>，这代表无法在 <code>Singleton</code> 类的外部实例化 <code>Singleton</code> 类。</p><p><code>getInstance</code> 方法被设置为 <code>static</code>，这样在 <code>Singleton</code> 类外部即使不实例化 <code>Singleton</code> 类也可以通过 <code>Singleton.getInstance()</code> 调用此方法。</p><p>这样，只要在 <code>getInstance</code> 方法中进行简单的判断，就可以实现从始至终只有一个 <code>Singleton</code> 类的实例。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>然而，在多线程时就会出现问题：两个线程在运行时，可能会同时出现 <code>(uniqueInstance == null)</code> 返回为真的情况，这就导致会实例化一个以上的 <code>Singleton</code> 类的情况出现。</p><p>所以，我们需要将其变成同步方法，在 C# 中可以用以下两种方法实现：</p><p>第一是使用 <code>[MethodImpl(MethodImplOptions.Synchronized)]</code> 属性：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SingletonPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 单例</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 记录唯一实例的静态变量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 私有的构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>唯一的 Singleton 实例<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">MethodImpl(MethodImplOptions.Synchronized)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">                uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种是使用 <code>lock</code> ：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SingletonPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 单例</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 记录唯一实例的静态变量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> lock 标识</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> locker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 私有的构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>唯一的 Singleton 实例<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (locker)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两种方法都可以解决在单例模式下多线程的问题，但是如果你在程序中频繁用到 <code>Singleton.getInstance()</code> 将会大大的使性能降低，因为同步一个方法会使程序执行效率下降，所以我们可以在这种情况下使用如下方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPattern.SingletonPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 单例</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 记录唯一实例的静态变量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 私有的构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>唯一的 Singleton 实例<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们在声明 <code>uniqueInstance</code> 的时候直接实例化了 <code>Singleton</code> 类。</p><p>这样在程序开始的时候这个唯一实例就已经存在了。避免了同步方法，也就解决了多线程的问题。</p><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><ul><li><p>在多线程问题的解决上，需要选择适合的方案来实现单例模式，如果单例实例在程序中并不是经常使用，而且实例化的时候开销很大的话，可以使用同步 <code>getInstance</code> 方法来解决多线程问题，如果单例实例需要在程序中频繁使用，那就可以在声明 <code>uniqueInstance</code> 变量的时间就进行实例化，这样就可以解决同步 <code>getInstance</code> 方法时带来的性能下降的问题。</p></li><li><p>如果你有多个构造函数（重载），就需要注意会产生多个实例导致单例失效。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/AemonCao/DesignPattern/tree/master/DesignPattern/SingletonPattern" target="_blank" rel="noopener">SingletonPattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式的目的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确保类只有一个实例并提供全局访问。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.aemon.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="C#" scheme="http://www.aemon.top/tags/C/"/>
    
      <category term="设计模式" scheme="http://www.aemon.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="http://www.aemon.top/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Singleton Pattern" scheme="http://www.aemon.top/tags/Singleton-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://www.aemon.top/2020/03/26/design-pattern/"/>
    <id>http://www.aemon.top/2020/03/26/design-pattern/</id>
    <published>2020-03-26T14:10:27.000Z</published>
    <updated>2021-01-07T09:39:02.097Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，一直没有好好学这部分的内容，所以趁着这次机会把设计模式这块的知识好好学一下。</p><p>我会使用 C# 来写一些实例代码，并且会将代码放在 <a href="https://github.com/AemonCao/DesignPattern" target="_blank" rel="noopener">GitHub</a> 上面，以供参考。</p><a id="more"></a><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><blockquote><p>在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。</p></blockquote><p>先暂时将 wiki 上的说明拿过来用一下，我相信等我学完之后，可以根据自己的理解再来写一下这个问题：「什么是设计模式？」</p><p>本来是想放到一篇文章里的，但是这样篇幅好像太长了。虽说有目录，但是不太方便手机端的用户，所以还是拆分开来吧。</p><p>这里呢，之后会把设计模式的七大原则写一下，然后放个目录就好啦。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/2020/03/29/Singleton-Pattern/" title="单例模式（Singleton Pattern）">单例模式（Singleton Pattern）</a></li><li><a href="/2020/03/29/Simple-Factory-Pattern/" title="简单工厂模式（Simple Factory Pattern）">简单工厂模式（Simple Factory Pattern）</a></li><li><a href="/2020/03/31/Factory-Method-Pattern/" title="工厂方法模式（Factory Method Pattern）">工厂方法模式（Factory Method Pattern）</a></li><li><a href="/2020/04/18/Abstract-Factory-Pattern/" title="抽象工厂模式（Abstract Factory Pattern）">抽象工厂模式（Abstract Factory Pattern）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，一直没有好好学这部分的内容，所以趁着这次机会把设计模式这块的知识好好学一下。&lt;/p&gt;
&lt;p&gt;我会使用 C# 来写一些实例代码，并且会将代码放在 &lt;a href=&quot;https://github.com/AemonCao/DesignPattern&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; 上面，以供参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.aemon.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="C#" scheme="http://www.aemon.top/tags/C/"/>
    
      <category term="设计模式" scheme="http://www.aemon.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>将hexo博客部署到Github Pages</title>
    <link href="http://www.aemon.top/2020/03/16/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github-Pages/"/>
    <id>http://www.aemon.top/2020/03/16/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github-Pages/</id>
    <published>2020-03-16T13:50:55.000Z</published>
    <updated>2021-01-07T09:39:02.529Z</updated>
    
    <content type="html"><![CDATA[<p>本来博客是部署在自己的服务器上的，但是华为云的备案实在是太慢了，所以想着先部署到 <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> 上，这样至少不用每天顶着个服务器地址来访问了。</p><a id="more"></a><p>昨天（2020-3-17）下午备案终于通过了。但是这个 Github Pages 的部署过程还是要写一下的，毕竟学到了很多东西，我准备分两块来写，一部分是使用 hexo 搭建博客，一部分是当前你看到的这篇，如何将 hexo 博客部署到 Github Pages。</p><h2 id="什么是-GitHub-Pages"><a href="#什么是-GitHub-Pages" class="headerlink" title="什么是 GitHub Pages"></a>什么是 GitHub Pages</h2><p>往常，当你需要部署一个静态网站时，你需要一台有公网 IP 的服务器或者是虚拟主机，然后在上面通过配置 Nginx、Tomcat 或者 IIS 等网页服务器来部署你的网站。之后再通过域名的 DNS 设置，将你的域名指向到你的服务器地址。这样，当访问这个域名的时候，就能见到你的网站了。</p><p>如果你在中国，你还要经过较长且繁琐的备案程序，最终才能使你的网站可以访问。</p><p>而 GitHub Pages 则帮你省去了很多步骤，你甚至不需要域名，你就可以拥有属于自己的网站。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="首先你需要有一个网站的源文件"><a href="#首先你需要有一个网站的源文件" class="headerlink" title="首先你需要有一个网站的源文件"></a>首先你需要有一个网站的源文件</h3><p>我部署的网站是我的博客，就是你当前在浏览的这个网站，他是由 hexo 来生成的。接下来过程都是基于 hexo 的博客来写的。</p><p>当然，如果你对样式或者内容不满意，你也可以自己修改或者完全自己手搓一份。</p><h3 id="然后你需要一个-GitHub-账号"><a href="#然后你需要一个-GitHub-账号" class="headerlink" title="然后你需要一个 GitHub 账号"></a>然后你需要一个 GitHub 账号</h3><p>你需要在 <a href="https://github.com" target="_blank" rel="noopener">GitHub 官网</a> 注册一个属于你自己的账号。你的用户名（Name），将决定你的 GitHub Pages 域名（ <em>你的GitHub用户名.github.io</em> ）。虽然之后也可以更改，但是更改用户名之后会有很多意想不到的问题出现，所以干嘛不一开始就做到最好，给自己取个好听又好记的名字吧。</p><h3 id="新建-repository"><a href="#新建-repository" class="headerlink" title="新建 repository"></a>新建 repository</h3><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><p>在你的 Hexo 站点文件夹目录下使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>来初始化你的 git 仓库。</p><h4 id="新建远程仓库"><a href="#新建远程仓库" class="headerlink" title="新建远程仓库"></a>新建远程仓库</h4><p>在<a href="https://github.com/new" target="_blank" rel="noopener">这里</a>新建一个 repository，Repository name 就是上面说的 <em>你的GitHub用户名.github.io</em> ，我的就是 <em>AemonCao.github.io</em>。</p><p>点击 <em>Creating repository</em> 即可创建。</p><p>这样，你就得到了一个远程的 git 仓库，记下你的仓库地址：*<a href="https://github.com/AemonCao/AemonCao.git" target="_blank" rel="noopener">https://github.com/AemonCao/AemonCao.git</a>* ，这个地址可以在仓库页面，点击 <em>Clone or download</em> 来进行复制。</p><h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3><p>由于 GitHub 现在不允许将非主分支发布到 GitHub Pages，推送部署的目标只能是 <em>master</em> 分支。而我们上传到 <em>master</em> 分支的并不是最后需要部署的静态文件，所以我们需要新建一个名为 <em>source</em> 的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b source</span><br></pre></td></tr></table></figure><p>它是下面两条命令的简写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch source</span><br><span class="line">git checkout source</span><br></pre></td></tr></table></figure><p>意思是新建并切换到一个名为 <em>source</em> 的分支。</p><p>文件夹中不应该包含 <em>node_modules</em> 、 <em>public</em> 等文件夹以及文件，所以你需要将这些文件/文件夹写进你的 <em>.gitignore</em> 。</p><p>具体 <em>.gitignore</em> 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><p>然后进行第一次 commit：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m 'first commit'</span><br></pre></td></tr></table></figure><p>现在你的 <em>source</em> 分支就是用来存储你的 Hexo 站点源文件。</p><h3 id="推送-Hexo-站点文件夹"><a href="#推送-Hexo-站点文件夹" class="headerlink" title="推送 Hexo 站点文件夹"></a>推送 Hexo 站点文件夹</h3><p>添加远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/AemonCao/AemonCao.git</span><br></pre></td></tr></table></figure><p>之后将本地仓库推送的 GitHub 上你刚刚建立的远程仓库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin source</span><br></pre></td></tr></table></figure><h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h3><h4 id="添加-Travis-CI"><a href="#添加-Travis-CI" class="headerlink" title="添加 Travis CI"></a>添加 Travis CI</h4><p>在<a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">这里</a>，将 Travis CI 添加到你的 GitHub 中去。</p><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>在 GitHub 中<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只需要勾选 <em>repo</em> 即可。</p><p>生成并复制 Token。</p><h4 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h4><p>然后在<a href="https://github.com/settings/installations" target="_blank" rel="noopener">这里</a>，配置你的 Travis CI 权限，使其能访问的你仓库。</p><p>之后你会被重定向到 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>，然后使用你的 GitHub 账号来进行登录。</p><p>前往的你在 Travis CI 的仓库，进入 Settings 页面，在 Environment Variables 栏目下新建一个新的环境变量，Name 为 <code>GH_TOKEN</code>，Value 为你刚才在 GitHub 中生成并复制的 Token。生成后保存。</p><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>在你的 Hexo 站点文件夹中新建一个名为 <em>.travis.yml</em> 的文件，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span> <span class="comment"># build hexo branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">all_branches:</span> <span class="literal">true</span> <span class="comment"># solve a permission problem</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>这个文件是 Travis CI 的配置文件，目的是告诉 Travis CI 以何种方式编译 <em>source</em>  分支中的源文件，并生成到 <em>master</em> 分支中去。</p><p>推送 <em>.travis.yml</em> 到你的远程仓库。Travis CI 就会自动运行，稍等片刻后，博客的静态文件就会出现在你的远程仓库的 <em>master</em> 分支中去了。与此同时，你就可以在 <em>你的GitHub用户名.github.io</em> 看到你的博客啦！</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有些需要注意的点。</p><h3 id="子项目"><a href="#子项目" class="headerlink" title="子项目"></a>子项目</h3><p>通常如果使用 Hexo 的话，我不会使用自带的 theme。以当前使用的 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a> 主题为例，官方的使用方法是通过 clone 源项目来使用。而由于 Hexo 的具有强大的可配置性（它拥有 1000 多行配置文件），我建议是将原项目 Fork 到自己的仓库中，再进行 clone，然后使用 <a href="/2020/03/11/Linux学习记录/#Submodules">Submodules</a> 的方法将其加入到 Hexo 的站点项目中。</p><h3 id="编译速度"><a href="#编译速度" class="headerlink" title="编译速度"></a>编译速度</h3><p>虽然 Travis CI 很方便，但是他的编译速度却很慢。通常从 push 到远程仓库到完成需要 1 分钟左右的时间。所以我建议首先在确定编译生成的文件无误后，再进行 push。这样可以节省大量的时间。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://hexo.io/zh-cn/docs/github-pages#Project-page" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a></p></li><li><p><a href="https://help.github.com/en/github/working-with-github-pages/getting-started-with-github-pages" target="_blank" rel="noopener">Getting started with GitHub Pages</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来博客是部署在自己的服务器上的，但是华为云的备案实在是太慢了，所以想着先部署到 &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt; 上，这样至少不用每天顶着个服务器地址来访问了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="http://www.aemon.top/categories/GitHub/"/>
    
    
      <category term="博客" scheme="http://www.aemon.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>在微信中使用 ToDoList</title>
    <link href="http://www.aemon.top/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/"/>
    <id>http://www.aemon.top/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/</id>
    <published>2020-03-13T13:13:31.000Z</published>
    <updated>2021-01-07T09:39:02.509Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://www.v2ex.com/t/650838" target="_blank" rel="noopener">V2EX</a> 看到了这篇帖子，想到了之前自己琢磨出来的方法，所以在这里记录一下，到时候也可以直接将链接贴到回复中去。</p><a id="more"></a><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>效果如下：</p><!-- ![效果.jpg](https://i.loli.net/2020/03/13/pcINsy3t4xwO8ro.jpg) --><img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E6%95%88%E6%9E%9C.jpg" class="" title="效果.jpg"><!-- ![置顶.jpg](https://i.loli.net/2020/03/13/oqslDcLjPWhFyJt.jpg) --><img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E7%BD%AE%E9%A1%B6.jpg" class="" title="置顶.jpg"><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li><p>打开 <code>微信</code>-<code>我</code>-<code>收藏</code>；</p></li><li><p>击右上角的 <code>+</code> 添加一个新的笔记；</p></li><li><p>第一行输入 <code>ToDoList</code>，这是你置顶后所显示的标题；</p></li><li><p>然后下方的几个按钮就可以使用了，一般都是用最后一个的待办列表；</p> <!-- ![待办](https://i.loli.net/2020/03/13/IDoYRdFaKsw1bHq.jpg) --> <img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E5%BE%85%E5%8A%9E.jpg" class="" title="待办.jpg"></li><li><p>写完成后，点击右上角的 <code>···</code>，你可以选择<code>浮窗</code>，也可以选择置顶<code>在聊天中置顶</code>；</p> <!-- ![置顶选项.jpg](https://i.loli.net/2020/03/13/9FCy2oXMiQdrla1.jpg) --> <img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E7%BD%AE%E9%A1%B6%E9%80%89%E9%A1%B9.jpg" class="" title="置顶选项.jpg"></li><li><p>这样就已经完成了，当你需要查看的时候，你只需要点击聊天列表界面顶部的 <code>ToDoList</code>，就能进入这份笔记中查看你的待办事项了。</p></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个方法勉强可以满足最基本的 <code>ToDoList</code> 功能，对于普通人来说，也是只能说是到了勉强够用的程度，毕竟他没有提醒功能。</p><p>我一般是在去超市进行采购的时候，会在这里列一下采购清单，方便核对。</p><p>说起提醒功能，微信可以对聊天双方所发的消息进行提醒，长按一条消息，在 <a href="https://zhuanlan.zhihu.com/p/29026281" target="_blank" rel="noopener">Popover</a> 中选择 <code>提醒</code>（在 IOS 中需要点击 Popover 右侧的 <code>▶</code>，才能在下一页看到 <code>提醒</code> 选项），选择提醒时间后，微信就会在提醒时间为你发送一条提醒。</p><!-- ![提醒](https://i.loli.net/2020/03/13/hrTYKjQmvH3zxb4.jpg) --><img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E6%8F%90%E9%86%92.jpg" class="" title="提醒.jpg"><p>微信真的是很封闭的软件，你甚至不能找到分享到其他 APP 的按钮。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://www.v2ex.com/t/650838&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;V2EX&lt;/a&gt; 看到了这篇帖子，想到了之前自己琢磨出来的方法，所以在这里记录一下，到时候也可以直接将链接贴到回复中去。&lt;/p&gt;
    
    </summary>
    
    
      <category term="奇技淫巧" scheme="http://www.aemon.top/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="微信" scheme="http://www.aemon.top/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="WeChat" scheme="http://www.aemon.top/tags/WeChat/"/>
    
      <category term="奇技淫巧" scheme="http://www.aemon.top/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习记录</title>
    <link href="http://www.aemon.top/2020/03/11/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.aemon.top/2020/03/11/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-11T11:52:38.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇偏向流水账的文章，主要记一下平时使用 Linux 过程中的一些小技巧，或者某些命令的使用方法。</p><p>本文不定期更新，可以点击目录来跳转观看。</p><a id="more"></a><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><blockquote><p>用于将文件已行为单位的反序输出，即第一行最后显示，最后一行先显示。</p></blockquote><p>今天在写博客的<a href="/about">关于页</a>时，把原本记在微信收藏中的一些「骚话」贴过来了，原本记录的时候是按时间从旧到新，如果有新的，就往底部添加。</p><p>但是觉得这样不太好，我希望比较新的「骚话」可以放在前面。</p><p>第一时间是想用 <em>python</em> 或者 <em>JavaScript</em> 写个小脚本跑一下，但是有点懒，就去网上找了一下资料，被我找到了<a href="https://www.itranslater.com/qa/details/2106725530790790144" target="_blank" rel="noopener">这个</a>，排在第一的就是 <a href="https://man.linuxde.net/tac" target="_blank" rel="noopener">tac</a> 命令。</p><p>tac 其实就是 cat 的 reverse，包含于 <a href="https://zh.wikipedia.org/zh-hans/GNU%E6%A0%B8%E5%BF%83%E5%B7%A5%E5%85%B7%E7%BB%84" target="_blank" rel="noopener">coreutils</a>。</p><p>用法和 cat 类似，预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tac abc.txt</span><br></pre></td></tr></table></figure><p>输出到文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tac abc.txt &gt; cba.txt</span><br></pre></td></tr></table></figure><p>目前想到的用法可能是用在日志文件上，可以将日志文件 reverse，方便查看最新的日志。</p><h3 id="w"><a href="#w" class="headerlink" title="w"></a>w</h3><blockquote><p>用于显示目前登入系统的用户信息。</p></blockquote><p>这个命令也不算是新学的，但是对输出的信息还只是一知半解，所以今天去查了一下，这边记录一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 22:33:11 up 4 days,  9:44,  1 user,  load average: 0.05, 0.03, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts&#x2F;1    192.168.1.88     22:22    7.00s  0.03s  0.00s w</span><br></pre></td></tr></table></figure><p>第一行显示以下信息：当前时间（<code>22:33:11</code>），系统运行时间（<code>up 4 days,  9:44</code>），当前一共有多少用户登录（<code>1 user</code>），以及过去 1 分钟，5 分钟，15 分钟的系统平均负载（<code>load average: 0.05, 0.03, 0.05</code>）。</p><p>第二行开始是一张表，标头依次为登录名（<code>USER</code>），登录后系统分配的终端号（<code>TTY</code>），远程主机名（<code>FROM</code>），何时登录（<code>LOGIN@</code>），空闲时间（<code>IDLE</code>），与该 TTY 终端连接的所由进程占用的时间，不包括过去的后台作业时间（<code>JCPU</code>），当前进程所占用的时间（<code>PCPU</code>），当前进程（<code>WHAT</code>）。</p><p>参考：</p><ul><li><pre><code class="shell">man w<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* [w command in Linux with Examples](https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;w-command-in-linux-with-examples&#x2F;)</span><br><span class="line"></span><br><span class="line">* [图解Linux命令之--w命令](https:&#x2F;&#x2F;blog.csdn.net&#x2F;Jerry_1126&#x2F;article&#x2F;details&#x2F;52088987)</span><br><span class="line"></span><br><span class="line">* [Linux的JCPU与PCPU](https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzxian&#x2F;article&#x2F;details&#x2F;8070144)</span><br><span class="line"></span><br><span class="line">### grep</span><br><span class="line"></span><br><span class="line">&gt; 在给定的文件中搜寻指定的字符串。</span><br><span class="line"></span><br><span class="line">这是一个很实用的命令，它可以在使文件搜索更上一层楼，往常的文件搜索关键字只能到文件名。而 &#96;grep&#96; 则可以~~深入~~到文件内部。</span><br><span class="line"></span><br><span class="line">用法是：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">grep &#39;The quick brown fox jumps over a lazy dog.&#39; a.txt</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>意思就是在 <em>a.txt</em> 文件中搜索 <code>The quick brown fox jumps over a lazy dog.</code> 字符串。</p><p>它有几个常用的参数：</p><ul><li><p>-i</p><p>忽略字符串大小写。</p></li><li><p>-r</p><p>在当前文件夹下递归查询。</p></li><li><p>-n</p><p>搜索结果显示行号。</p></li></ul><p>参考：</p><ul><li><pre><code class="shell">man grep<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* [grep命令-文件过滤分割与合并](https:&#x2F;&#x2F;man.linuxde.net&#x2F;grep)</span><br><span class="line"></span><br><span class="line">* [grep查找字符串所在文件和行号，find查找文件所在目录即路径](https:&#x2F;&#x2F;blog.csdn.net&#x2F;devwang_com&#x2F;article&#x2F;details&#x2F;52587884)</span><br><span class="line"></span><br><span class="line">* [27个常用的 Linux 命令](https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;0056d671ea6d)</span><br><span class="line"></span><br><span class="line">## Vim</span><br><span class="line"></span><br><span class="line">这里写一下 Vim 的学习历程，之前都是用 nano，但是不是所有的系统都预装的 nano。而且最近在使用 Vim 的时候，发现并没用想象中那么难用。更加下定了要学好 Vim 的决心。</span><br><span class="line"></span><br><span class="line">### 退出 Vim</span><br><span class="line"></span><br><span class="line">在学习 Vim 前，首先要先学会如何退出 Vim，毕竟很多人直到老死也没有退出 Vim。</span><br><span class="line"></span><br><span class="line">&gt; How to exit the Vim editor?</span><br><span class="line"></span><br><span class="line">这个问题在 [Stack Overflow](https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11828270&#x2F;how-do-i-exit-the-vim-editor) 得到了 200多万次的查看（截至 2020-3-12 13:55:28）。</span><br><span class="line"></span><br><span class="line">其实排名第一的答案已经讲得很清楚了，这边就把答案拿过来放在这里了：</span><br><span class="line"></span><br><span class="line">点击 &lt;kbd&gt;ESC&lt;&#x2F;kbd&gt; 进入「正常模式」，然后输入 &lt;kbd&gt;:&lt;&#x2F;kbd&gt;，进入「命令模式」。此时屏幕的下方会出现一个冒号，你可以输入以下命令，并按 &lt;kbd&gt;ENTER&lt;&#x2F;kbd&gt; 执行：</span><br><span class="line"></span><br><span class="line">* &#96;:q&#96;：退出（&#96;:quit&#96; 的缩写）；</span><br><span class="line">* &#96;:q!&#96;：退出且不保存（&#96;:quit!&#96; 的缩写）；</span><br><span class="line">* &#96;:wq&#96;：保存并退出；</span><br><span class="line">* &#96;:wq!&#96;：保存并退出即使文件没有写入权限（强制保存退出）；</span><br><span class="line">* &#96;:x&#96;：保存并退出（类似 &#96;:wq&#96;，但是只有在有更改的情况下才保存）；</span><br><span class="line">* &#96;:exit&#96;：保存并退出（和 &#96;:x&#96; 相同）；</span><br><span class="line">* &#96;:qa&#96;：退出所有（&#96;:quitall&#96; 的缩写）；</span><br><span class="line">* &#96;:cq&#96;：退出且不保存（即便有错误）。</span><br><span class="line"></span><br><span class="line">你也可以直接在「正常模式」下输入 &#96;ZZ&#96; 来保存并退出 Vim（和 &#96;:x&#96; 相同），或者 &#96;ZQ&#96; 不保存并退出（和 &#96;:q!&#96; 相同），注意此处 &#96;ZZ&#96; 大写和小写是完全不同的。</span><br><span class="line"></span><br><span class="line">### 查找</span><br><span class="line"></span><br><span class="line">在命令模式按下 &lt;kbd&gt;&#x2F;&lt;&#x2F;kbd&gt;，之后跟上你需要搜索的字符串然后回车就可以进行搜索，如果要查找下一个只需要按下 &lt;kbd&gt;n&lt;&#x2F;kbd&gt;，上一个的话则是 &lt;kbd&gt;N&lt;&#x2F;kbd&gt;。</span><br><span class="line"></span><br><span class="line">### 上下移动一行代码</span><br><span class="line"></span><br><span class="line">在 Visual Studio Code 中，上下移动代码比较简单，只要使用 &lt;kbd&gt;alt&lt;&#x2F;kbd&gt; + &lt;kbd&gt;↑&lt;&#x2F;kbd&gt; 或者 &lt;kbd&gt;alt&lt;&#x2F;kbd&gt; + &lt;kbd&gt;↓&lt;&#x2F;kbd&gt; 就可以移动了。</span><br><span class="line"></span><br><span class="line">而在 vim 中，首先你需要将光标移动到你想要操作的行，按下两次 &lt;kbd&gt;d&lt;&#x2F;kbd&gt;（剪切当前行），然后移动你的光标到你想要的位置，按下 &lt;kbd&gt;p&lt;&#x2F;kbd&gt;（在光标之后粘贴） 或 &lt;kbd&gt;P&lt;&#x2F;kbd&gt;（在光标之前粘贴），即可将一行代码移动过来了。</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line"></span><br><span class="line">* [请问vim如何移动当前行向上或向下？不用选中](https:&#x2F;&#x2F;www.v2ex.com&#x2F;t&#x2F;49043)</span><br><span class="line"></span><br><span class="line">* [最全的vim快捷键](https:&#x2F;&#x2F;blog.csdn.net&#x2F;donahue_ldz&#x2F;article&#x2F;details&#x2F;17139361)</span><br><span class="line"></span><br><span class="line">### Vim 配置</span><br><span class="line"></span><br><span class="line">Vim 不仅功能强大，而且它的可配置性也非常强，所以如果想要更好的使用这个工具，适合自己的配置是必不可少的。</span><br><span class="line"></span><br><span class="line">这边就把我目前的配置放在下面，大家可以进行参考（其实大多数都是从[阮老师](https:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2018&#x2F;09&#x2F;vimrc.html)这里抄来哒）：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;vim</span><br><span class="line">&quot; 显示行号</span><br><span class="line">set number</span><br><span class="line"></span><br><span class="line">&quot; 显示相对行号</span><br><span class="line">set relativenumber</span><br><span class="line"></span><br><span class="line">&quot; 当前行高亮</span><br><span class="line">set cursorline</span><br><span class="line"></span><br><span class="line">&quot; 不与 Vi 兼容（采用 Vim 自己的操作命令）。</span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">&quot; 语法高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot; 显示当前是什么模式</span><br><span class="line">set showmode</span><br><span class="line"></span><br><span class="line">&quot; 使用utf-8编码</span><br><span class="line">set encoding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">&quot; 使用 256 色</span><br><span class="line">set t_Co&#x3D;256</span><br><span class="line"></span><br><span class="line">&quot; 垂直滚动时，光标距离底部的位置</span><br><span class="line">set scrolloff&#x3D;5</span><br><span class="line"></span><br><span class="line">&quot; 是否显示状态栏。0 表示不显示，1 表示只在多窗口时显示，2 表示显示。</span><br><span class="line">set laststatus&#x3D;2</span><br><span class="line"></span><br><span class="line">&quot; 在状态栏显示光标的当前位置（位于哪一行哪一列）。</span><br><span class="line">set  ruler</span><br><span class="line"></span><br><span class="line">&quot; 光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号。</span><br><span class="line">set showmatch</span><br><span class="line"></span><br><span class="line">&quot; 打开英语单词的拼写检查。</span><br><span class="line">&quot; set spell spelllang&#x3D;en_us</span><br><span class="line"></span><br><span class="line">&quot; 保留撤销历史。</span><br><span class="line">set undofile</span><br><span class="line"></span><br><span class="line">&quot; 出错时不要发出声音</span><br><span class="line">set noerrorbells</span><br><span class="line"></span><br><span class="line">&quot; 出错时，发出视觉提示</span><br><span class="line">set visualbell</span><br><span class="line"></span><br><span class="line">&quot; Vim 需要记住多少次历史操作。</span><br><span class="line">set history&#x3D;1000</span><br><span class="line"></span><br><span class="line">&quot; 打开文件监视。如果在编辑过程中文件发生外部改变（比如被别的编辑器编辑了），就会发出提示。</span><br><span class="line">set autoread</span><br><span class="line"></span><br><span class="line">&quot; 如果行尾有多余的空格（包括 Tab 键），该配置将让这些空格显示成可见的小方块。</span><br><span class="line">set listchars&#x3D;tab:»■,trail:■</span><br><span class="line">set list</span><br><span class="line"></span><br><span class="line">&quot; 命令模式下，底部操作指令按下 Tab 键自动补全。第一次按下 Tab，会显示所有匹配的操作指令的清单；第二次按下 Tab，会依次选择各个指令。</span><br><span class="line">set wildmenu</span><br><span class="line">set wildmode&#x3D;longest:list,full</span><br><span class="line"></span><br><span class="line">&quot; 一直显示标签页</span><br><span class="line">set showtabline&#x3D;2</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>我将自己常用的几款软件的配置都放到了 <a href="https://github.com/AemonCao/mySettings" target="_blank" rel="noopener">GitHub</a> 上，如果有需要可以看看。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="保存-GitHub-的用户名和密码"><a href="#保存-GitHub-的用户名和密码" class="headerlink" title="保存 GitHub 的用户名和密码"></a>保存 GitHub 的用户名和密码</h3><p>通过 ssh 远程服务器进行开发后，如果需要 <code>git push</code> 到 GitHub 的话，每次都需要重新输入用户名和密码，比较繁琐。</p><p>可以使用以下命令来设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>使用 <code>cache</code> 选项的话，会将用户名密码保存在内存中，平且在15分钟后从内存中消失，使用 <code>store</code> 选项的话，则会将用户名密码保存在磁盘中，永远都不会消失，除非你更改了 GitHub 的密码，否则是永远都不用输入密码的。但是密码会以明文的方式存储在当前用户的根目录下的 <em>.git-credentials</em> 文件中，比较不安全。</p><p>如果你是 Mac 系统，则可以使用第三个选项 <code>osxkeychain</code>，可以将凭证存储都<a href="https://support.apple.com/zh-cn/HT204085" target="_blank" rel="noopener">钥匙串</a>中。这样你的凭证虽然还是存储在磁盘中，但是它是被加密的，并且也是可以永久使用。</p><p>参考：</p><ul><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8" target="_blank" rel="noopener">Git 工具 - 凭证存储</a></li></ul><h3 id="Submodules"><a href="#Submodules" class="headerlink" title="Submodules"></a>Submodules</h3><p>在搭建 hexo 博客的时候，当使用了 next 的 themes 时，修改配置后，发现 commit 总是报错。总觉得哪里不对劲，在 GitHub 上查看项目的时候，next 文件夹只有一个名称，无法点击进入。</p><p>如果一个项目中包含了另一个项目，我们就要使用 Git 的 Submodules 来进行管理。</p><p>首先要在当前主项目上使用 <code>git submodule</code> 命令来添加一个子项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/AemonCao/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>默认情况下，子项目会放在一个与仓库名同名的目录中，如果想放到其他地方，可以在命令最后添加一个路径。</p><p>这时候，主项目的目录下会有一个新的 <em>.gitmodules</em> 的文件。</p><p>这是用来保存项子项目的 URL 以及已经拉取的本地目录之间的映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes&#x2F;next&quot;]</span><br><span class="line">        path &#x3D; themes&#x2F;next</span><br><span class="line">        url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;AemonCao&#x2F;hexo-theme-next.git</span><br></pre></td></tr></table></figure><p>当前只有一条记录，如果添加了多个子项目，则会有多条记录。</p><p>之后在 Visual Studio Code 的「源代码管理页面」的「源代码管理提供程序」中就会出现两个项目，一个是主项目，一个就是刚刚添加的子项目。</p><img data-src="/2020/03/11/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%8F%90%E4%BE%9B%E7%A8%8B%E5%BA%8F.png" class="" title="源代码管理提供程序"><p>现在你就可以更好得管理这两个项目了。</p><p>此时在 GitHub 上，你的主项目中相应的<a href="https://github.com/AemonCao/AemonCao.github.io/tree/source/themes" target="_blank" rel="noopener">子项目文件夹</a>也会有一个指向原仓库的某一次提交的一个链接。</p><p>参考：</p><ul><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git 工具 - 子模块</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇偏向流水账的文章，主要记一下平时使用 Linux 过程中的一些小技巧，或者某些命令的使用方法。&lt;/p&gt;
&lt;p&gt;本文不定期更新，可以点击目录来跳转观看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.aemon.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.aemon.top/tags/Linux/"/>
    
      <category term="Vim" scheme="http://www.aemon.top/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>在 Visual Studio Code 中远程开发</title>
    <link href="http://www.aemon.top/2020/03/08/Remote-development-in-Visual-Studio-Code/"/>
    <id>http://www.aemon.top/2020/03/08/Remote-development-in-Visual-Studio-Code/</id>
    <published>2020-03-08T08:26:56.000Z</published>
    <updated>2021-01-07T09:39:02.093Z</updated>
    
    <content type="html"><![CDATA[<p>由于近期的疫情影响，导致复工时候只能在家办公，所以捣鼓了一下远程办公，特此记录一下。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol start="0"><li><p>一台可以通过 ssh 来进行连接的服务器（云服务器或者公司的服务器）；</p></li><li><p>一台用于可以连接 <code>0</code> 中的服务器的 PC。</p></li></ol><h2 id="安装-Visual-Studio-Code"><a href="#安装-Visual-Studio-Code" class="headerlink" title="安装 Visual Studio Code"></a>安装 Visual Studio Code</h2><p>点击这里下载「<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>」，然后安装。</p><h2 id="安装远程插件"><a href="#安装远程插件" class="headerlink" title="安装远程插件"></a>安装远程插件</h2><p>新安装的 Visual Studio Code 并不能直接进行远程工作，需要下载相应的插件。</p><ol start="0"><li><p>在左侧边栏点击 Extensions（或者使用快捷键 Ctrl+Shift+X）调出插件管理页面；</p></li><li><p>在顶部搜索栏搜索「Remote」,在搜索结果中选择 「Remote - SSH」 进行安装；</p><p> 在安装的时候会自动为你安装 「Remote - SSH: Editing Configuration Files」。</p></li><li><p>安装完成后，你的左侧边栏就会多出一个「远程资源管理器（Remote Explorer）」的图标，如下图所示：</p> <!-- ![Remote Explorer](https://i.loli.net/2020/03/08/YXuTfDQxovHUkNm.png) --> <img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/RemoteExplorer.png" class="" title="RemoteExplorer"></li></ol><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="进行连接"><a href="#进行连接" class="headerlink" title="进行连接"></a>进行连接</h3><p>点击远程资源管理器图标，在 SSH TARGETS 栏中点击加号，来新建一个 ssh 连接：</p><!-- ![SSH TARGETS](https://i.loli.net/2020/03/08/mlqFf1N9nuxRaEp.png) --><img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/SSHTARGETS.png" class="" title="SSHTARGETS"><p>输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p><code>user</code> 是用来登录的用户名，<code>host</code> 则是你需要远程的服务器的地址。</p><p>ssh 的默认端口是 22，如果你修改过该端口，则需要使用 p 参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 9588 user@host</span><br></pre></td></tr></table></figure><p>9588 则是新的 ssh 端口。</p><p>回车，然后选择一个配置文件进行保存。</p><p>这时候在左侧 SSH TARGETS 下将会出现以你的 host 为名称的项目，右键选择在连接当前窗口或者在新窗口，进行连接。</p><!-- ![password.png](https://i.loli.net/2020/03/08/jXhLQ2UgY5Gwl3f.png) --><img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/password.png" class="" title="password"><p>输入当前用户名所对应的密码。</p><p>这时你的窗口左下角将会将会显示正在连接：</p><!-- ![Opening](https://i.loli.net/2020/03/08/Fa6xRzThrIsEYUN.png) --><img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/Opening.png" class="" title="Opening"><p>等待一段时间后。如果变成以下样式，则为连接成功：</p><!-- ![success.png](https://i.loli.net/2020/03/08/v6jDnFKbcJPWLRl.png) --><img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/success.png" class="" title="success"><h3 id="选择文件夹"><a href="#选择文件夹" class="headerlink" title="选择文件夹"></a>选择文件夹</h3><p>连接成功后，你要选择需要进行工作的文件夹，基本上是一个项目的根目录。</p><ol start="0"><li><p>点击左侧边栏的 Expoler（或者使用快捷键 Ctrl+Shift+E）打开资源管理器：</p> <!-- ![expoler.png](https://i.loli.net/2020/03/08/Tltvb9aLrmq67CI.png) --> <img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/expoler.png" class="" title="expoler"></li><li><p>点击 Open Folder 按钮来选择文件夹：</p> <!-- ![open-folder.png](https://i.loli.net/2020/03/08/2JU7CYA5i6T1Fzc.png) --> <img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/open-folder.png" class="" title="open-folder"></li><li><p>点击 OK，这时可能需要你再次输入密码，之后你的资源管理器中就会有选择文件夹下的文件了。</p></li></ol><h3 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h3><p>这时候你已经可以点击任意一个文件来进行预览了，为什么说是预览呢，因为当你尝试编辑并保存时，系统会有如下警告：</p><!-- ![error.png](https://i.loli.net/2020/03/08/BemOgUkIxCsjPrh.png) --><img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/error.png" class="" title="error"><p>提示权限不够。</p><p>最简单的方法是执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /path</span><br></pre></td></tr></table></figure><p>之后再保存的话就可以顺利保存成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于近期的疫情影响，导致复工时候只能在家办公，所以捣鼓了一下远程办公，特此记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Visual Studio Code" scheme="http://www.aemon.top/categories/Visual-Studio-Code/"/>
    
    
      <category term="Visual Studio Code" scheme="http://www.aemon.top/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>《齐玛蓝》——阿拉斯泰尔·雷诺兹</title>
    <link href="http://www.aemon.top/2019/03/22/zima-blue/"/>
    <id>http://www.aemon.top/2019/03/22/zima-blue/</id>
    <published>2019-03-22T07:59:27.000Z</published>
    <updated>2021-01-07T09:39:02.505Z</updated>
    
    <content type="html"><![CDATA[<p>前些天看了 Netflix 出品的 <a href="https://www.netflix.com/title/80174608" target="_blank" rel="noopener"><em>Love, Death &amp; Robots</em></a> ，第十四集讲的就是这个故事，动画很好，小说也写得很好，特地转载一下。 转载自：<a href="http://www.eleefeed.com/f/201939" target="_blank" rel="noopener">http://www.eleefeed.com/f/201939</a></p><a id="more"></a><h2 id="齐玛蓝"><a href="#齐玛蓝" class="headerlink" title="齐玛蓝"></a>齐玛蓝</h2><p>文/【英】阿拉斯泰尔·雷诺兹 译/陈日锋 图/蔡定一</p><hr><p>第一周刚过，人们就开始陆陆续续地离开小岛。游泳池周围的看台渐渐空荡起来。巨型观光飞船启程返回星际空间，那些艺术迷、评论员和批评家都在威尼斯收拾行李。他们心中的失望之情像沼气一样弥漫了整个游泳池。</p><p>我是留在穆尔耶克星球的少数几个人之一。此时，我已经站在看台上看了几个小时，眯着眼斜视水面反射的光芒。那是一种令人胆寒的蓝色光芒。在我的下方，齐玛拖着苍白而疲惫的身躯，从游泳池的一头游到另一头。乍一看，你还真会把他错当成一具漂浮的尸体。当他游泳时，我一直在考虑如何将他的故事讲给其他人听。我努力回忆我在火星工作的那家报社名字，那是我第一次在报社工作。这家报社付给我的工资没有大报社高，但是我隐隐觉得自己喜欢回到曾经工作的地方。我在那家报社工作已经是很久以前的事了。我查询了我的备忘录助手，想查到报社的名字。我大概已经查询了几百次，但是备忘录助手一点反应都没有。过了一会儿，我才想起自己前天已经彻底丢弃了备忘录助手。</p><p>“现在得靠你自己了，凯莉。”我对自己说道，“赶紧习惯吧。”</p><p>游泳池里，齐玛已经游到了另一端，开始折返向我这边游过来……</p><p>两周前的一个中午，我正坐在圣马可广场品尝咖啡，观赏白色的雕像和汉白玉钟塔。</p><p>威尼斯的上空密集地停泊着一艘艘星际飞船。飞船的船舷安装了巨大的全反射发光面板，把飞船的颜色跟天空的真实颜色统一起来。</p><p>这样的景象让我想起了一幅画作，作者是一位前卫画家，专攻空间扭曲透视立体图，比如永无止境的瀑布、相互连结的蜥蜴。我在头脑里回忆出这幅画的大致样子，然后发送给备忘录助手，让它查一查这幅画的名字。可是，它怎么也回忆不起来。</p><p>我喝完了咖啡准备结账。</p><p>我来到这样一个汉白玉砌成的威尼斯，主要是为了目睹齐玛最后一幅作品的揭幕式。多年来我一直对这位艺术家很感兴趣，希望能争取到一次采访他的机会。不巧的是，几千个同行都和我有着相同的想法。其实同行竞争是次要的问题，最主要的问题是，齐玛过去从来不接受采访。</p><p>齐玛通知我们所有记者都到穆尔耶克星球来。大多数人头一次听说这个几乎完全被海水浸泡的世界。穆尔耶克星球唯一出名的地方就是它拥有第171个水城威尼斯的复制城，它是仅有的三个完全用汉白玉建成的复制城之一。齐玛选择穆尔耶克星球来放置他的最后一幅作品，并准备在这里退休养老，永远离开公众的视野。</p><p>咖啡店侍者突然将一张折叠的卡片放在我的桌上。</p><p>怀着沉重的心情，我举起了那张卡片，想看看总共花了多少钱。我以为它是账单，可我仔细一看，却发现这是一张小小的印有烫金斜体字的蓝色卡片。卡片上的蓝色非常精细，而且呈粉末状，很明显这是齐玛自己创造的标志性宝石蓝。这张卡片的收信人是我——凯莉·克莱，上面写着齐玛要和我谈谈揭幕式。卡片上还说如果我感兴趣的话，必须在两个小时之内到里亚托桥报到。</p><p>如果感兴趣？我当然感兴趣。</p><p>卡片上要求，不允许带任何记录工具，甚至包括笔和纸。卡片的末尾还提到，我点的咖啡已经有人买单了。我差点厚着脸皮再点一杯咖啡，不过想想还是算了。</p><p>我到达里亚托桥时，齐玛的机器佣人已经在那儿等候。机器佣人的外表是人形的玻璃罩，玻璃罩里面是复杂的机械构造，不时发出氖光。它向我深深地鞠了一躬，然后温柔地问：“你是克莱小姐吧？既然你来了，我们就赶紧出发吧。”</p><p>机器佣人护送我上了停在水边的舷梯，我的备忘录助手紧紧跟着我，扒在我的肩上。舷梯的另一头连着一架等候多时的气垫运输机。这架运输机悬浮在水面上，离水面将近一米。机器佣人带着我走进后面的包间。我的备忘录助手也想跟着进来，却被机器仆人抬手制止了。</p><p>“恐怕你不能带着它，不允许带记录工具，记得吗？”</p><p>我看着这个带着金属光泽的绿色蜂鸟——我的备忘录机器人，努力回忆我上次离开它的监护是什么时候。</p><p>“把它留下？”</p><p>“它待在这里很安全，等到傍晚你回到这里的时候，还能找到它。”</p><p>“如果我说不呢？”</p><p>“如果你坚持，你恐怕就不能和齐玛先生见面了。”</p><p>这个机器佣人肯定不会在这儿闲逛一下午等我做出回应。一想到要离开备忘录助手，我就浑身发凉，但是我实在太想采访齐玛了。</p><p>我让备忘录机器人待在这里，直到我回来。</p><p>这个小家伙迅速地飞走了，在空中划出一道泛着金属光泽的绿色闪电。看着它的离去，我感觉身体的一部分也跟着离开了。我坐了下来，座位上的玻璃罩把我整个人都罩了进去。我明显感到运输机正在加速前进。</p><p>我们下方的威尼斯变得倾斜，然后迅速地消失在地平线下。</p><p>我发出一个测试命令，询问备忘录机器人我是在哪个星球上庆祝自己的七百岁生日的。没有任何回应：我已经超出了它的监护范围。我只能依靠自身严重超龄的记忆，得不到任何帮助。</p><p>我向前倾了倾身子，询问机器佣人：“你能告诉我这究竟是怎么一回事吗？”</p><p>“不好意思，他没有告诉我。”机器佣人回答，它的头后面出现了一张脸，“但是如果你感觉不舒服，我们会立即把你送回威尼斯。”</p><p>“我现在感觉很好。谁还拿到了蓝色邀请卡？”</p><p>“据我所知，只有你一个。”</p><p>“如果我拒绝了呢？你是不是应该再找一个人？”</p><p>“不，”机器佣人回答，“不要再瞎猜了，让我们一起面对，克莱小姐。你肯定不会拒绝他的。”</p><p>在飞行途中，输送机在海面上激起阵阵波涛，留下了一道泡沫形成的路线。这就像是有人用一把刷子，在涂了颜料但是还没干的汉白玉上划了一道杠，把颜料下面的白底露了出来。我接受了齐玛的邀请，直奔前方的地平线。我心里一直在思考，齐玛的标志性蓝色究竟是接近天空的颜色，还是更接近大海的颜色。对比这两种颜色，我觉得邀请卡上的颜色让我眼前一亮。</p><p>齐玛蓝！这种颜色非常精确，从科学的角度分析，必须要测量它的光谱带宽和强度，才能把它分辨出来。</p><p>如果你是一个画家，你肯定会根据光谱带宽和强度混合出一系列颜色。但是没有人能混合出齐玛蓝，除非他们计算出了齐玛蓝的颜色参数。</p><p>齐玛刚刚进入公众视野的时候，就已经是独一无二的了。他的身体接受了最彻底的改造，即使不穿防护服，也能应付极端严酷的环境。从远处看，齐玛就是一个身材极好的男人，穿着紧身连体衣裤。只有走近看才会意识到，他根本没穿衣服，表面的那一层其实是他的皮肤。</p><p>他的整个身体被一种合成材料覆盖，这种合成材料会根据他的心情和周围的环境变换颜色和纹理。如果在社交场合，他的皮肤就会变成礼服。而且这种皮肤能够抵御巨大的压力，如果他想体验一下真空状态，这层皮肤会控制住他的自身压力，不会发生爆炸；如果他要到巨型气态行星上去游览一番，这层皮肤又能抵御住外部极强的挤压。他的皮肤不但刀枪不入，而且能将全方位的感知准确地传递给大脑。更厉害的是，他根本无需呼吸，因为他的整个心血管循环系统已经被封闭的自循环生命维持系统所取代。他无需吃喝，无需处理体内垃圾。纳米级的微型修复机器人遍布全身，使他能够忍受在几分钟内足以杀死一个普通人的辐射。</p><p>有了这身足以经受任何极端环境考验的无敌盔甲，齐玛能够到他想要去的任何地方吸取灵感，不管那里的环境有多恶劣。他能在星际空间自由翱翔，能钻进恒星的表面探索，或者到完全由灼热岩浆覆盖的行星游荡。他的眼睛被高性能的摄像头所取代，这种摄像头能够获取跨度极大的电磁频谱，远远超过了可见光的范围。这两个摄像头通过非常复杂的处理模块连接到他的大脑中。</p><p>他的大脑中还安装了一个神经突触混合桥接器，他可以把视频数据当成音乐来听，把交响乐当成某种奇妙的色彩来看。他的皮肤还具备天线的功能，能让他感知电场的变化。如果他觉得这样还不够，他可以把一定数量的机器互联起来，变成一个超级云计算系统，然后从中获取数据。</p><p>正因为浑身上下被如此强大的技术武装起来，齐玛的画作极具创造性，深深地吸引了人们的眼球，让所有人欲罢不能。他画风景地貌和星系的作品，品质都超乎想象，令人叹为观止。这些画作充满了光彩夺目的颜色，运用了高超的空间扭曲透视技巧。更让人惊叹的是，他的作品从来不用传统的绘画材料，都是那种面积极大的作品。这种画作很快吸引了一大群严谨的收藏家。齐玛的一小部分作品被他们买下变成私人藏品，而大部分作品都存在于公共星际空间中，横跨几十米。尽管画幅很大，但是所有的细节都清晰到视觉的极限。大部分的作品都是在极短的时间内完成的。齐玛不需要睡觉，他可以不间断地工作，直到整幅画作彻底完成。</p><p>不可否认，这些画作给人们留下了不可磨灭的印象。无论是从构图的角度还是从技法的角度来看，他们都是无可非议的杰作。但是，这些作品总让人感到一丝寒意，有时甚至让人不寒而栗，因为这些画作所画的风景地貌根本没有人见过，完全是从画家自己的视角里描绘出来的。</p><p>除了这一丝寒意，总体来说这些画还是相当棒的，但是我家里从来没有悬挂他的画作。</p><p>很显然，不是每个人都喜欢他的作品，而且齐玛也不可能把自己的画作都卖出去。但我还是忍不住想知道：究竟有多少人只是因为齐玛很有名才买了那些作品？又有多少人是真正懂得那些作品的内在价值而去收藏它们？</p><p>当我第一次注意到齐玛，我就有这样的疑问。我觉得他的画作矫揉造作，对他并不感兴趣:如果他或者他的画作发生了其他事情，我倒觉得值得写篇报道。</p><p>这样的事情居然发生了，但其他人——包括我在内——却是过了一段时间才注意到这件事。</p><p>有一次，齐玛花了比平时更长的时间创作一幅画。当他展示这幅画作的时候，人们发现这幅画作里出现了不同寻常的东西。这是一幅漩涡星云的作品，以一颗无空气的小行星作为观察点。在这颗小行星上某座火山口的边缘，有一个小小的蓝色正方形遮盖住了星云的一部分。乍一看，就像是齐玛先把整个画布用蓝色刷了一遍，然后在上面画星云的时候，故意留下这么一块正方形没有画。这个正方形是空心的，没有任何细节表明它和整个景观或者背景有什么联系。它没有投射阴影，跟周围的颜色之间没有任何渐变。但是，这个正方形肯定是经过深思熟虑才画上去的:因为通过近距离察看可以发现，它确实是用颜料在火山口的上方画出来的。这肯定具有某种深意。</p><p>而这个正方形只是开始。从此之后，齐玛向外界展示的所有画作上，都带有一个类似的几何图形。每幅画作的构图中都嵌入了一个正方形、三角形、椭圆形或者其他什么图形。过了很长一段时间，人们才发现每幅画上的几何图形所涂的蓝色都是完全一样的。</p><p>这就是齐玛蓝，和我收到的那张镶有金字的卡片上的蓝色完全一样。</p><p>又过了几十年，这种抽象的图形逐渐变成了他的主要作品，构图中的其他元素全部融入这种图形中。宇宙远景的尽头变成了一个狭窄的边框，再用几个空白的圆圈、三角形、长方形与之呼应起来。他的早期作品都是以丰富的笔触、浓墨重彩的多层铺垫为典型特征，如今却变成用光滑的镜面打底的蓝色图形。</p><p>很多买家被齐玛这种抽象的蓝色图形吓到了，逐渐远离了他。很快齐玛又推出了他的第一幅完全由单一蓝色构成的画作。这幅作品尺寸巨大，足以覆盖一座千层大楼的侧面。人们普遍认为齐玛已经江郎才尽，再也画不出精美的作品了。</p><p>但是，他们完全错了。</p><p>当我们靠近一个小岛时，我感觉到运输机在减速。</p><p>“你是第一个看到这个小岛的人。”机器佣人说，“岛的上空被一片扭曲的屏幕遮住了，从太空看是根本看不见这座岛的。”</p><p>这座小岛方圆一公里，海拔很低，整个外形有点像乌龟，周围被一片狭窄的白色沙滩环绕。岛的中心附近有一块高地，这块高地上所有的草木都被清理掉了，只留下一块近似矩形的空地。我观察发现这片空地上有一小块区域很平坦，而且反射出蓝光，周围似乎被一排分层布置的看台包围着。</p><p>运输机降低了高度，也减慢了速度，不断地上下起伏，直到慢慢停在那片被看台包围的区域外面。紧挨着停机坪的是一座由白色鹅卵石砌成的低矮小屋。</p><p>机器佣人先走下台阶，然后帮助我下了运输机。</p><p>“齐玛马上就到。”它说完又回到运输机上，运输机载着它迅速消失在天边。</p><p>突然间，我觉得自己很孤独，很脆弱。一阵海风吹过来，把沙子吹进了我的眼睛里。太阳逐渐西沉，直奔地平线而去。天气很快就会变冷。就在我开始有点恐慌的时候，一个男人钻出了小屋，轻快地搓了搓手。他沿着一条铺着石子的小路向我走来。</p><p>“很高兴你能来这里，凯莉。”</p><p>这位当然就是齐玛了。我刚刚还怀疑他不会露面，真是个愚蠢的想法。</p><p>“嗨。”我结结巴巴地说。</p><p>齐玛很有风度地伸出了他的手。我握着他的手，隐约能够感觉到他身上人造皮肤的纹理。今天他的皮肤呈银灰色。</p><p>“我们到阳台上坐坐。目睹夕阳的感觉真好，不是吗？”</p><p>“是的。”我答应道。</p><p>他转过身去，领着我走向小屋。跟着他走的时候，我能清晰地看到在他银灰色的皮肤下面肌肉不断隆起。他背部的皮肤上似乎有鳞片在闪光，估计是什么反射芯片。</p><p>他强壮得像头黑豹，而且身材好得像雕像。他其实长得挺帅，更不用说他能变出那么多花样，然而我从来没听说他跟谁谈过恋爱，甚至连这方面的绯闻都没有。艺术是他生命的全部。</p><p>我跟着他，感觉自己很笨拙。齐玛领着我走进了小屋，映入眼帘的是一间老式厨房和一间老式的休闲室，屋子里摆满了古老的家具和摆设，大概有上千年的历史了。</p><p>“一路飞来感觉怎么样？”</p><p>“很好。”</p><p>他突然停住了，看着我，“我都忘了检查了……我的机器佣人有没有强调不能携带备忘录助手？”</p><p>“有。”</p><p>“很好。我只想跟你这个人谈，凯莉，而不是什么录音设备。”</p><p>“我？”</p><p>他脸上戴的银灰色面具形成了一副滑稽的表情，“你就不能说句长一点儿的话吗？怎么回答都是一个字？”</p><p>“呃……”</p><p>“放松。”他说，“我让你到这儿来，不是要考验你，也不是要对你做其他事。我没有给你设圈套，你在这儿不会有任何危险。你今晚就能回到威尼斯。”</p><p>“我很好。”我说，“就是有点儿激动，就像追星族见到了偶像。”</p><p>“不必如此。我不可能是你见到的第一位社会名流吧？”</p><p>“当然不是了，只是……”</p><p>“人们觉得我很吓人，”他说，“但他们最终还是习惯了，然后想知道我这么小题大做究竟是为什么。”</p><p>“为什么选我？”</p><p>“因为你一直很友好地邀请我接受采访。”齐玛回答。</p><p>“别开玩笑了。”</p><p>“好吧，除了你很友好之外，也有一些其他原因。这些年我一直很喜欢你的报道。很多人都很信任你，特别是那些即将离开人世的人，因为你如实地记录了采访的内容，不带任何虚假的成分。”</p><p>“你找我来是谈退休的事，不是谈临终的事吧？”</p><p>“其实都一样，反正要从公众的视野里消失了。凯莉，我觉得你写的文章都很真实。我从来没发现有人说你写的文章歪曲事实。”</p><p>“我一直都是这样。”我说，“这就是为什么我总是带着备忘录助手的原因，这样就没人否认自己说过的话了。”</p><p>“带不带备忘录助手都不会影响你对我的报道。”齐玛说。</p><p>“肯定有其他原因，要不然你怎么会只选我一个？”</p><p>我警觉地看着他。</p><p>“我只想帮帮你。”他说。</p><p>人们常常谈起齐玛的蓝色时代，是指他创作巨幅画作的时代。说巨幅可不是吹的。他创作的画作尺寸特别大，大得足以覆盖庞大的建筑物和市民广场，甚至从外太空轨道上都能看到。放眼整个银河系，居然还有二十公里高的蓝色画卷。这些画一般建在私人的海岛上，像塔一样直插云霄；有的甚至直接放在暴风雨肆虐的大海上。创作这些画作的经费从来都不是问题，因为齐玛身边有一大堆赞助商，争先恐后地抢夺作品的赞助权。齐玛创作的巨幅画作越来越大，后来居然需要用很复杂的高科技机械设备来固定画作，防止画作因为重力或者天气原因而损坏。这些巨型机械设备穿过了所在行星的大气层，一直延伸到外太空，自身还发出微弱的光。画作被弯曲成一定角度，让那些狂热的艺术爱好者在外太空就能看到，他们会发现整个视野都被蓝色占据。</p><p>齐玛实在是太出名了，就连对艺术毫无兴趣的人都知道他的名字。他是一个创造巨幅蓝色画作的古怪机械人，是从来明说或者暗示自己艺术作品内涵的画家。</p><p>但那已经是几百年前的事了，齐玛越来越能折腾，后来连行星都无法容纳他那笨重的巨型画作。于是，齐玛干脆搬到星际空间里，锻造出方圆几万公里的蓝色画卷。这些画卷可以在太空中自由飘浮。而且他不再用画笔和颜料了，而是雇佣采矿机器人舰队，将小行星炸碎，把碎片作为原料来作画。赞助商的财力已经远远不够了，反而是各个恒星系经济体开始争夺齐玛作品的展览权。</p><p>也就是这个时候，我重新对齐玛有了兴趣。我出席了他的一个“月亮包裹”项目的新闻发布会，该项目计划给整个星球建造外壳，形成一个有盖子的蓝色容器，就像是一颗球放进盒子里。两个月之后，他在行星的整个赤道带释放了大量蓝色气体，当时我也在场。六个月后，他在一颗掠日彗星的表面增加了某种蓝色的化学物质，如此一来，这颗彗星就能拖着齐玛蓝的尾巴跨越整个太阳系。但我不认为自己应该在这些新闻上大做文章。我一次次地邀请他接受采访，但是一次次地被回绝。我所知道的就是齐玛对蓝色的痴迷已经超过了艺术创作本身。但是如果不能彻底理解他的这种痴迷，就不能写出真正有意义的报道，顶多是奇闻轶事。</p><p>而我从来不写奇闻轶事。</p><p>我一直在等待，当然还有几百万个同行也一直在等待。所以一听说齐玛的最后一件作品将在穆尔耶克星球的威尼斯揭幕，我就马不停蹄地赶了过来。我并不奢望能够采访到他，或者对他的作品有什么新的见解。我只是觉得自己必须到场，亲眼见证。</p><p>我们走上楼梯，穿过滑动玻璃门，来到了阳台。阳台上有一张白色的桌子，两侧各放了一把椅子。桌上还放了几瓶酒和一盘水果。在这个没有栏杆的阳台上极目远眺，只能看到一望无垠的大海，与天相接。海面上风平浪静，在夕阳余晖的照耀下，整个海面就像是一枚银币。</p><p>齐玛示意我坐下，他手里拿着两瓶葡萄酒，不停地晃悠。</p><p>“红葡萄酒还是白葡萄酒，凯莉？”</p><p>我张开嘴想要回答，可是什么都说不出来。通常情况下，在别人提问之后、我回答之前的一瞬间，备忘录助手会默默帮我做出选择。没有备忘录助手的提示，我感到自己的思维停顿了。</p><p>“我猜是红葡萄酒，”齐玛说，“除非你强烈反对。”</p><p>“我能自己决定这些事情。”我说。</p><p>“当然。”齐玛给我倒了一杯红酒，然后举起杯子对着天空，看看红酒的品质。</p><p>“我只是觉得有点奇怪。”我补充道。</p><p>“你不应该有这样奇怪的感觉。”他说，“几百年前，我们的生活方式不就是这样的吗？”</p><p>“你的意思是，这其实是一种很自然的方式？”</p><p>“是的。”齐玛给自己倒了一杯红酒，当然他不会喝的，只是闻了闻酒香。</p><p>“可是我已经活了一千年，这本身就不自然啊。”我说，“我的机体记忆在七百年前就已经到了饱和点，我的脑袋就像一个放了太多家具的房子，想搬进去一些东西，就必须先把一些东西搬出来。”</p><p>“我们还是先回到酒的问题上。”齐玛说，“通常情况下，你必须依赖备忘录助手的建议，对不对？”</p><p>“是的。”我耸耸肩。</p><p>“备忘录助手是不是总是选择两种可能性中的一种？比如说总是选红葡萄酒，或者总是选白葡萄酒？”</p><p>“没那么简单。”我说，“如果我对其中一种酒的偏好更强烈，那么备忘录助手肯定会一直向我推荐这种酒。但是我对葡萄酒并没有偏好。有时我喜欢红葡萄酒，有时我又喜欢白葡萄酒。还有的时候，两种酒我都不想要。”我希望自己的挫败感不要那么明显。除了谈谈蓝色卡片、雇佣机器人以及运输机这一系列精心策划的谜语，我最不想谈的就是我自己并不完整的记忆。</p><p>“那么就是随机选择喽？”他问道，“备忘录助手会不会就这么随便选择红葡萄酒或者白葡萄酒呢？”</p><p>“不是，也不是这样的。备忘录助手已经跟了我几百年了。它已经看见我在成千上万种不同的场合，喝了成千上万次葡萄酒。它会根据最高的可靠程度，给出一系列参数，然后计算出什么才是我最好的选择。”</p><p>“然后你会无条件接受它的建议？”</p><p>我啜了一口红酒，“当然。如果只是为了表明自己具有自由意志，而去违背它的建议，这样做是不是有点太孩子气了？不管怎么说，根据它的建议进行选择，更能让我感到满意。”</p><p>“但是这样的话，你的整个人生不就成了一系列可以预见的反馈吗？除非你忽略它的建议。”</p><p>“也许是吧。”我说，“但也没那么糟糕吧？只要我开心，我才不管呢。”</p><p>“我不是有意为难你。”齐玛说。他微笑着把身体靠在椅背上。在质问了我一系列问题之后，他想缓和一下紧张的气氛。“现在拥有备忘录助手的人也不是很多吧？”</p><p>“不清楚。应该不超过整个银河系人口的百分之一吧。”</p><p>齐玛又闻了闻他的葡萄酒，透过玻璃杯看着天空，“外面几乎每一个人都认为，接受备忘录助手是不可避免的趋势。”</p><p>“让机器管理一千年的记忆，有何不可？”我反问道。</p><p>“但是还有另外一种机器，”齐玛说，“神经移植，完全整合进参与者的自我感觉，和生物性记忆融为一体，无法分辨。你不需要询问备忘录助手如何选择酒，你也不需要等待确认的提示。”</p><p>“这两种有何区别？我允许自己的经历被机器记录。这台机器从来没有遗漏任何事情，而且它回复我的查询是如此高效，以至于现在几乎每件事我都要问它。”</p><p>“机器很容易损坏。”</p><p>“它每隔一段时间就会备份数据。而且它总不会比我脑袋里的一大堆神经移植模块更容易损坏吧？对不起冒犯了你，但是‘机器容易损坏’这个反对的理由实在不合理。”</p><p>“你是对的。但是对于备忘录助手，人们有更深层次的争论。它太完美了。它不知道如何失真或者忘却。”</p><p>“它不就应该这样吗？”</p><p>“不对！当你在几百年后用自己的头脑回忆起我和你的这段对话，肯定有一些细节会记错。而这些记错的部分也会成为你记忆中的一部分，记错的每个细节会逐渐强化成回忆。一千年之后，你对这段对话的回忆可能跟真实情况大相径庭。那时你肯定会发誓，你的回忆是准确的。”</p><p>“如果有备忘录助手陪在我身边，我就能事无巨细地把一切完整地记录下来。”</p><p>“没错，”齐玛说，“但那不是活生生的记忆。那只是一个机械记忆的过程。整个记忆里缺乏想象，没有给选择性的遗忘留下任何余地。”他又给我满上一杯酒，“想象一下，像今天下午这样的场合，你因为某个原因坐在外面，你必须决定是选择红葡萄酒还是白葡萄酒，且不能后悔自己的选择。但是就这么一次，不管出于什么原因，你被人说服去选择白葡萄酒——正好违背了备忘录助手的判断——而且喝了之后你还感觉很好。每件事都被奇妙地组合在一起：这段谈话、夕阳西下的氛围、壮丽的风景、微醺的快感。一个完美的下午逐渐变成了完美的傍晚。”</p><p>“这跟我选择什么酒没多少关系吧。”我说。</p><p>“确实没有。”齐玛赞同道，“备忘录助手肯定不会把这样一个令人开心的阴差阳错当成是一种特例。这样一个小小的偏差并不会对它的预测模型产生任何影响。下次，它还是会让你选择红葡萄酒。”</p><p>我突然感到内心一阵刺痛，非常不舒服，“可人类的记忆并不是那样工作的。”</p><p>“没错，人类的记忆会牢记这个例外，并且标记上重要意义。它会放大今天下午记忆中吸引人的部分，抑制住不开心的部分——苍蝇一直在你脸周围嗡嗡叫、你在搭船回家时的焦虑心情。你所记住的是金色光辉照耀下的安宁。下一次，你可以随便选择白葡萄酒还是红葡萄酒。以后都随你选。整个行为模式都会因为这个细小的偏差而改变。当然备忘录助手绝不会容忍那样的事发生。你只有违背它的建议很多次，它才会非常吝啬地更新它的数据模型，然后它才会开始建议你选择白葡萄酒。”</p><p>“没错。”我说。其实我希望齐玛能多谈谈他自己，而不是我，“移植的人工记忆与外部的人工记忆究竟有多少实际的区别？”</p><p>“简直是天壤之别。”齐玛说，“存储在备忘录助手里的记忆会被永久地记住。不管你询问它多少次，它都不会歪曲或者忽略每一个细节。但是移植的人工记忆不一样。他们被无缝地整合进生物记忆，移植了人工记忆的人根本区分不了哪些是人工记忆、哪些是生物记忆。正是因为这个原因，移植的人工记忆具备必要的可塑性、易变性，会产生错误和失真。</p><p>“但是没有易变性就没有艺术，没有艺术就没有事实。”齐玛继续说道。</p><p>“易变性指引事实？这个说法真不错。”我感觉很意外。</p><p>“我所说的事实是指更高层次的、比喻意义上的事实。那个金色的下午？那确实是事实。你所记住的苍蝇不会附加任何物质上的意义。它会被提取出来从记忆中分离。”</p><p>“没有下午就没有苍蝇。”我说。最终我的忍耐度已经到达了极限，很快就要爆发。“我很感激你能邀请我到这儿来，但我不是来听你给我讲如何选择人工记忆的。我觉得总该谈点其他事情吧。”</p><p>“实际上我要跟你谈的内容最终都会归结到这一点上。不仅关系到我，而且关系到你。”他放下玻璃杯，“我们去散散步，好吗？我要带你去看看游泳池。”</p><p>“太阳已经下山了。”我说。</p><p>齐玛笑着说：“太阳总会升起的。”</p><p>他带着我从另外一条路线穿过了屋子，从另一扇门出去。在两堵白色石头砌成的墙之间，一条崎岖的山路慢慢爬上山坡，整条路都沐浴在金色的余晖中。不一会儿，我们就来到了那块平整的高地，就是乘坐运输机过来时看到的高地。这里还真被看台围绕着：三十米高的阶梯状结构，看台后面有楼梯直通各层。齐玛带着我走进看台下方的阴影处，然后穿过一个私人入口，进入了那块封闭的区域。我来时看见的那块蓝色区域，实际上是一个不太大的长方形游泳池，里面的水被排干了。</p><p>齐玛领着我来到游泳池的边缘。</p><p>“一个游泳池。”我说，“你不会开玩笑吧。建这么多看台就是为了这个游泳池？”</p><p>“这就是揭幕式举办的地方。”齐玛说，“我将在这里揭开我的最后一件作品，然后退休。”</p><p>游泳池还没有全部建成。在远处的角落里，一个小型的黄色机器人还在那里砌瓷砖。靠近我们这边的部分已经砌好了，但我还是发现有些地方的瓷砖有破损或者裂痕。夕阳的余晖有些暗淡，我看不清自己是不是在阴影中，但是那些瓷砖的颜色看上去跟齐玛蓝非常接近。</p><p>“跟那些能占据整个星球的画作相比，这里的档次太低了吧？”我问道。</p><p>“对我来说不是这样。”齐玛说，“对我来说，这里是探索结束的地方。这里也是一切开始的地方。”</p><p>“一个寒碜的游泳池？”</p><p>“这不仅仅是一个古老的游泳池。”他说。</p><p>他和我一起绕着小岛散步。太阳即将沉入大海，一切颜色都变得苍白。</p><p>“过去，我的灵感来源于心灵。”齐玛说，“我之所以画出那么大规模的作品，是因为那是主题的需要。”</p><p>“画得非常棒。”我说。</p><p>“那只能算是体力活。巨大、花哨、流行，但根本没有灵魂。就是因为这些画的灵感来源于心灵，所以画得并不好。”</p><p>我什么都没说。其实我一直都觉得他的作品就是这样：壮丽但缺乏人性，而且齐玛身体上的机械化改造必然给他的作品带来某种独特性。就像人们只是因为某件作品是某人用嘴咬着笔画的而赞扬它。齐玛的画之所以被人赞扬，仅仅因为他并不是一个“正常人”。</p><p>“我的作品并不能告诉人们宇宙的某种讯息，因为宇宙本身并不会透露任何讯息。更重要的是，我的作品也不会透露任何关于我的情况。这些画跟我能在真空中走、在液氮海洋里游泳有什么关系？跟我能够看见紫外线、感知电磁场又有什么关系？在我身上实施的改造是极端残忍的。这些改造不能给我带来任何东西，就好比一台远程观测无人机并不能变成艺术家。”</p><p>“我觉得你对自己是不是有点太苛刻了？”</p><p>“不。我这样说，是因为我知道自己曾经创造出一些有价值的事物，但它的发生是我完全预料不到的。”</p><p>“你指的是齐玛蓝？”</p><p>“对，”他点点头说，“它的出现是个意外——在一幅差不多完成的画布上用错了颜色。这种颜色介于宝石蓝与墨绿色之间。然而这块污点似乎是带了电的，我感觉自己的大脑瞬间短路了，激起了某种强烈、原始的记忆。我有一种感觉：这种颜色曾经是我生命中最重要的东西。”</p><p>“那是一种什么样的记忆？”</p><p>“我不知道。我感觉到的就是这种颜色在跟我说话，好像我花了整整一辈子的时间才找到它，把它解放出来。”他想了一会儿，继续说道，“这种蓝色肯定代表着某种事物。一千年前，伊夫·克莱因曾经说过，蓝色是颜色中的精华，能够代表其他所有颜色。他就是这样一个人，花费了整整一生去寻找童年记忆中那抹独特的蓝色。后来，他绝望了，觉得根本就找不到这样的蓝色。如此精确的色调肯定是他自己想象出来的，自然界中可能并不存在这样的颜色。然而某一天，他却偶然地发现了它。那是自然历史博物馆里一个甲壳虫标本的颜色。他喜极而泣。”</p><p>“那你的齐玛蓝呢？”我问，“也是甲壳虫的颜色？”</p><p>“不，”他说，“不是甲壳虫的颜色。但是我必须知道答案，不管付出什么样的代价。我必须要知道为什么这种蓝色对我有这么重要的意义，为什么它会控制了我的艺术创作。”</p><p>“你允许它控制自己？”我说。</p><p>“我没有选择的余地。随着这种蓝色在我心中变得越来越强烈、越来越占优势，我感到自己越来越接近答案了。我觉得只有把自己沉浸到这种颜色中，才能发现我渴望知道的所有事。作为一个艺术家，我必须真正了解我自己。”</p><p>“那你了解了吗？”</p><p>“我了解我自己，”齐玛说，“但不是我预计的那样。”</p><p>“你发现了什么？”</p><p>等了很长一段时间，齐玛才慢慢回答。我们继续慢慢地向前走，我略微落在他的身后。天气开始变凉，我真希望自己能带一件大衣。我考虑向齐玛借一件大衣，但我必须要专注，不能脱离齐玛的思路，不然都不知道是从哪儿开头的。闭上嘴永远都是工作中最艰难的部分。</p><p>“我们刚刚谈过记忆的易错性。”他说。</p><p>“是的。”</p><p>“我自己的记忆并不完整。移植了人工记忆之后的每件事我都记得，但这段时间只是我人生中最近的三百年。我知道自己肯定不止三百岁，但是移植之前的人生，我只记得一些片段。我不知道如何才能把这些破碎的记忆重新组合起来。”他慢慢地转过身，地平线上最后一缕橙色的余晖照在他脸上，“我知道自己必须深入挖掘那段过去，才能真正理解齐玛蓝的特殊意义。”</p><p>“那你挖掘到什么程度了？”</p><p>“就像是考古一样，”他说，“我必须从记忆中最早的可靠事件中寻找线索，就是在我植入了人工记忆之后的短暂时间内发生的事情。我的记忆回到了哈尔科夫8号星球，那是位于格尔林湾星区的一颗行星，距离这里有一万九千光年。那里我唯一记得的，是一个我认识的男人的名字——科巴哥。”</p><p>科巴哥我没听说过，但格尔林湾我还是知道的，不用查询备忘录助手都知道。那是银河系里一片拥有六百个可居住行星系、由三大经济势力掌控的星域。在格尔林湾，正规的星际法律完全不适用。那里完全是亡命之徒的领地。</p><p>“哈尔科夫8号星球专门提供一种产品，是其他地方根本得不到的私人医疗服务——非法神经机械改造。”</p><p>“那里就是你……”我没敢继续说。</p><p>“对，在那里我变成了现在这个样子。当然，离开哈尔科夫8号星球之后，我进一步强化了身体——增强自己对极端环境的适应性，提高自己的各种感知能力——但我的内在部分就是躺在科巴哥诊所的手术台上完成的。”</p><p>“所以你在到哈尔科夫8号星球之前，是个普通人？”我问。</p><p>“这个问题正是最难搞清楚的部分。回到哈尔科夫8号星球，我自然想找到科巴哥。只有得到他的帮助，我才能把头脑里的那些记忆碎片整合起来。可惜科巴哥已经离开，到格尔林湾的其他地方隐居起来了。那个诊所还在，只不过现在是他的孙子在经营。”</p><p>“他肯定没有告诉你详情。”</p><p>“没错，他劝我还是不要知道的好。很庆幸，我还是有点手段的，威逼利诱。”说到这里，他微微一笑，“最终他同意打开诊所的历史记录，查看当年他爷爷接见我的记录。”</p><p>我们拐了一个弯。天空和大海现在已经变成了一片无法分辨的灰色，没有一丝蓝色的踪影。</p><p>“后来发生了什么事？”</p><p>“记录表明，我从来就不是一个真正的人。”齐玛说。他停顿了一下，对自己说的话没有任何怀疑，“在我到达诊所之前，齐玛根本不存在。”</p><p>这时我恨不得赶紧找回备忘录助手，哪怕身边有古老的笔和本子也好。可惜除了我自己的记忆，什么都用不了。我皱了皱眉头，希望能让自己的记忆更努力地工作。</p><p>“那你是什么呢？”</p><p>“一台机器，一个很复杂的机器人，具有自主智能的机器。到达哈尔科夫8号星球的时候，我已经几百岁了，但是完全具备合法的独立性。”</p><p>“不会吧。”我摇了摇头，“你顶多就是个装有机器零件的人，怎么可能是机器呢？”</p><p>“诊所里的记录非常清晰。我来到诊所的时候就是个机器人，一个具有男性外表的机器人。我被彻底拆散，我的核心认知功能被整合进了一个快速生长的生物宿主体内。”他用一根手指敲了敲自己的脑壳，“这里面有大量的有机材料，也有大量的神经机械系统。里面错综复杂，搞不清从哪里开始，到哪里结束；甚至搞不清哪个是主机系统，哪个是辅助系统。”</p><p>我看着这个站在我旁边的躯体，自己的思维开始跳跃：不能再把他当成人了，只能把他当做机器——</p><p>一台由细胞组成的柔软的机器。可我做不到，一下子接受这些很难。</p><p>我停下了脚步，“诊所有可能骗你的呀。”</p><p>“我不这么认为。不让我知道这件事，他们会更开心。”</p><p>“就算这样，”我说，“总得有证据……”</p><p>“那些就是事实，很容易证实。我检查了哈尔科夫8号星球海关出入境记录，发现在做手术的几个月前，有一个具备自主独立性的机器人进入了星球的大气层。”</p><p>“不一定就是你啊。”</p><p>“在这前后几十年，并没有其他机器人靠近这个星球。所以那个机器人就是我，而且记录上还显示了这个机器人的始发港。”</p><p>“始发港在哪里？”</p><p>“格尔林湾之外的一个星球，河口群岛星区的临潭3号。”</p><p>备忘录助手不在身边，就像是吃饭没了牙齿。“我都不知道自己是否知道那里。”我说。</p><p>“你大概不知道。你基本上不可能拜访这样的星球。根本没有光速飞船的航班到那里。我到那里唯一的目的就是……”</p><p>“你去过那里？”</p><p>“两次。一次是在哈尔科夫8号星球做手术之前，最近又去了一次，去搞清楚第一次去临潭3号星球之前我在哪里。各种线索变得越来越模糊。我问了无数次同样的问题，在各种数据库里查询同样的数据，最后我才知道自己来自哪里。但那依然不是最终答案。我去过太多的星球，其中的先后关系很难理顺。可是我一直没有放弃。”</p><p>“也一直在花钱吧？”</p><p>“没错，还有钱。”他礼貌地点了点头，“花了无数的钱。”</p><p>“最终你发现了什么？”</p><p>“我跟踪线索一直回到了原点。到达哈尔科夫8号星球的时候，我已经具备了与人类同等的智力，能够快速思考。但我并不是一直都这么聪明、这么复杂。只要时间和环境允许，我的智能就会逐步增强。”</p><p>“自己增强自己？”</p><p>“后来是这样的。那是我具备了自主意识和法律独立性之后的事。不过要想获得自由，我也必须具备一定的智力。在这之前，我只是一台单纯的机器……类似于传家宝或者宠物。我被我的主人代代相传。他们不断给我增加新的东西，让我变得越来越聪明。”</p><p>“那你究竟是怎么开始的？”</p><p>“开始于一个项目。”他回答。</p><p>齐玛带着我回到了游泳池。靠近赤道地区的夜晚来得很快，游泳池被看台上方的一排排人工灯光照得光彩夺目。刚才我们看见的机器人已经把最后一块地方的瓷砖都贴好了。</p><p>“游泳池已经准备好了。”齐玛说，“明天它就会被封闭起来，后天它就会注满水。我会一直循环里面的水，直到游泳池足够清澈。”</p><p>“然后呢？”</p><p>“我会准备好我的表演。”</p><p>在回游泳池的路上，齐玛把他的身世完完整整地告诉了我，只要是他知道的。在我出生之前，齐玛就已经存在于地球上了。他是由一个业余的机器人爱好者组装起来的，这个很有才能的年轻人对实用机器人技术特别感兴趣。在那些科技并不发达的岁月里，有很多团队或者个人在黑暗中摸索人工智能这一世纪难题。这个年轻人就是其中的一个。</p><p>感知、导航、自主解决问题的能力是这个年轻人最感兴趣的三个课题。他利用废旧的工具箱、玩具、零件组装了很多机器人。这些机器人的头脑——其实根本算不上什么头脑——是在废旧的电脑上运行简单程序，它们的记忆和处理速度实在有限。</p><p>年轻人的屋子里堆满了这些简单的元件，一有时间，他就开始捣鼓机器人。其中一个机器人是一只长了八条黏性长腿的“蜘蛛”，能够在他屋子里的墙上爬来爬去，清扫相框里的灰尘。“蜘蛛”的另外一项功能就是抓苍蝇和蟑螂。它会把抓到的害虫全部消化，把消化产生的化学能作为自己的能源，驱动自己爬向屋子的其他地方。另外一个机器人用于给墙壁刷漆，它会根据季节的变换改变墙壁的颜色。</p><p>还有一个机器人住在他的游泳池里。</p><p>它在游泳池贴满瓷砖的池壁上爬上爬下，不停地清洁这些瓷砖。这个年轻人完全可以通过邮购公司买一个便宜的游泳池清洁机，但是他觉得自己设计一个这样的机器人更有趣。他根据自己新奇的设计思路，从草图开始亲自制作这个机器人。它给这个机器人装上了全彩视觉系统，使其能够和周围环境融为一体，并且给它配备了足够先进的“大脑”，对视觉数据进行处理，输入它的环境数据模型。他允许这个机器人自己决定清洁游泳池的最佳策略。他还允许机器人自己选择什么时候清洁游泳池、什么时候通过它背部的太阳能电池进行充电。他在这个机器人身上灌输了原始的奖励观念。</p><p>制作这个游泳池清洁机器人的过程中，年轻人掌握了大量的机器人设计技术原理。他运用这些原理，制作出了一系列家用机器人，直到其中一个机器人——</p><p>一个简单的家庭清洁机器人——变得十分强健，而且具有自主意识。这个年轻人后来开了一家邮购公司，把这种机器人作为一种工具出售。机器人卖得很火。一年之后，年轻人又推出了预装配的家用机器人。这种机器人取得了巨大的成功，年轻人的公司逐渐成为家用机器人市场的领先者。</p><p>在接下来的十年内，整个世界到处都有这些聪明热心的机器人的身影。</p><p>但是，那个年轻人从来都没有忘记当年那个小小的游泳池清洁机器人。他把这个清洁机器人作为试验机，一次又一次地给他增加新的软硬件。清洁机器人一直是他所有发明中最聪明的一个，也是唯一</p><p>一个没有被遗弃或者淘汰的机器人。</p><p>当他去世的时候，他把游泳池清洁机器人传给了他的女儿。他的女儿继承了父亲的事业，继续提高这个小机器人的智力。当她去世的时候，年轻人的外孙继续传承家族的传统。这个时候外孙已经住到火星上了。</p><p>“如果你还没猜到的话，我来告诉你，这就是当初那个游泳池，我把它搬到了这里。”齐玛说。</p><p>“始终都没有变?”我问道。</p><p>“游泳池非常古老，但是瓷砖经受住了岁月的考验。寻找游泳池的过程中，最困难的工作就是找到它最初的地方。我不得不挖掉了两米深的表层土壤，才把它挖掘出来。它所在的地方曾经有一个响当当的名字——硅谷。”</p><p>“这些瓷砖都配上了齐玛蓝。”我说。</p><p>“其实齐玛蓝就是这些瓷砖的颜色。”他很有礼貌地更正道，“齐玛蓝就是当初年轻人家里的游泳池瓷砖的颜色。”</p><p>“也是你记忆中最深刻的一部分。”</p><p>“这就是我诞生的地方。我就是当年那个智力只够让自己绕着游泳池转的小机器人。但这个游泳池才是我的世界。它是我知道的一切，也是我唯一要知道的一切。”</p><p>“那么现在呢？”我问道。其实我很害怕这个问题的答案。</p><p>“现在我要回家。”</p><p>那一天看台上座无虚席，大家都来看齐玛最后的表演。小岛上空挤满了悬停的飞船。遮盖在小岛上的曲面屏幕已经关闭，连飞船上的看台都挤满了成千上万远道而来的人。他们站在飞船上就能看到游泳池，游泳池里的水像镜子一样平静、像杜松子酒一样清澈。他们看到齐玛站在游泳池的边缘，背上装满了像鳞片一样的太阳能电池板。没有人知道将会发生什么事，也没有人明白齐玛的举动究竟有什么意义。他们期待在这个揭幕式上，齐玛会展出他所有作品中的王牌，然而现在他们只能迷惑地盯着游泳池。跟齐玛那些大气磅礴的巨幅画作相比，这个小小的游泳池根本就不合格。他们一直在想，这个游泳池肯定是个障眼法。真正的作品——真正预示他退休的作品——一定在其他什么地方，只是现在还看不到而已。</p><p>这是他们的想法。</p><p>只有我知道真相。当齐玛站在游泳池边缘，被羁绊了他一生的蓝色包围着的时候，只有我知道真相。他已经告诉了我接下来要发生的事情：他大脑中的高级功能将被慢慢地、有条不紊地关闭。关键是整个过程是不可逆转的，他根本没给自己留下后悔的余地。</p><p>他大脑中只有一小部分还会继续工作：一个只能识别自身存在的微小内核。这个内核只够他认知周围的环境、执行特定的任务，哪怕这个任务毫无意义。他永远都不需要离开游泳池了。太阳能电板给他提供了足够的能量。他不会变老，也不会生病。其他的机器人会照看他的小岛，保护这个游泳池，确保这个沉默而缓慢的游泳者不会受到天气和时间的破坏。</p><p>这一切会持续几个世纪，几千年，然后是几百万年。</p><p>几百万年以后会变成什么样子？谁都说不准。但有一件事我可以确定，齐玛永远不会厌倦他的任务。在他的心中已经没有了厌倦的概念。</p><p>如果他在游泳池里游泳的时候体会到了某种快乐，那只能是一种几乎没有思维的快乐，就像是蜜蜂或者蝴蝶的快乐。但是对他来说，这样的快乐已经足够。对于当初在加尼福利亚那个游泳池里的他来说已经足够，对于一千年后在同一个游泳池里的他来说也已经足够。只不过这个游泳池已经搬到了银河系中另外一个遥远的世界，这个世界绕着另外一个太阳转动。</p><p>对我来说也足够了……</p><p>这样的快乐让我记住了更多关于我们在岛上见面的情景。不管你信不信，我已经不需要备忘录助手这样的心灵拐杖了，这跟我以前想象的完全不一样。齐玛是对的：备忘录助手把我的生活变成了编写好的剧本，就像是一张设计好的图纸。在夕阳西下的时候，它总是让我选择红葡萄酒，从来不选白葡萄酒。在搭乘光速飞船离开穆尔耶克星球时，我已经到诊所里植入了一系列神经记忆扩展模块。这些模块应该能用上四五百年。总有一天我将需要另一种解决方案，但我一定要穿过那个独特的助记桥。在彻底放弃我的备忘录助手之前，我做的最后一件事就是把它的观察数据传输进我扩展以后的记忆中。我依然觉得它记录的所有事情似乎并没有在我身上发生过，但是每次回忆起来，这些记忆都比其他的更清晰。它们发生了改变，变得柔和，而且精彩的地方变得更加闪耀。我估计这些记忆中的每个细节已经没那么准确，但是就像齐玛说的那样——也许这就是关键。</p><p>我现在明白了他为什么接受我采访。不仅仅是因为我写人物传记的方式他很喜欢，而且他希望能够帮助某个人向前进，不要像他一样。</p><p>我最终还是记起了那家报社的名字，写好了有关齐玛的传记，并且把传记卖给了这家报社——《火星纪事》。回到过去待过的星球感觉真好，尤其是现在火星已经被人们迁移进了更温暖的轨道。</p><p>事情已经过去很长时间了，但我总觉得齐玛的事情还没完。</p><p>每过几十年，我都会登上开往穆尔耶克的光速飞船，走进那座闪闪发光的威尼斯，乘坐运输机来到小岛上，和其他一些顽固的目击者一起坐在看台上。这些人和我一样，依然认为这位艺术大师会留下什么东西，给人们最后的惊喜。他们都读过我写的报道，大部分人都读过，所以他们知道那个慢慢游弋的躯体意味着什么……可人们还是不会成群结队地来。所以即使在极好的天气里，看台上也总是有点空旷和凄凉。但我从来没看见这些看台完全空过，我觉得这是某种神圣的誓约。一些人愿意接受这个誓约，但是大部分人永远都不会接受。</p><p>而这就是艺术。</p><img data-src="/2019/03/22/zima-blue/Zima-Blue.jpg" class="" title="Zima-Blue.jpg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天看了 Netflix 出品的 &lt;a href=&quot;https://www.netflix.com/title/80174608&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;Love, Death &amp;amp; Robots&lt;/em&gt;&lt;/a&gt; ，第十四集讲的就是这个故事，动画很好，小说也写得很好，特地转载一下。 转载自：&lt;a href=&quot;http://www.eleefeed.com/f/201939&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.eleefeed.com/f/201939&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="科幻" scheme="http://www.aemon.top/categories/%E7%A7%91%E5%B9%BB/"/>
    
      <category term="转载" scheme="http://www.aemon.top/categories/%E7%A7%91%E5%B9%BB/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="http://www.aemon.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Love Death &amp;amp; Robots" scheme="http://www.aemon.top/tags/Love-Death-amp-Robots/"/>
    
      <category term="Zima Blue" scheme="http://www.aemon.top/tags/Zima-Blue/"/>
    
      <category term="爱，死亡和机器人" scheme="http://www.aemon.top/tags/%E7%88%B1%EF%BC%8C%E6%AD%BB%E4%BA%A1%E5%92%8C%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>将hexo博客部署到Github Pages</title>
    <url>/2020/03/16/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github-Pages/</url>
    <content><![CDATA[<p>本来博客是部署在自己的服务器上的，但是华为云的备案实在是太慢了，所以想着先部署到 <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> 上，这样至少不用每天顶着个服务器地址来访问了。</p>
<a id="more"></a>

<p>昨天（2020-3-17）下午备案终于通过了。但是这个 Github Pages 的部署过程还是要写一下的，毕竟学到了很多东西，我准备分两块来写，一部分是使用 hexo 搭建博客，一部分是当前你看到的这篇，如何将 hexo 博客部署到 Github Pages。</p>
<h2 id="什么是-GitHub-Pages？"><a href="#什么是-GitHub-Pages？" class="headerlink" title="什么是 GitHub Pages？"></a>什么是 GitHub Pages？</h2><p>往常，当你需要部署一个静态网站时，你需要一台有公网 IP 的服务器或者是虚拟主机，然后在上面通过配置 Nginx、Tomcat 或者 IIS 等网页服务器来部署你的网站。之后再通过域名的 DNS 设置，将你的域名指向到你的服务器地址。这样，当访问这个域名的时候，就能见到你的网站了。</p>
<p>如果你在中国，你还要经过较长且繁琐的备案程序，最终才能使你的网站可以访问。</p>
<p>而 GitHub Pages 则帮你省去了很多步骤，你甚至不需要域名，你就可以拥有属于自己的网站。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="首先你需要有一个网站的源文件"><a href="#首先你需要有一个网站的源文件" class="headerlink" title="首先你需要有一个网站的源文件"></a>首先你需要有一个网站的源文件</h3><p>我部署的网站是我的博客，就是你当前在浏览的这个网站，他是由 hexo 来生成的。接下来过程都是基于 hexo 的博客来写的。</p>
<p>当然，如果你对样式或者内容不满意，你也可以自己修改或者完全自己手搓一份。</p>
<h3 id="然后你需要一个-GitHub-账号"><a href="#然后你需要一个-GitHub-账号" class="headerlink" title="然后你需要一个 GitHub 账号"></a>然后你需要一个 GitHub 账号</h3><p>你需要在 <a href="https://github.com" target="_blank" rel="noopener">GitHub 官网</a> 注册一个属于你自己的账号。你的用户名（Name），将决定你的 GitHub Pages 域名（ <em>你的GitHub用户名.github.io</em> ）。虽然之后也可以更改，但是更改用户名之后会有很多意想不到的问题出现，所以干嘛不一开始就做到最好，给自己取个好听又好记的名字吧。</p>
<h3 id="新建-repository"><a href="#新建-repository" class="headerlink" title="新建 repository"></a>新建 repository</h3><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><p>在你的 Hexo 站点文件夹目录下使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure>

<p>来初始化你的 git 仓库。</p>
<h4 id="新建远程仓库"><a href="#新建远程仓库" class="headerlink" title="新建远程仓库"></a>新建远程仓库</h4><p>在<a href="https://github.com/new" target="_blank" rel="noopener">这里</a>新建一个 repository，Repository name 就是上面说的 <em>你的GitHub用户名.github.io</em> ，我的就是 <em>AemonCao.github.io</em>。</p>
<p>点击 <em>Creating repository</em> 即可创建。</p>
<p>这样，你就得到了一个远程的 git 仓库，记下你的仓库地址：<em><a href="https://github.com/AemonCao/AemonCao.git" target="_blank" rel="noopener">https://github.com/AemonCao/AemonCao.git</a></em> ，这个地址可以在仓库页面，点击 <em>Clone or download</em> 来进行复制。</p>
<h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3><p>由于 GitHub 现在不允许将非主分支发布到 GitHub Pages，推送部署的目标只能是 <em>master</em> 分支。而我们上传到 <em>master</em> 分支的并不是最后需要部署的静态文件，所以我们需要新建一个名为 <em>source</em> 的分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b <span class="built_in">source</span></span></span><br></pre></td></tr></table></figure>

<p>它是下面两条命令的简写：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch <span class="built_in">source</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout <span class="built_in">source</span></span></span><br></pre></td></tr></table></figure>

<p>意思是新建并切换到一个名为 <em>source</em> 的分支。</p>
<p>文件夹中不应该包含 <em>node_modules</em> 、 <em>public</em> 等文件夹以及文件，所以你需要将这些文件/文件夹写进你的 <em>.gitignore</em> 。</p>
<p>具体 <em>.gitignore</em> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p>然后进行第一次 commit：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'first commit'</span></span></span><br></pre></td></tr></table></figure>

<p>现在你的 <em>source</em> 分支就是用来存储你的 Hexo 站点源文件。</p>
<h3 id="推送-Hexo-站点文件夹"><a href="#推送-Hexo-站点文件夹" class="headerlink" title="推送 Hexo 站点文件夹"></a>推送 Hexo 站点文件夹</h3><p>添加远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://github.com/AemonCao/AemonCao.git</span></span><br></pre></td></tr></table></figure>

<p>之后将本地仓库推送的 GitHub 上你刚刚建立的远程仓库中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin <span class="built_in">source</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h3><h4 id="添加-Travis-CI"><a href="#添加-Travis-CI" class="headerlink" title="添加 Travis CI"></a>添加 Travis CI</h4><p>在<a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">这里</a>，将 Travis CI 添加到你的 GitHub 中去。</p>
<h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>在 GitHub 中<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只需要勾选 <em>repo</em> 即可。</p>
<p>生成并复制 Token。</p>
<h4 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h4><p>然后在<a href="https://github.com/settings/installations" target="_blank" rel="noopener">这里</a>，配置你的 Travis CI 权限，使其能访问的你仓库。</p>
<p>之后你会被重定向到 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>，然后使用你的 GitHub 账号来进行登录。</p>
<p>前往的你在 Travis CI 的仓库，进入 Settings 页面，在 Environment Variables 栏目下新建一个新的环境变量，Name 为 <code>GH_TOKEN</code>，Value 为你刚才在 GitHub 中生成并复制的 Token。生成后保存。</p>
<h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>在你的 Hexo 站点文件夹中新建一个名为 <em>.travis.yml</em> 的文件，内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span> <span class="comment"># build hexo branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">all_branches:</span> <span class="literal">true</span> <span class="comment"># solve a permission problem</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure>

<p>这个文件是 Travis CI 的配置文件，目的是告诉 Travis CI 以何种方式编译 <em>source</em>  分支中的源文件，并生成到 <em>master</em> 分支中去。</p>
<p>推送 <em>.travis.yml</em> 到你的远程仓库。Travis CI 就会自动运行，稍等片刻后，博客的静态文件就会出现在你的远程仓库的 <em>master</em> 分支中去了。与此同时，你就可以在 <em>你的GitHub用户名.github.io</em> 看到你的博客啦！</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有些需要注意的点。</p>
<h3 id="子项目"><a href="#子项目" class="headerlink" title="子项目"></a>子项目</h3><p>通常如果使用 Hexo 的话，我不会使用自带的 theme。以当前使用的 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a> 主题为例，官方的使用方法是通过 clone 源项目来使用。而由于 Hexo 的具有强大的可配置性（它拥有 1000 多行配置文件），我建议是将原项目 Fork 到自己的仓库中，再进行 clone，然后使用 <a href="/2020/03/11/Linux学习记录/#Submodules">Submodules</a> 的方法将其加入到 Hexo 的站点项目中。</p>
<h3 id="编译速度"><a href="#编译速度" class="headerlink" title="编译速度"></a>编译速度</h3><p>虽然 Travis CI 很方便，但是他的编译速度却很慢。通常从 push 到远程仓库到完成需要 1 分钟左右的时间。所以我建议首先在确定编译生成的文件无误后，再进行 push。这样可以节省大量的时间。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://hexo.io/zh-cn/docs/github-pages#Project-page" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages</a></p>
</li>
<li><p><a href="https://help.github.com/en/github/working-with-github-pages/getting-started-with-github-pages" target="_blank" rel="noopener">Getting started with GitHub Pages</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>在微信中使用 ToDoList</title>
    <url>/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/</url>
    <content><![CDATA[<p>在 <a href="https://www.v2ex.com/t/650838" target="_blank" rel="noopener">V2EX</a> 看到了这篇帖子，想到了之前自己琢磨出来的方法，所以在这里记录一下，到时候也可以直接将链接贴到回复中去。</p>
<a id="more"></a>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>效果如下：</p>
<!-- ![效果.jpg](https://i.loli.net/2020/03/13/pcINsy3t4xwO8ro.jpg) -->
<img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E6%95%88%E6%9E%9C.jpg" class="" title="效果.jpg">

<!-- ![置顶.jpg](https://i.loli.net/2020/03/13/oqslDcLjPWhFyJt.jpg) -->
<img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E7%BD%AE%E9%A1%B6.jpg" class="" title="置顶.jpg">

<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol>
<li><p>打开 <code>微信</code>-<code>我</code>-<code>收藏</code>；</p>
</li>
<li><p>点击右上角的 <code>+</code> 添加一个新的笔记；</p>
</li>
<li><p>在第一行输入 <code>ToDoList</code>，这是你置顶后所显示的标题；</p>
</li>
<li><p>然后下方的几个按钮就可以使用了，一般都是用最后一个的待办列表；</p>
<!-- ![待办](https://i.loli.net/2020/03/13/IDoYRdFaKsw1bHq.jpg) -->
<img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E5%BE%85%E5%8A%9E.jpg" class="" title="待办.jpg">
</li>
<li><p>填写完成后，点击右上角的 <code>···</code>，你可以选择<code>浮窗</code>，也可以选择置顶<code>在聊天中置顶</code>；</p>
<!-- ![置顶选项.jpg](https://i.loli.net/2020/03/13/9FCy2oXMiQdrla1.jpg) -->
<img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E7%BD%AE%E9%A1%B6%E9%80%89%E9%A1%B9.jpg" class="" title="置顶选项.jpg">
</li>
<li><p>这样就已经完成了，当你需要查看的时候，你只需要点击聊天列表界面顶部的 <code>ToDoList</code>，就能进入这份笔记中查看你的待办事项了。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个方法勉强可以满足最基本的 <code>ToDoList</code> 功能，对于普通人来说，也是只能说是到了勉强够用的程度，毕竟他没有提醒功能。</p>
<p>我一般是在去超市进行采购的时候，会在这里列一下采购清单，方便核对。</p>
<p>说起提醒功能，微信可以对聊天双方所发的消息进行提醒，长按一条消息，在 <a href="https://zhuanlan.zhihu.com/p/29026281" target="_blank" rel="noopener">Popover</a> 中选择 <code>提醒</code>（在 IOS 中需要点击 Popover 右侧的 <code>▶</code>，才能在下一页看到 <code>提醒</code> 选项），选择提醒时间后，微信就会在提醒时间为你发送一条提醒。</p>
<!-- ![提醒](https://i.loli.net/2020/03/13/hrTYKjQmvH3zxb4.jpg) -->
<img data-src="/2020/03/13/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8ToDoList/%E6%8F%90%E9%86%92.jpg" class="" title="提醒.jpg">

<p>微信真的是很封闭的软件，你甚至不能找到分享到其他 APP 的按钮。</p>
]]></content>
      <categories>
        <category>奇技淫巧</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>WeChat</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习记录</title>
    <url>/2020/03/11/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这是一篇偏向流水账的文章，主要记一下平时使用 Linux 过程中的一些小技巧，或者某些命令的使用方法。</p>
<p>本文不定期更新，可以点击目录来跳转观看。</p>
<a id="more"></a>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><blockquote>
<p>  用于将文件已行为单位的反序输出，即第一行最后显示，最后一行先显示。</p>
</blockquote>
<p>今天在写博客的<a href="/about">关于页</a>时，把原本记在微信收藏中的一些「骚话」贴过来了，原本记录的时候是按时间从旧到新，如果有新的，就往底部添加。</p>
<p>但是觉得这样不太好，我希望比较新的「骚话」可以放在前面。</p>
<p>第一时间是想用 <em>python</em> 或者 <em>JavaScript</em> 写个小脚本跑一下，但是有点懒，就去网上找了一下资料，被我找到了<a href="https://www.itranslater.com/qa/details/2106725530790790144" target="_blank" rel="noopener">这个</a>，排在第一的就是 <a href="https://man.linuxde.net/tac" target="_blank" rel="noopener">tac</a> 命令。</p>
<p>tac 其实就是 cat 的 reverse，包含于 <a href="https://zh.wikipedia.org/zh-hans/GNU%E6%A0%B8%E5%BF%83%E5%B7%A5%E5%85%B7%E7%BB%84" target="_blank" rel="noopener">coreutils</a>。</p>
<p>用法和 cat 类似，预览：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tac abc.txt</span></span><br></pre></td></tr></table></figure>

<p>输出到文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tac abc.txt &gt; cba.txt</span></span><br></pre></td></tr></table></figure>

<p>目前想到的用法可能是用在日志文件上，可以将日志文件 reverse，方便查看最新的日志。</p>
<h3 id="w"><a href="#w" class="headerlink" title="w"></a>w</h3><blockquote>
<p>  用于显示目前登入系统的用户信息。</p>
</blockquote>
<p>这个命令也不算是新学的，但是对输出的信息还只是一知半解，所以今天去查了一下，这边记录一下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> w</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 22:33:11 up 4 days,  9:44,  1 user,  load average: 0.05, 0.03, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts&#x2F;1    192.168.1.88     22:22    7.00s  0.03s  0.00s w</span><br></pre></td></tr></table></figure>

<p>第一行显示以下信息：当前时间（<code>22:33:11</code>），系统运行时间（<code>up 4 days,  9:44</code>），当前一共有多少用户登录（<code>1 user</code>），以及过去 1 分钟，5 分钟，15 分钟的系统平均负载（<code>load average: 0.05, 0.03, 0.05</code>）。</p>
<p>第二行开始是一张表，标头依次为登录名（<code>USER</code>），登录后系统分配的终端号（<code>TTY</code>），远程主机名（<code>FROM</code>），何时登录（<code>LOGIN@</code>），空闲时间（<code>IDLE</code>），与该 TTY 终端连接的所由进程占用的时间，不包括过去的后台作业时间（<code>JCPU</code>），当前进程所占用的时间（<code>PCPU</code>），当前进程（<code>WHAT</code>）。</p>
<p>参考：</p>
<ul>
<li> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> man w</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://www.geeksforgeeks.org/w-command-in-linux-with-examples/" target="_blank" rel="noopener">w command in Linux with Examples</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Jerry_1126/article/details/52088987" target="_blank" rel="noopener">图解Linux命令之–w命令</a></p>
</li>
<li><p><a href="https://blog.csdn.net/zzxian/article/details/8070144" target="_blank" rel="noopener">Linux的JCPU与PCPU</a></p>
</li>
</ul>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>这里写一下 Vim 的学习历程，之前都是用 nano，但是不是所有的系统都预装的 nano。而且最近在使用 Vim 的时候，发现并没用想象中那么难用。更加下定了要学好 Vim 的决心。</p>
<h3 id="退出-Vim"><a href="#退出-Vim" class="headerlink" title="退出 Vim"></a>退出 Vim</h3><p>在学习 Vim 前，首先要先学会如何退出 Vim，毕竟很多人直到老死也没有退出 Vim。</p>
<blockquote>
<p>  How to exit the Vim editor?</p>
</blockquote>
<p>这个问题在 <a href="https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor" target="_blank" rel="noopener">Stack Overflow</a> 得到了 200多万次的查看（截至 2020-3-12 13:55:28）。</p>
<p>其实排名第一的答案已经讲得很清楚了，这边就把答案拿过来放在这里了：</p>
<p>点击 <kbd>ESC</kbd> 进入「正常模式」，然后输入 <kbd>:</kbd>，进入「命令模式」。此时屏幕的下方会出现一个冒号，你可以输入以下命令，并按 <kbd>ENTER</kbd> 执行：</p>
<ul>
<li><code>:q</code>：退出（<code>:quit</code> 的缩写）；</li>
<li><code>:q!</code>：退出且不保存（<code>:quit!</code> 的缩写）；</li>
<li><code>:wq</code>：保存并退出；</li>
<li><code>:wq!</code>：保存并退出即使文件没有写入权限（强制保存退出）；</li>
<li><code>:x</code>：保存并退出（类似 <code>:wq</code>，但是只有在有更改的情况下才保存）；</li>
<li><code>:exit</code>：保存并退出（和 <code>:x</code> 相同）；</li>
<li><code>:qa</code>：退出所有（<code>:quitall</code> 的缩写）；</li>
<li><code>:cq</code>：退出且不保存（即便有错误）。</li>
</ul>
<p>你也可以直接在「正常模式」下输入 <code>ZZ</code> 来保存并退出 Vim（和 <code>:x</code> 相同），或者 <code>ZQ</code> 不保存并退出（和 <code>:q!</code> 相同），注意此处 <code>ZZ</code> 大写和小写是完全不同的。</p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>在命令模式按下 <kbd>/</kbd>，之后跟上你需要搜索的字符串然后回车就可以进行搜索，如果要查找下一个只需要按下 <kbd>n</kbd>，上一个的话则是 <kbd>N</kbd>。</p>
<h3 id="上下移动一行代码"><a href="#上下移动一行代码" class="headerlink" title="上下移动一行代码"></a>上下移动一行代码</h3><p>在 Visual Studio Code 中，上下移动代码比较简单，只要使用 <kbd>alt</kbd> + <kbd>↑</kbd> 或者 <kbd>alt</kbd> + <kbd>↓</kbd> 就可以移动了。</p>
<p>而在 vim 中，首先你需要将光标移动到你想要操作的行，按下两次 <kbd>d</kbd>（剪切当前行），然后移动你的光标到你想要的位置，按下 <kbd>p</kbd>（在光标之后粘贴） 或 <kbd>P</kbd>（在光标之前粘贴），即可将一行代码移动过来了。</p>
<p>参考：</p>
<ul>
<li><p><a href="https://www.v2ex.com/t/49043" target="_blank" rel="noopener">请问vim如何移动当前行向上或向下？不用选中</a></p>
</li>
<li><p><a href="https://blog.csdn.net/donahue_ldz/article/details/17139361" target="_blank" rel="noopener">最全的vim快捷键</a></p>
</li>
</ul>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="保存-GitHub-的用户名和密码"><a href="#保存-GitHub-的用户名和密码" class="headerlink" title="保存 GitHub 的用户名和密码"></a>保存 GitHub 的用户名和密码</h3><p>通过 ssh 远程服务器进行开发后，如果需要 <code>git push</code> 到 GitHub 的话，每次都需要重新输入用户名和密码，比较繁琐。</p>
<p>可以使用以下命令来设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global credential.helper cache</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global credential.helper store</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>cache</code> 选项的话，会将用户名密码保存在内存中，平且在15分钟后从内存中消失，使用 <code>store</code> 选项的话，则会将用户名密码保存在磁盘中，永远都不会消失，除非你更改了 GitHub 的密码，否则是永远都不用输入密码的。但是密码会以明文的方式存储在当前用户的根目录下的 <em>.git-credentials</em> 文件中，比较不安全。</p>
<p>如果你是 Mac 系统，则可以使用第三个选项 <code>osxkeychain</code>，可以将凭证存储都<a href="https://support.apple.com/zh-cn/HT204085" target="_blank" rel="noopener">钥匙串</a>中。这样你的凭证虽然还是存储在磁盘中，但是它是被加密的，并且也是可以永久使用。</p>
<p>参考：</p>
<ul>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8" target="_blank" rel="noopener">Git 工具 - 凭证存储</a></li>
</ul>
<h3 id="Submodules"><a href="#Submodules" class="headerlink" title="Submodules"></a>Submodules</h3><p>在搭建 hexo 博客的时候，当使用了 next 的 themes 时，修改配置后，发现 commit 总是报错。总觉得哪里不对劲，在 GitHub 上查看项目的时候，next 文件夹只有一个名称，无法点击进入。</p>
<p>如果一个项目中包含了另一个项目，我们就要使用 Git 的 Submodules 来进行管理。</p>
<p>首先要在当前主项目上使用 <code>git submodule</code> 命令来添加一个子项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule add https://github.com/AemonCao/hexo-theme-next.git themes/next</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，子项目会放在一个与仓库名同名的目录中，如果想放到其他地方，可以在命令最后添加一个路径。</p>
<p>这时候，主项目的目录下会有一个新的 <em>.gitmodules</em> 的文件。</p>
<p>这是用来保存项子项目的 URL 以及已经拉取的本地目录之间的映射：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[submodule &quot;themes&#x2F;next&quot;]</span><br><span class="line">        path &#x3D; themes&#x2F;next</span><br><span class="line">        url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;AemonCao&#x2F;hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>当前只有一条记录，如果添加了多个子项目，则会有多条记录。</p>
<p>之后在 Visual Studio Code 的「源代码管理页面」的「源代码管理提供程序」中就会出现两个项目，一个是主项目，一个就是刚刚添加的子项目。</p>
<img data-src="/2020/03/11/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%8F%90%E4%BE%9B%E7%A8%8B%E5%BA%8F.png" class="" title="源代码管理提供程序">

<p>现在你就可以更好得管理这两个项目了。</p>
<p>此时在 GitHub 上，你的主项目中相应的<a href="https://github.com/AemonCao/AemonCao.github.io/tree/source/themes" target="_blank" rel="noopener">子项目文件夹</a>也会有一个指向原仓库的某一次提交的一个链接。</p>
<p>参考：</p>
<ul>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git 工具 - 子模块</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Visual Studio Code 中远程开发</title>
    <url>/2020/03/08/Remote-development-in-Visual-Studio-Code/</url>
    <content><![CDATA[<p>由于近期的疫情影响，导致复工时候只能在家办公，所以捣鼓了一下远程办公，特此记录一下。</p>
<a id="more"></a>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol start="0">
<li><p>一台可以通过 ssh 来进行连接的服务器（云服务器或者公司的服务器）；</p>
</li>
<li><p>一台用于可以连接 <code>0</code> 中的服务器的 PC。</p>
</li>
</ol>
<h2 id="安装-Visual-Studio-Code"><a href="#安装-Visual-Studio-Code" class="headerlink" title="安装 Visual Studio Code"></a>安装 Visual Studio Code</h2><p>点击这里下载「<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>」，然后安装。</p>
<h2 id="安装远程插件"><a href="#安装远程插件" class="headerlink" title="安装远程插件"></a>安装远程插件</h2><p>新安装的 Visual Studio Code 并不能直接进行远程工作，需要下载相应的插件。</p>
<ol start="0">
<li><p>在左侧边栏点击 Extensions（或者使用快捷键 Ctrl+Shift+X）调出插件管理页面；</p>
</li>
<li><p>在顶部搜索栏搜索「Remote」,在搜索结果中选择 「Remote - SSH」 进行安装；</p>
<p>在安装的时候会自动为你安装 「Remote - SSH: Editing Configuration Files」。</p>
</li>
<li><p>安装完成后，你的左侧边栏就会多出一个「远程资源管理器（Remote Explorer）」的图标，如下图所示：</p>
<!-- ![Remote Explorer](https://i.loli.net/2020/03/08/YXuTfDQxovHUkNm.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/RemoteExplorer.png" class="" title="RemoteExplorer">

</li>
</ol>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="进行连接"><a href="#进行连接" class="headerlink" title="进行连接"></a>进行连接</h3><p>点击远程资源管理器图标，在 SSH TARGETS 栏中点击加号，来新建一个 ssh 连接：</p>
<!-- ![SSH TARGETS](https://i.loli.net/2020/03/08/mlqFf1N9nuxRaEp.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/SSHTARGETS.png" class="" title="SSHTARGETS">

<p>输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh user@host</span></span><br></pre></td></tr></table></figure>

<p><code>user</code> 是用来登录的用户名，<code>host</code> 则是你需要远程的服务器的地址。</p>
<p>ssh 的默认端口是 22，如果你修改过该端口，则需要使用 p 参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -p 9588 user@host</span></span><br></pre></td></tr></table></figure>

<p>9588 则是新的 ssh 端口。</p>
<p>回车，然后选择一个配置文件进行保存。</p>
<p>这时候在左侧 SSH TARGETS 下将会出现以你的 host 为名称的项目，右键选择在连接当前窗口或者在新窗口，进行连接。</p>
<!-- ![password.png](https://i.loli.net/2020/03/08/jXhLQ2UgY5Gwl3f.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/password.png" class="" title="password">

<p>输入当前用户名所对应的密码。</p>
<p>这时你的窗口左下角将会将会显示正在连接：</p>
<!-- ![Opening](https://i.loli.net/2020/03/08/Fa6xRzThrIsEYUN.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/Opening.png" class="" title="Opening">

<p>等待一段时间后。如果变成以下样式，则为连接成功：</p>
<!-- ![success.png](https://i.loli.net/2020/03/08/v6jDnFKbcJPWLRl.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/success.png" class="" title="success">

<h3 id="选择文件夹"><a href="#选择文件夹" class="headerlink" title="选择文件夹"></a>选择文件夹</h3><p>连接成功后，你要选择需要进行工作的文件夹，基本上是一个项目的根目录。</p>
<ol start="0">
<li><p>点击左侧边栏的 Expoler（或者使用快捷键 Ctrl+Shift+E）打开资源管理器：</p>
<!-- ![expoler.png](https://i.loli.net/2020/03/08/Tltvb9aLrmq67CI.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/expoler.png" class="" title="expoler">
</li>
<li><p>点击 Open Folder 按钮来选择文件夹：</p>
<!-- ![open-folder.png](https://i.loli.net/2020/03/08/2JU7CYA5i6T1Fzc.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/open-folder.png" class="" title="open-folder">
</li>
<li><p>点击 OK，这时可能需要你再次输入密码，之后你的资源管理器中就会有选择文件夹下的文件了。</p>
</li>
</ol>
<h3 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h3><p>这时候你已经可以点击任意一个文件来进行预览了，为什么说是预览呢，因为当你尝试编辑并保存时，系统会有如下警告：</p>
<!-- ![error.png](https://i.loli.net/2020/03/08/BemOgUkIxCsjPrh.png) -->
<img data-src="/2020/03/08/Remote-development-in-Visual-Studio-Code/error.png" class="" title="error">

<p>提示权限不够。</p>
<p>最简单的方法是执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 777 /path</span></span><br></pre></td></tr></table></figure>

<p>之后再保存的话就可以顺利保存成功了。</p>
]]></content>
      <categories>
        <category>Visual Studio Code</category>
      </categories>
      <tags>
        <tag>Visual Studio Code</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】《齐玛蓝》——阿拉斯泰尔·雷诺兹</title>
    <url>/2019/03/22/zima-blue/</url>
    <content><![CDATA[<p>前些天看了 Netflix 出品的 <a href="https://www.netflix.com/title/80174608" target="_blank" rel="noopener"><em>Love, Death &amp; Robots</em></a> ，第十四集讲的就是这个故事，动画很好，小说也写得很好，特地转载一下。 转载自：<a href="http://www.eleefeed.com/f/201939" target="_blank" rel="noopener">http://www.eleefeed.com/f/201939</a></p>
<a id="more"></a>

<h2 id="齐玛蓝"><a href="#齐玛蓝" class="headerlink" title="齐玛蓝"></a>齐玛蓝</h2><p>文/【英】阿拉斯泰尔·雷诺兹 译/陈日锋 图/蔡定一</p>
<hr>
<p>第一周刚过，人们就开始陆陆续续地离开小岛。游泳池周围的看台渐渐空荡起来。巨型观光飞船启程返回星际空间，那些艺术迷、评论员和批评家都在威尼斯收拾行李。他们心中的失望之情像沼气一样弥漫了整个游泳池。</p>
<p>我是留在穆尔耶克星球的少数几个人之一。此时，我已经站在看台上看了几个小时，眯着眼斜视水面反射的光芒。那是一种令人胆寒的蓝色光芒。在我的下方，齐玛拖着苍白而疲惫的身躯，从游泳池的一头游到另一头。乍一看，你还真会把他错当成一具漂浮的尸体。当他游泳时，我一直在考虑如何将他的故事讲给其他人听。我努力回忆我在火星工作的那家报社名字，那是我第一次在报社工作。这家报社付给我的工资没有大报社高，但是我隐隐觉得自己喜欢回到曾经工作的地方。我在那家报社工作已经是很久以前的事了。我查询了我的备忘录助手，想查到报社的名字。我大概已经查询了几百次，但是备忘录助手一点反应都没有。过了一会儿，我才想起自己前天已经彻底丢弃了备忘录助手。</p>
<p>“现在得靠你自己了，凯莉。”我对自己说道，“赶紧习惯吧。”</p>
<p>游泳池里，齐玛已经游到了另一端，开始折返向我这边游过来……</p>
<p>两周前的一个中午，我正坐在圣马可广场品尝咖啡，观赏白色的雕像和汉白玉钟塔。</p>
<p>威尼斯的上空密集地停泊着一艘艘星际飞船。飞船的船舷安装了巨大的全反射发光面板，把飞船的颜色跟天空的真实颜色统一起来。</p>
<p>这样的景象让我想起了一幅画作，作者是一位前卫画家，专攻空间扭曲透视立体图，比如永无止境的瀑布、相互连结的蜥蜴。我在头脑里回忆出这幅画的大致样子，然后发送给备忘录助手，让它查一查这幅画的名字。可是，它怎么也回忆不起来。</p>
<p>我喝完了咖啡准备结账。</p>
<p>我来到这样一个汉白玉砌成的威尼斯，主要是为了目睹齐玛最后一幅作品的揭幕式。多年来我一直对这位艺术家很感兴趣，希望能争取到一次采访他的机会。不巧的是，几千个同行都和我有着相同的想法。其实同行竞争是次要的问题，最主要的问题是，齐玛过去从来不接受采访。</p>
<p>齐玛通知我们所有记者都到穆尔耶克星球来。大多数人头一次听说这个几乎完全被海水浸泡的世界。穆尔耶克星球唯一出名的地方就是它拥有第171个水城威尼斯的复制城，它是仅有的三个完全用汉白玉建成的复制城之一。齐玛选择穆尔耶克星球来放置他的最后一幅作品，并准备在这里退休养老，永远离开公众的视野。</p>
<p>咖啡店侍者突然将一张折叠的卡片放在我的桌上。</p>
<p>怀着沉重的心情，我举起了那张卡片，想看看总共花了多少钱。我以为它是账单，可我仔细一看，却发现这是一张小小的印有烫金斜体字的蓝色卡片。卡片上的蓝色非常精细，而且呈粉末状，很明显这是齐玛自己创造的标志性宝石蓝。这张卡片的收信人是我——凯莉·克莱，上面写着齐玛要和我谈谈揭幕式。卡片上还说如果我感兴趣的话，必须在两个小时之内到里亚托桥报到。</p>
<p>如果感兴趣？我当然感兴趣。</p>
<p>卡片上要求，不允许带任何记录工具，甚至包括笔和纸。卡片的末尾还提到，我点的咖啡已经有人买单了。我差点厚着脸皮再点一杯咖啡，不过想想还是算了。</p>
<p>我到达里亚托桥时，齐玛的机器佣人已经在那儿等候。机器佣人的外表是人形的玻璃罩，玻璃罩里面是复杂的机械构造，不时发出氖光。它向我深深地鞠了一躬，然后温柔地问：“你是克莱小姐吧？既然你来了，我们就赶紧出发吧。”</p>
<p>机器佣人护送我上了停在水边的舷梯，我的备忘录助手紧紧跟着我，扒在我的肩上。舷梯的另一头连着一架等候多时的气垫运输机。这架运输机悬浮在水面上，离水面将近一米。机器佣人带着我走进后面的包间。我的备忘录助手也想跟着进来，却被机器仆人抬手制止了。</p>
<p>“恐怕你不能带着它，不允许带记录工具，记得吗？”</p>
<p>我看着这个带着金属光泽的绿色蜂鸟——我的备忘录机器人，努力回忆我上次离开它的监护是什么时候。</p>
<p>“把它留下？”</p>
<p>“它待在这里很安全，等到傍晚你回到这里的时候，还能找到它。”</p>
<p>“如果我说不呢？”</p>
<p>“如果你坚持，你恐怕就不能和齐玛先生见面了。”</p>
<p>这个机器佣人肯定不会在这儿闲逛一下午等我做出回应。一想到要离开备忘录助手，我就浑身发凉，但是我实在太想采访齐玛了。</p>
<p>我让备忘录机器人待在这里，直到我回来。</p>
<p>这个小家伙迅速地飞走了，在空中划出一道泛着金属光泽的绿色闪电。看着它的离去，我感觉身体的一部分也跟着离开了。我坐了下来，座位上的玻璃罩把我整个人都罩了进去。我明显感到运输机正在加速前进。</p>
<p>我们下方的威尼斯变得倾斜，然后迅速地消失在地平线下。</p>
<p>我发出一个测试命令，询问备忘录机器人我是在哪个星球上庆祝自己的七百岁生日的。没有任何回应：我已经超出了它的监护范围。我只能依靠自身严重超龄的记忆，得不到任何帮助。</p>
<p>我向前倾了倾身子，询问机器佣人：“你能告诉我这究竟是怎么一回事吗？”</p>
<p>“不好意思，他没有告诉我。”机器佣人回答，它的头后面出现了一张脸，“但是如果你感觉不舒服，我们会立即把你送回威尼斯。”</p>
<p>“我现在感觉很好。谁还拿到了蓝色邀请卡？”</p>
<p>“据我所知，只有你一个。”</p>
<p>“如果我拒绝了呢？你是不是应该再找一个人？”</p>
<p>“不，”机器佣人回答，“不要再瞎猜了，让我们一起面对，克莱小姐。你肯定不会拒绝他的。”</p>
<p>在飞行途中，输送机在海面上激起阵阵波涛，留下了一道泡沫形成的路线。这就像是有人用一把刷子，在涂了颜料但是还没干的汉白玉上划了一道杠，把颜料下面的白底露了出来。我接受了齐玛的邀请，直奔前方的地平线。我心里一直在思考，齐玛的标志性蓝色究竟是接近天空的颜色，还是更接近大海的颜色。对比这两种颜色，我觉得邀请卡上的颜色让我眼前一亮。</p>
<p>齐玛蓝！这种颜色非常精确，从科学的角度分析，必须要测量它的光谱带宽和强度，才能把它分辨出来。</p>
<p>如果你是一个画家，你肯定会根据光谱带宽和强度混合出一系列颜色。但是没有人能混合出齐玛蓝，除非他们计算出了齐玛蓝的颜色参数。</p>
<p>齐玛刚刚进入公众视野的时候，就已经是独一无二的了。他的身体接受了最彻底的改造，即使不穿防护服，也能应付极端严酷的环境。从远处看，齐玛就是一个身材极好的男人，穿着紧身连体衣裤。只有走近看才会意识到，他根本没穿衣服，表面的那一层其实是他的皮肤。</p>
<p>他的整个身体被一种合成材料覆盖，这种合成材料会根据他的心情和周围的环境变换颜色和纹理。如果在社交场合，他的皮肤就会变成礼服。而且这种皮肤能够抵御巨大的压力，如果他想体验一下真空状态，这层皮肤会控制住他的自身压力，不会发生爆炸；如果他要到巨型气态行星上去游览一番，这层皮肤又能抵御住外部极强的挤压。他的皮肤不但刀枪不入，而且能将全方位的感知准确地传递给大脑。更厉害的是，他根本无需呼吸，因为他的整个心血管循环系统已经被封闭的自循环生命维持系统所取代。他无需吃喝，无需处理体内垃圾。纳米级的微型修复机器人遍布全身，使他能够忍受在几分钟内足以杀死一个普通人的辐射。</p>
<p>有了这身足以经受任何极端环境考验的无敌盔甲，齐玛能够到他想要去的任何地方吸取灵感，不管那里的环境有多恶劣。他能在星际空间自由翱翔，能钻进恒星的表面探索，或者到完全由灼热岩浆覆盖的行星游荡。他的眼睛被高性能的摄像头所取代，这种摄像头能够获取跨度极大的电磁频谱，远远超过了可见光的范围。这两个摄像头通过非常复杂的处理模块连接到他的大脑中。</p>
<p>他的大脑中还安装了一个神经突触混合桥接器，他可以把视频数据当成音乐来听，把交响乐当成某种奇妙的色彩来看。他的皮肤还具备天线的功能，能让他感知电场的变化。如果他觉得这样还不够，他可以把一定数量的机器互联起来，变成一个超级云计算系统，然后从中获取数据。</p>
<p>正因为浑身上下被如此强大的技术武装起来，齐玛的画作极具创造性，深深地吸引了人们的眼球，让所有人欲罢不能。他画风景地貌和星系的作品，品质都超乎想象，令人叹为观止。这些画作充满了光彩夺目的颜色，运用了高超的空间扭曲透视技巧。更让人惊叹的是，他的作品从来不用传统的绘画材料，都是那种面积极大的作品。这种画作很快吸引了一大群严谨的收藏家。齐玛的一小部分作品被他们买下变成私人藏品，而大部分作品都存在于公共星际空间中，横跨几十米。尽管画幅很大，但是所有的细节都清晰到视觉的极限。大部分的作品都是在极短的时间内完成的。齐玛不需要睡觉，他可以不间断地工作，直到整幅画作彻底完成。</p>
<p>不可否认，这些画作给人们留下了不可磨灭的印象。无论是从构图的角度还是从技法的角度来看，他们都是无可非议的杰作。但是，这些作品总让人感到一丝寒意，有时甚至让人不寒而栗，因为这些画作所画的风景地貌根本没有人见过，完全是从画家自己的视角里描绘出来的。</p>
<p>除了这一丝寒意，总体来说这些画还是相当棒的，但是我家里从来没有悬挂他的画作。</p>
<p>很显然，不是每个人都喜欢他的作品，而且齐玛也不可能把自己的画作都卖出去。但我还是忍不住想知道：究竟有多少人只是因为齐玛很有名才买了那些作品？又有多少人是真正懂得那些作品的内在价值而去收藏它们？</p>
<p>当我第一次注意到齐玛，我就有这样的疑问。我觉得他的画作矫揉造作，对他并不感兴趣:如果他或者他的画作发生了其他事情，我倒觉得值得写篇报道。</p>
<p>这样的事情居然发生了，但其他人——包括我在内——却是过了一段时间才注意到这件事。</p>
<p>有一次，齐玛花了比平时更长的时间创作一幅画。当他展示这幅画作的时候，人们发现这幅画作里出现了不同寻常的东西。这是一幅漩涡星云的作品，以一颗无空气的小行星作为观察点。在这颗小行星上某座火山口的边缘，有一个小小的蓝色正方形遮盖住了星云的一部分。乍一看，就像是齐玛先把整个画布用蓝色刷了一遍，然后在上面画星云的时候，故意留下这么一块正方形没有画。这个正方形是空心的，没有任何细节表明它和整个景观或者背景有什么联系。它没有投射阴影，跟周围的颜色之间没有任何渐变。但是，这个正方形肯定是经过深思熟虑才画上去的:因为通过近距离察看可以发现，它确实是用颜料在火山口的上方画出来的。这肯定具有某种深意。</p>
<p>而这个正方形只是开始。从此之后，齐玛向外界展示的所有画作上，都带有一个类似的几何图形。每幅画作的构图中都嵌入了一个正方形、三角形、椭圆形或者其他什么图形。过了很长一段时间，人们才发现每幅画上的几何图形所涂的蓝色都是完全一样的。</p>
<p>这就是齐玛蓝，和我收到的那张镶有金字的卡片上的蓝色完全一样。</p>
<p>又过了几十年，这种抽象的图形逐渐变成了他的主要作品，构图中的其他元素全部融入这种图形中。宇宙远景的尽头变成了一个狭窄的边框，再用几个空白的圆圈、三角形、长方形与之呼应起来。他的早期作品都是以丰富的笔触、浓墨重彩的多层铺垫为典型特征，如今却变成用光滑的镜面打底的蓝色图形。</p>
<p>很多买家被齐玛这种抽象的蓝色图形吓到了，逐渐远离了他。很快齐玛又推出了他的第一幅完全由单一蓝色构成的画作。这幅作品尺寸巨大，足以覆盖一座千层大楼的侧面。人们普遍认为齐玛已经江郎才尽，再也画不出精美的作品了。</p>
<p>但是，他们完全错了。</p>
<p>当我们靠近一个小岛时，我感觉到运输机在减速。</p>
<p>“你是第一个看到这个小岛的人。”机器佣人说，“岛的上空被一片扭曲的屏幕遮住了，从太空看是根本看不见这座岛的。”</p>
<p>这座小岛方圆一公里，海拔很低，整个外形有点像乌龟，周围被一片狭窄的白色沙滩环绕。岛的中心附近有一块高地，这块高地上所有的草木都被清理掉了，只留下一块近似矩形的空地。我观察发现这片空地上有一小块区域很平坦，而且反射出蓝光，周围似乎被一排分层布置的看台包围着。</p>
<p>运输机降低了高度，也减慢了速度，不断地上下起伏，直到慢慢停在那片被看台包围的区域外面。紧挨着停机坪的是一座由白色鹅卵石砌成的低矮小屋。</p>
<p>机器佣人先走下台阶，然后帮助我下了运输机。</p>
<p>“齐玛马上就到。”它说完又回到运输机上，运输机载着它迅速消失在天边。</p>
<p>突然间，我觉得自己很孤独，很脆弱。一阵海风吹过来，把沙子吹进了我的眼睛里。太阳逐渐西沉，直奔地平线而去。天气很快就会变冷。就在我开始有点恐慌的时候，一个男人钻出了小屋，轻快地搓了搓手。他沿着一条铺着石子的小路向我走来。</p>
<p>“很高兴你能来这里，凯莉。”</p>
<p>这位当然就是齐玛了。我刚刚还怀疑他不会露面，真是个愚蠢的想法。</p>
<p>“嗨。”我结结巴巴地说。</p>
<p>齐玛很有风度地伸出了他的手。我握着他的手，隐约能够感觉到他身上人造皮肤的纹理。今天他的皮肤呈银灰色。</p>
<p>“我们到阳台上坐坐。目睹夕阳的感觉真好，不是吗？”</p>
<p>“是的。”我答应道。</p>
<p>他转过身去，领着我走向小屋。跟着他走的时候，我能清晰地看到在他银灰色的皮肤下面肌肉不断隆起。他背部的皮肤上似乎有鳞片在闪光，估计是什么反射芯片。</p>
<p>他强壮得像头黑豹，而且身材好得像雕像。他其实长得挺帅，更不用说他能变出那么多花样，然而我从来没听说他跟谁谈过恋爱，甚至连这方面的绯闻都没有。艺术是他生命的全部。</p>
<p>我跟着他，感觉自己很笨拙。齐玛领着我走进了小屋，映入眼帘的是一间老式厨房和一间老式的休闲室，屋子里摆满了古老的家具和摆设，大概有上千年的历史了。</p>
<p>“一路飞来感觉怎么样？”</p>
<p>“很好。”</p>
<p>他突然停住了，看着我，“我都忘了检查了……我的机器佣人有没有强调不能携带备忘录助手？”</p>
<p>“有。”</p>
<p>“很好。我只想跟你这个人谈，凯莉，而不是什么录音设备。”</p>
<p>“我？”</p>
<p>他脸上戴的银灰色面具形成了一副滑稽的表情，“你就不能说句长一点儿的话吗？怎么回答都是一个字？”</p>
<p>“呃……”</p>
<p>“放松。”他说，“我让你到这儿来，不是要考验你，也不是要对你做其他事。我没有给你设圈套，你在这儿不会有任何危险。你今晚就能回到威尼斯。”</p>
<p>“我很好。”我说，“就是有点儿激动，就像追星族见到了偶像。”</p>
<p>“不必如此。我不可能是你见到的第一位社会名流吧？”</p>
<p>“当然不是了，只是……”</p>
<p>“人们觉得我很吓人，”他说，“但他们最终还是习惯了，然后想知道我这么小题大做究竟是为什么。”</p>
<p>“为什么选我？”</p>
<p>“因为你一直很友好地邀请我接受采访。”齐玛回答。</p>
<p>“别开玩笑了。”</p>
<p>“好吧，除了你很友好之外，也有一些其他原因。这些年我一直很喜欢你的报道。很多人都很信任你，特别是那些即将离开人世的人，因为你如实地记录了采访的内容，不带任何虚假的成分。”</p>
<p>“你找我来是谈退休的事，不是谈临终的事吧？”</p>
<p>“其实都一样，反正要从公众的视野里消失了。凯莉，我觉得你写的文章都很真实。我从来没发现有人说你写的文章歪曲事实。”</p>
<p>“我一直都是这样。”我说，“这就是为什么我总是带着备忘录助手的原因，这样就没人否认自己说过的话了。”</p>
<p>“带不带备忘录助手都不会影响你对我的报道。”齐玛说。</p>
<p>“肯定有其他原因，要不然你怎么会只选我一个？”</p>
<p>我警觉地看着他。</p>
<p>“我只想帮帮你。”他说。</p>
<p>人们常常谈起齐玛的蓝色时代，是指他创作巨幅画作的时代。说巨幅可不是吹的。他创作的画作尺寸特别大，大得足以覆盖庞大的建筑物和市民广场，甚至从外太空轨道上都能看到。放眼整个银河系，居然还有二十公里高的蓝色画卷。这些画一般建在私人的海岛上，像塔一样直插云霄；有的甚至直接放在暴风雨肆虐的大海上。创作这些画作的经费从来都不是问题，因为齐玛身边有一大堆赞助商，争先恐后地抢夺作品的赞助权。齐玛创作的巨幅画作越来越大，后来居然需要用很复杂的高科技机械设备来固定画作，防止画作因为重力或者天气原因而损坏。这些巨型机械设备穿过了所在行星的大气层，一直延伸到外太空，自身还发出微弱的光。画作被弯曲成一定角度，让那些狂热的艺术爱好者在外太空就能看到，他们会发现整个视野都被蓝色占据。</p>
<p>齐玛实在是太出名了，就连对艺术毫无兴趣的人都知道他的名字。他是一个创造巨幅蓝色画作的古怪机械人，是从来明说或者暗示自己艺术作品内涵的画家。</p>
<p>但那已经是几百年前的事了，齐玛越来越能折腾，后来连行星都无法容纳他那笨重的巨型画作。于是，齐玛干脆搬到星际空间里，锻造出方圆几万公里的蓝色画卷。这些画卷可以在太空中自由飘浮。而且他不再用画笔和颜料了，而是雇佣采矿机器人舰队，将小行星炸碎，把碎片作为原料来作画。赞助商的财力已经远远不够了，反而是各个恒星系经济体开始争夺齐玛作品的展览权。</p>
<p>也就是这个时候，我重新对齐玛有了兴趣。我出席了他的一个“月亮包裹”项目的新闻发布会，该项目计划给整个星球建造外壳，形成一个有盖子的蓝色容器，就像是一颗球放进盒子里。两个月之后，他在行星的整个赤道带释放了大量蓝色气体，当时我也在场。六个月后，他在一颗掠日彗星的表面增加了某种蓝色的化学物质，如此一来，这颗彗星就能拖着齐玛蓝的尾巴跨越整个太阳系。但我不认为自己应该在这些新闻上大做文章。我一次次地邀请他接受采访，但是一次次地被回绝。我所知道的就是齐玛对蓝色的痴迷已经超过了艺术创作本身。但是如果不能彻底理解他的这种痴迷，就不能写出真正有意义的报道，顶多是奇闻轶事。</p>
<p>而我从来不写奇闻轶事。</p>
<p>我一直在等待，当然还有几百万个同行也一直在等待。所以一听说齐玛的最后一件作品将在穆尔耶克星球的威尼斯揭幕，我就马不停蹄地赶了过来。我并不奢望能够采访到他，或者对他的作品有什么新的见解。我只是觉得自己必须到场，亲眼见证。</p>
<p>我们走上楼梯，穿过滑动玻璃门，来到了阳台。阳台上有一张白色的桌子，两侧各放了一把椅子。桌上还放了几瓶酒和一盘水果。在这个没有栏杆的阳台上极目远眺，只能看到一望无垠的大海，与天相接。海面上风平浪静，在夕阳余晖的照耀下，整个海面就像是一枚银币。</p>
<p>齐玛示意我坐下，他手里拿着两瓶葡萄酒，不停地晃悠。</p>
<p>“红葡萄酒还是白葡萄酒，凯莉？”</p>
<p>我张开嘴想要回答，可是什么都说不出来。通常情况下，在别人提问之后、我回答之前的一瞬间，备忘录助手会默默帮我做出选择。没有备忘录助手的提示，我感到自己的思维停顿了。</p>
<p>“我猜是红葡萄酒，”齐玛说，“除非你强烈反对。”</p>
<p>“我能自己决定这些事情。”我说。</p>
<p>“当然。”齐玛给我倒了一杯红酒，然后举起杯子对着天空，看看红酒的品质。</p>
<p>“我只是觉得有点奇怪。”我补充道。</p>
<p>“你不应该有这样奇怪的感觉。”他说，“几百年前，我们的生活方式不就是这样的吗？”</p>
<p>“你的意思是，这其实是一种很自然的方式？”</p>
<p>“是的。”齐玛给自己倒了一杯红酒，当然他不会喝的，只是闻了闻酒香。</p>
<p>“可是我已经活了一千年，这本身就不自然啊。”我说，“我的机体记忆在七百年前就已经到了饱和点，我的脑袋就像一个放了太多家具的房子，想搬进去一些东西，就必须先把一些东西搬出来。”</p>
<p>“我们还是先回到酒的问题上。”齐玛说，“通常情况下，你必须依赖备忘录助手的建议，对不对？”</p>
<p>“是的。”我耸耸肩。</p>
<p>“备忘录助手是不是总是选择两种可能性中的一种？比如说总是选红葡萄酒，或者总是选白葡萄酒？”</p>
<p>“没那么简单。”我说，“如果我对其中一种酒的偏好更强烈，那么备忘录助手肯定会一直向我推荐这种酒。但是我对葡萄酒并没有偏好。有时我喜欢红葡萄酒，有时我又喜欢白葡萄酒。还有的时候，两种酒我都不想要。”我希望自己的挫败感不要那么明显。除了谈谈蓝色卡片、雇佣机器人以及运输机这一系列精心策划的谜语，我最不想谈的就是我自己并不完整的记忆。</p>
<p>“那么就是随机选择喽？”他问道，“备忘录助手会不会就这么随便选择红葡萄酒或者白葡萄酒呢？”</p>
<p>“不是，也不是这样的。备忘录助手已经跟了我几百年了。它已经看见我在成千上万种不同的场合，喝了成千上万次葡萄酒。它会根据最高的可靠程度，给出一系列参数，然后计算出什么才是我最好的选择。”</p>
<p>“然后你会无条件接受它的建议？”</p>
<p>我啜了一口红酒，“当然。如果只是为了表明自己具有自由意志，而去违背它的建议，这样做是不是有点太孩子气了？不管怎么说，根据它的建议进行选择，更能让我感到满意。”</p>
<p>“但是这样的话，你的整个人生不就成了一系列可以预见的反馈吗？除非你忽略它的建议。”</p>
<p>“也许是吧。”我说，“但也没那么糟糕吧？只要我开心，我才不管呢。”</p>
<p>“我不是有意为难你。”齐玛说。他微笑着把身体靠在椅背上。在质问了我一系列问题之后，他想缓和一下紧张的气氛。“现在拥有备忘录助手的人也不是很多吧？”</p>
<p>“不清楚。应该不超过整个银河系人口的百分之一吧。”</p>
<p>齐玛又闻了闻他的葡萄酒，透过玻璃杯看着天空，“外面几乎每一个人都认为，接受备忘录助手是不可避免的趋势。”</p>
<p>“让机器管理一千年的记忆，有何不可？”我反问道。</p>
<p>“但是还有另外一种机器，”齐玛说，“神经移植，完全整合进参与者的自我感觉，和生物性记忆融为一体，无法分辨。你不需要询问备忘录助手如何选择酒，你也不需要等待确认的提示。”</p>
<p>“这两种有何区别？我允许自己的经历被机器记录。这台机器从来没有遗漏任何事情，而且它回复我的查询是如此高效，以至于现在几乎每件事我都要问它。”</p>
<p>“机器很容易损坏。”</p>
<p>“它每隔一段时间就会备份数据。而且它总不会比我脑袋里的一大堆神经移植模块更容易损坏吧？对不起冒犯了你，但是‘机器容易损坏’这个反对的理由实在不合理。”</p>
<p>“你是对的。但是对于备忘录助手，人们有更深层次的争论。它太完美了。它不知道如何失真或者忘却。”</p>
<p>“它不就应该这样吗？”</p>
<p>“不对！当你在几百年后用自己的头脑回忆起我和你的这段对话，肯定有一些细节会记错。而这些记错的部分也会成为你记忆中的一部分，记错的每个细节会逐渐强化成回忆。一千年之后，你对这段对话的回忆可能跟真实情况大相径庭。那时你肯定会发誓，你的回忆是准确的。”</p>
<p>“如果有备忘录助手陪在我身边，我就能事无巨细地把一切完整地记录下来。”</p>
<p>“没错，”齐玛说，“但那不是活生生的记忆。那只是一个机械记忆的过程。整个记忆里缺乏想象，没有给选择性的遗忘留下任何余地。”他又给我满上一杯酒，“想象一下，像今天下午这样的场合，你因为某个原因坐在外面，你必须决定是选择红葡萄酒还是白葡萄酒，且不能后悔自己的选择。但是就这么一次，不管出于什么原因，你被人说服去选择白葡萄酒——正好违背了备忘录助手的判断——而且喝了之后你还感觉很好。每件事都被奇妙地组合在一起：这段谈话、夕阳西下的氛围、壮丽的风景、微醺的快感。一个完美的下午逐渐变成了完美的傍晚。”</p>
<p>“这跟我选择什么酒没多少关系吧。”我说。</p>
<p>“确实没有。”齐玛赞同道，“备忘录助手肯定不会把这样一个令人开心的阴差阳错当成是一种特例。这样一个小小的偏差并不会对它的预测模型产生任何影响。下次，它还是会让你选择红葡萄酒。”</p>
<p>我突然感到内心一阵刺痛，非常不舒服，“可人类的记忆并不是那样工作的。”</p>
<p>“没错，人类的记忆会牢记这个例外，并且标记上重要意义。它会放大今天下午记忆中吸引人的部分，抑制住不开心的部分——苍蝇一直在你脸周围嗡嗡叫、你在搭船回家时的焦虑心情。你所记住的是金色光辉照耀下的安宁。下一次，你可以随便选择白葡萄酒还是红葡萄酒。以后都随你选。整个行为模式都会因为这个细小的偏差而改变。当然备忘录助手绝不会容忍那样的事发生。你只有违背它的建议很多次，它才会非常吝啬地更新它的数据模型，然后它才会开始建议你选择白葡萄酒。”</p>
<p>“没错。”我说。其实我希望齐玛能多谈谈他自己，而不是我，“移植的人工记忆与外部的人工记忆究竟有多少实际的区别？”</p>
<p>“简直是天壤之别。”齐玛说，“存储在备忘录助手里的记忆会被永久地记住。不管你询问它多少次，它都不会歪曲或者忽略每一个细节。但是移植的人工记忆不一样。他们被无缝地整合进生物记忆，移植了人工记忆的人根本区分不了哪些是人工记忆、哪些是生物记忆。正是因为这个原因，移植的人工记忆具备必要的可塑性、易变性，会产生错误和失真。</p>
<p>“但是没有易变性就没有艺术，没有艺术就没有事实。”齐玛继续说道。</p>
<p>“易变性指引事实？这个说法真不错。”我感觉很意外。</p>
<p>“我所说的事实是指更高层次的、比喻意义上的事实。那个金色的下午？那确实是事实。你所记住的苍蝇不会附加任何物质上的意义。它会被提取出来从记忆中分离。”</p>
<p>“没有下午就没有苍蝇。”我说。最终我的忍耐度已经到达了极限，很快就要爆发。“我很感激你能邀请我到这儿来，但我不是来听你给我讲如何选择人工记忆的。我觉得总该谈点其他事情吧。”</p>
<p>“实际上我要跟你谈的内容最终都会归结到这一点上。不仅关系到我，而且关系到你。”他放下玻璃杯，“我们去散散步，好吗？我要带你去看看游泳池。”</p>
<p>“太阳已经下山了。”我说。</p>
<p>齐玛笑着说：“太阳总会升起的。”</p>
<p>他带着我从另外一条路线穿过了屋子，从另一扇门出去。在两堵白色石头砌成的墙之间，一条崎岖的山路慢慢爬上山坡，整条路都沐浴在金色的余晖中。不一会儿，我们就来到了那块平整的高地，就是乘坐运输机过来时看到的高地。这里还真被看台围绕着：三十米高的阶梯状结构，看台后面有楼梯直通各层。齐玛带着我走进看台下方的阴影处，然后穿过一个私人入口，进入了那块封闭的区域。我来时看见的那块蓝色区域，实际上是一个不太大的长方形游泳池，里面的水被排干了。</p>
<p>齐玛领着我来到游泳池的边缘。</p>
<p>“一个游泳池。”我说，“你不会开玩笑吧。建这么多看台就是为了这个游泳池？”</p>
<p>“这就是揭幕式举办的地方。”齐玛说，“我将在这里揭开我的最后一件作品，然后退休。”</p>
<p>游泳池还没有全部建成。在远处的角落里，一个小型的黄色机器人还在那里砌瓷砖。靠近我们这边的部分已经砌好了，但我还是发现有些地方的瓷砖有破损或者裂痕。夕阳的余晖有些暗淡，我看不清自己是不是在阴影中，但是那些瓷砖的颜色看上去跟齐玛蓝非常接近。</p>
<p>“跟那些能占据整个星球的画作相比，这里的档次太低了吧？”我问道。</p>
<p>“对我来说不是这样。”齐玛说，“对我来说，这里是探索结束的地方。这里也是一切开始的地方。”</p>
<p>“一个寒碜的游泳池？”</p>
<p>“这不仅仅是一个古老的游泳池。”他说。</p>
<p>他和我一起绕着小岛散步。太阳即将沉入大海，一切颜色都变得苍白。</p>
<p>“过去，我的灵感来源于心灵。”齐玛说，“我之所以画出那么大规模的作品，是因为那是主题的需要。”</p>
<p>“画得非常棒。”我说。</p>
<p>“那只能算是体力活。巨大、花哨、流行，但根本没有灵魂。就是因为这些画的灵感来源于心灵，所以画得并不好。”</p>
<p>我什么都没说。其实我一直都觉得他的作品就是这样：壮丽但缺乏人性，而且齐玛身体上的机械化改造必然给他的作品带来某种独特性。就像人们只是因为某件作品是某人用嘴咬着笔画的而赞扬它。齐玛的画之所以被人赞扬，仅仅因为他并不是一个“正常人”。</p>
<p>“我的作品并不能告诉人们宇宙的某种讯息，因为宇宙本身并不会透露任何讯息。更重要的是，我的作品也不会透露任何关于我的情况。这些画跟我能在真空中走、在液氮海洋里游泳有什么关系？跟我能够看见紫外线、感知电磁场又有什么关系？在我身上实施的改造是极端残忍的。这些改造不能给我带来任何东西，就好比一台远程观测无人机并不能变成艺术家。”</p>
<p>“我觉得你对自己是不是有点太苛刻了？”</p>
<p>“不。我这样说，是因为我知道自己曾经创造出一些有价值的事物，但它的发生是我完全预料不到的。”</p>
<p>“你指的是齐玛蓝？”</p>
<p>“对，”他点点头说，“它的出现是个意外——在一幅差不多完成的画布上用错了颜色。这种颜色介于宝石蓝与墨绿色之间。然而这块污点似乎是带了电的，我感觉自己的大脑瞬间短路了，激起了某种强烈、原始的记忆。我有一种感觉：这种颜色曾经是我生命中最重要的东西。”</p>
<p>“那是一种什么样的记忆？”</p>
<p>“我不知道。我感觉到的就是这种颜色在跟我说话，好像我花了整整一辈子的时间才找到它，把它解放出来。”他想了一会儿，继续说道，“这种蓝色肯定代表着某种事物。一千年前，伊夫·克莱因曾经说过，蓝色是颜色中的精华，能够代表其他所有颜色。他就是这样一个人，花费了整整一生去寻找童年记忆中那抹独特的蓝色。后来，他绝望了，觉得根本就找不到这样的蓝色。如此精确的色调肯定是他自己想象出来的，自然界中可能并不存在这样的颜色。然而某一天，他却偶然地发现了它。那是自然历史博物馆里一个甲壳虫标本的颜色。他喜极而泣。”</p>
<p>“那你的齐玛蓝呢？”我问，“也是甲壳虫的颜色？”</p>
<p>“不，”他说，“不是甲壳虫的颜色。但是我必须知道答案，不管付出什么样的代价。我必须要知道为什么这种蓝色对我有这么重要的意义，为什么它会控制了我的艺术创作。”</p>
<p>“你允许它控制自己？”我说。</p>
<p>“我没有选择的余地。随着这种蓝色在我心中变得越来越强烈、越来越占优势，我感到自己越来越接近答案了。我觉得只有把自己沉浸到这种颜色中，才能发现我渴望知道的所有事。作为一个艺术家，我必须真正了解我自己。”</p>
<p>“那你了解了吗？”</p>
<p>“我了解我自己，”齐玛说，“但不是我预计的那样。”</p>
<p>“你发现了什么？”</p>
<p>等了很长一段时间，齐玛才慢慢回答。我们继续慢慢地向前走，我略微落在他的身后。天气开始变凉，我真希望自己能带一件大衣。我考虑向齐玛借一件大衣，但我必须要专注，不能脱离齐玛的思路，不然都不知道是从哪儿开头的。闭上嘴永远都是工作中最艰难的部分。</p>
<p>“我们刚刚谈过记忆的易错性。”他说。</p>
<p>“是的。”</p>
<p>“我自己的记忆并不完整。移植了人工记忆之后的每件事我都记得，但这段时间只是我人生中最近的三百年。我知道自己肯定不止三百岁，但是移植之前的人生，我只记得一些片段。我不知道如何才能把这些破碎的记忆重新组合起来。”他慢慢地转过身，地平线上最后一缕橙色的余晖照在他脸上，“我知道自己必须深入挖掘那段过去，才能真正理解齐玛蓝的特殊意义。”</p>
<p>“那你挖掘到什么程度了？”</p>
<p>“就像是考古一样，”他说，“我必须从记忆中最早的可靠事件中寻找线索，就是在我植入了人工记忆之后的短暂时间内发生的事情。我的记忆回到了哈尔科夫8号星球，那是位于格尔林湾星区的一颗行星，距离这里有一万九千光年。那里我唯一记得的，是一个我认识的男人的名字——科巴哥。”</p>
<p>科巴哥我没听说过，但格尔林湾我还是知道的，不用查询备忘录助手都知道。那是银河系里一片拥有六百个可居住行星系、由三大经济势力掌控的星域。在格尔林湾，正规的星际法律完全不适用。那里完全是亡命之徒的领地。</p>
<p>“哈尔科夫8号星球专门提供一种产品，是其他地方根本得不到的私人医疗服务——非法神经机械改造。”</p>
<p>“那里就是你……”我没敢继续说。</p>
<p>“对，在那里我变成了现在这个样子。当然，离开哈尔科夫8号星球之后，我进一步强化了身体——增强自己对极端环境的适应性，提高自己的各种感知能力——但我的内在部分就是躺在科巴哥诊所的手术台上完成的。”</p>
<p>“所以你在到哈尔科夫8号星球之前，是个普通人？”我问。</p>
<p>“这个问题正是最难搞清楚的部分。回到哈尔科夫8号星球，我自然想找到科巴哥。只有得到他的帮助，我才能把头脑里的那些记忆碎片整合起来。可惜科巴哥已经离开，到格尔林湾的其他地方隐居起来了。那个诊所还在，只不过现在是他的孙子在经营。”</p>
<p>“他肯定没有告诉你详情。”</p>
<p>“没错，他劝我还是不要知道的好。很庆幸，我还是有点手段的，威逼利诱。”说到这里，他微微一笑，“最终他同意打开诊所的历史记录，查看当年他爷爷接见我的记录。”</p>
<p>我们拐了一个弯。天空和大海现在已经变成了一片无法分辨的灰色，没有一丝蓝色的踪影。</p>
<p>“后来发生了什么事？”</p>
<p>“记录表明，我从来就不是一个真正的人。”齐玛说。他停顿了一下，对自己说的话没有任何怀疑，“在我到达诊所之前，齐玛根本不存在。”</p>
<p>这时我恨不得赶紧找回备忘录助手，哪怕身边有古老的笔和本子也好。可惜除了我自己的记忆，什么都用不了。我皱了皱眉头，希望能让自己的记忆更努力地工作。</p>
<p>“那你是什么呢？”</p>
<p>“一台机器，一个很复杂的机器人，具有自主智能的机器。到达哈尔科夫8号星球的时候，我已经几百岁了，但是完全具备合法的独立性。”</p>
<p>“不会吧。”我摇了摇头，“你顶多就是个装有机器零件的人，怎么可能是机器呢？”</p>
<p>“诊所里的记录非常清晰。我来到诊所的时候就是个机器人，一个具有男性外表的机器人。我被彻底拆散，我的核心认知功能被整合进了一个快速生长的生物宿主体内。”他用一根手指敲了敲自己的脑壳，“这里面有大量的有机材料，也有大量的神经机械系统。里面错综复杂，搞不清从哪里开始，到哪里结束；甚至搞不清哪个是主机系统，哪个是辅助系统。”</p>
<p>我看着这个站在我旁边的躯体，自己的思维开始跳跃：不能再把他当成人了，只能把他当做机器——</p>
<p>一台由细胞组成的柔软的机器。可我做不到，一下子接受这些很难。</p>
<p>我停下了脚步，“诊所有可能骗你的呀。”</p>
<p>“我不这么认为。不让我知道这件事，他们会更开心。”</p>
<p>“就算这样，”我说，“总得有证据……”</p>
<p>“那些就是事实，很容易证实。我检查了哈尔科夫8号星球海关出入境记录，发现在做手术的几个月前，有一个具备自主独立性的机器人进入了星球的大气层。”</p>
<p>“不一定就是你啊。”</p>
<p>“在这前后几十年，并没有其他机器人靠近这个星球。所以那个机器人就是我，而且记录上还显示了这个机器人的始发港。”</p>
<p>“始发港在哪里？”</p>
<p>“格尔林湾之外的一个星球，河口群岛星区的临潭3号。”</p>
<p>备忘录助手不在身边，就像是吃饭没了牙齿。“我都不知道自己是否知道那里。”我说。</p>
<p>“你大概不知道。你基本上不可能拜访这样的星球。根本没有光速飞船的航班到那里。我到那里唯一的目的就是……”</p>
<p>“你去过那里？”</p>
<p>“两次。一次是在哈尔科夫8号星球做手术之前，最近又去了一次，去搞清楚第一次去临潭3号星球之前我在哪里。各种线索变得越来越模糊。我问了无数次同样的问题，在各种数据库里查询同样的数据，最后我才知道自己来自哪里。但那依然不是最终答案。我去过太多的星球，其中的先后关系很难理顺。可是我一直没有放弃。”</p>
<p>“也一直在花钱吧？”</p>
<p>“没错，还有钱。”他礼貌地点了点头，“花了无数的钱。”</p>
<p>“最终你发现了什么？”</p>
<p>“我跟踪线索一直回到了原点。到达哈尔科夫8号星球的时候，我已经具备了与人类同等的智力，能够快速思考。但我并不是一直都这么聪明、这么复杂。只要时间和环境允许，我的智能就会逐步增强。”</p>
<p>“自己增强自己？”</p>
<p>“后来是这样的。那是我具备了自主意识和法律独立性之后的事。不过要想获得自由，我也必须具备一定的智力。在这之前，我只是一台单纯的机器……类似于传家宝或者宠物。我被我的主人代代相传。他们不断给我增加新的东西，让我变得越来越聪明。”</p>
<p>“那你究竟是怎么开始的？”</p>
<p>“开始于一个项目。”他回答。</p>
<p>齐玛带着我回到了游泳池。靠近赤道地区的夜晚来得很快，游泳池被看台上方的一排排人工灯光照得光彩夺目。刚才我们看见的机器人已经把最后一块地方的瓷砖都贴好了。</p>
<p>“游泳池已经准备好了。”齐玛说，“明天它就会被封闭起来，后天它就会注满水。我会一直循环里面的水，直到游泳池足够清澈。”</p>
<p>“然后呢？”</p>
<p>“我会准备好我的表演。”</p>
<p>在回游泳池的路上，齐玛把他的身世完完整整地告诉了我，只要是他知道的。在我出生之前，齐玛就已经存在于地球上了。他是由一个业余的机器人爱好者组装起来的，这个很有才能的年轻人对实用机器人技术特别感兴趣。在那些科技并不发达的岁月里，有很多团队或者个人在黑暗中摸索人工智能这一世纪难题。这个年轻人就是其中的一个。</p>
<p>感知、导航、自主解决问题的能力是这个年轻人最感兴趣的三个课题。他利用废旧的工具箱、玩具、零件组装了很多机器人。这些机器人的头脑——其实根本算不上什么头脑——是在废旧的电脑上运行简单程序，它们的记忆和处理速度实在有限。</p>
<p>年轻人的屋子里堆满了这些简单的元件，一有时间，他就开始捣鼓机器人。其中一个机器人是一只长了八条黏性长腿的“蜘蛛”，能够在他屋子里的墙上爬来爬去，清扫相框里的灰尘。“蜘蛛”的另外一项功能就是抓苍蝇和蟑螂。它会把抓到的害虫全部消化，把消化产生的化学能作为自己的能源，驱动自己爬向屋子的其他地方。另外一个机器人用于给墙壁刷漆，它会根据季节的变换改变墙壁的颜色。</p>
<p>还有一个机器人住在他的游泳池里。</p>
<p>它在游泳池贴满瓷砖的池壁上爬上爬下，不停地清洁这些瓷砖。这个年轻人完全可以通过邮购公司买一个便宜的游泳池清洁机，但是他觉得自己设计一个这样的机器人更有趣。他根据自己新奇的设计思路，从草图开始亲自制作这个机器人。它给这个机器人装上了全彩视觉系统，使其能够和周围环境融为一体，并且给它配备了足够先进的“大脑”，对视觉数据进行处理，输入它的环境数据模型。他允许这个机器人自己决定清洁游泳池的最佳策略。他还允许机器人自己选择什么时候清洁游泳池、什么时候通过它背部的太阳能电池进行充电。他在这个机器人身上灌输了原始的奖励观念。</p>
<p>制作这个游泳池清洁机器人的过程中，年轻人掌握了大量的机器人设计技术原理。他运用这些原理，制作出了一系列家用机器人，直到其中一个机器人——</p>
<p>一个简单的家庭清洁机器人——变得十分强健，而且具有自主意识。这个年轻人后来开了一家邮购公司，把这种机器人作为一种工具出售。机器人卖得很火。一年之后，年轻人又推出了预装配的家用机器人。这种机器人取得了巨大的成功，年轻人的公司逐渐成为家用机器人市场的领先者。</p>
<p>在接下来的十年内，整个世界到处都有这些聪明热心的机器人的身影。</p>
<p>但是，那个年轻人从来都没有忘记当年那个小小的游泳池清洁机器人。他把这个清洁机器人作为试验机，一次又一次地给他增加新的软硬件。清洁机器人一直是他所有发明中最聪明的一个，也是唯一</p>
<p>一个没有被遗弃或者淘汰的机器人。</p>
<p>当他去世的时候，他把游泳池清洁机器人传给了他的女儿。他的女儿继承了父亲的事业，继续提高这个小机器人的智力。当她去世的时候，年轻人的外孙继续传承家族的传统。这个时候外孙已经住到火星上了。</p>
<p>“如果你还没猜到的话，我来告诉你，这就是当初那个游泳池，我把它搬到了这里。”齐玛说。</p>
<p>“始终都没有变?”我问道。</p>
<p>“游泳池非常古老，但是瓷砖经受住了岁月的考验。寻找游泳池的过程中，最困难的工作就是找到它最初的地方。我不得不挖掉了两米深的表层土壤，才把它挖掘出来。它所在的地方曾经有一个响当当的名字——硅谷。”</p>
<p>“这些瓷砖都配上了齐玛蓝。”我说。</p>
<p>“其实齐玛蓝就是这些瓷砖的颜色。”他很有礼貌地更正道，“齐玛蓝就是当初年轻人家里的游泳池瓷砖的颜色。”</p>
<p>“也是你记忆中最深刻的一部分。”</p>
<p>“这就是我诞生的地方。我就是当年那个智力只够让自己绕着游泳池转的小机器人。但这个游泳池才是我的世界。它是我知道的一切，也是我唯一要知道的一切。”</p>
<p>“那么现在呢？”我问道。其实我很害怕这个问题的答案。</p>
<p>“现在我要回家。”</p>
<p>那一天看台上座无虚席，大家都来看齐玛最后的表演。小岛上空挤满了悬停的飞船。遮盖在小岛上的曲面屏幕已经关闭，连飞船上的看台都挤满了成千上万远道而来的人。他们站在飞船上就能看到游泳池，游泳池里的水像镜子一样平静、像杜松子酒一样清澈。他们看到齐玛站在游泳池的边缘，背上装满了像鳞片一样的太阳能电池板。没有人知道将会发生什么事，也没有人明白齐玛的举动究竟有什么意义。他们期待在这个揭幕式上，齐玛会展出他所有作品中的王牌，然而现在他们只能迷惑地盯着游泳池。跟齐玛那些大气磅礴的巨幅画作相比，这个小小的游泳池根本就不合格。他们一直在想，这个游泳池肯定是个障眼法。真正的作品——真正预示他退休的作品——一定在其他什么地方，只是现在还看不到而已。</p>
<p>这是他们的想法。</p>
<p>只有我知道真相。当齐玛站在游泳池边缘，被羁绊了他一生的蓝色包围着的时候，只有我知道真相。他已经告诉了我接下来要发生的事情：他大脑中的高级功能将被慢慢地、有条不紊地关闭。关键是整个过程是不可逆转的，他根本没给自己留下后悔的余地。</p>
<p>他大脑中只有一小部分还会继续工作：一个只能识别自身存在的微小内核。这个内核只够他认知周围的环境、执行特定的任务，哪怕这个任务毫无意义。他永远都不需要离开游泳池了。太阳能电板给他提供了足够的能量。他不会变老，也不会生病。其他的机器人会照看他的小岛，保护这个游泳池，确保这个沉默而缓慢的游泳者不会受到天气和时间的破坏。</p>
<p>这一切会持续几个世纪，几千年，然后是几百万年。</p>
<p>几百万年以后会变成什么样子？谁都说不准。但有一件事我可以确定，齐玛永远不会厌倦他的任务。在他的心中已经没有了厌倦的概念。</p>
<p>如果他在游泳池里游泳的时候体会到了某种快乐，那只能是一种几乎没有思维的快乐，就像是蜜蜂或者蝴蝶的快乐。但是对他来说，这样的快乐已经足够。对于当初在加尼福利亚那个游泳池里的他来说已经足够，对于一千年后在同一个游泳池里的他来说也已经足够。只不过这个游泳池已经搬到了银河系中另外一个遥远的世界，这个世界绕着另外一个太阳转动。</p>
<p>对我来说也足够了……</p>
<p>这样的快乐让我记住了更多关于我们在岛上见面的情景。不管你信不信，我已经不需要备忘录助手这样的心灵拐杖了，这跟我以前想象的完全不一样。齐玛是对的：备忘录助手把我的生活变成了编写好的剧本，就像是一张设计好的图纸。在夕阳西下的时候，它总是让我选择红葡萄酒，从来不选白葡萄酒。在搭乘光速飞船离开穆尔耶克星球时，我已经到诊所里植入了一系列神经记忆扩展模块。这些模块应该能用上四五百年。总有一天我将需要另一种解决方案，但我一定要穿过那个独特的助记桥。在彻底放弃我的备忘录助手之前，我做的最后一件事就是把它的观察数据传输进我扩展以后的记忆中。我依然觉得它记录的所有事情似乎并没有在我身上发生过，但是每次回忆起来，这些记忆都比其他的更清晰。它们发生了改变，变得柔和，而且精彩的地方变得更加闪耀。我估计这些记忆中的每个细节已经没那么准确，但是就像齐玛说的那样——也许这就是关键。</p>
<p>我现在明白了他为什么接受我采访。不仅仅是因为我写人物传记的方式他很喜欢，而且他希望能够帮助某个人向前进，不要像他一样。</p>
<p>我最终还是记起了那家报社的名字，写好了有关齐玛的传记，并且把传记卖给了这家报社——《火星纪事》。回到过去待过的星球感觉真好，尤其是现在火星已经被人们迁移进了更温暖的轨道。</p>
<p>事情已经过去很长时间了，但我总觉得齐玛的事情还没完。</p>
<p>每过几十年，我都会登上开往穆尔耶克的光速飞船，走进那座闪闪发光的威尼斯，乘坐运输机来到小岛上，和其他一些顽固的目击者一起坐在看台上。这些人和我一样，依然认为这位艺术大师会留下什么东西，给人们最后的惊喜。他们都读过我写的报道，大部分人都读过，所以他们知道那个慢慢游弋的躯体意味着什么……可人们还是不会成群结队地来。所以即使在极好的天气里，看台上也总是有点空旷和凄凉。但我从来没看见这些看台完全空过，我觉得这是某种神圣的誓约。一些人愿意接受这个誓约，但是大部分人永远都不会接受。</p>
<p>而这就是艺术。</p>
<img data-src="/2019/03/22/zima-blue/Zima-Blue.jpg" class="" title="Zima-Blue.jpg">
]]></content>
      <categories>
        <category>科幻</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Love Death &amp;amp; Robots</tag>
        <tag>Zima Blue</tag>
        <tag>爱，死亡和机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Green 和 Lime</title>
    <url>/2019/01/03/web-colors/</url>
    <content><![CDATA[<p>在 HTML 中，部分颜色可以使用颜色名来代替，比起代码会更好理解，例如 Aqua（<code>#00FFFF</code>）、Maroon（<code>#800000</code>）、Pink（<code>#FFC0CB</code>）等等。</p>
<a id="more"></a>

<p>比较的特殊的就是三原色了：Red、Green、Blue。</p>
<p>当你在代码中使用这三个颜色的时候，你会发现 Red 和 Blue 都是很理所当然的 <code>#FF0000</code> 和 <code>#0000FF</code>，但 Green 却不是 <code>#00FF00</code> 而是奇怪的 <code>#008000</code>。</p>
<p>事实上，真正的正绿色（<code>#00FF00</code>）的颜色名则是 Lime，Green 所代表的绿色看起来更加符合视觉效果里的绿色，而 Lime 则是计算机所认为的正绿色。</p>
]]></content>
      <categories>
        <category>趣闻</category>
      </categories>
  </entry>
  <entry>
    <title>使用枚举和按位运算来控制用户权限</title>
    <url>/2018/12/07/use-enumeration-and-bitwise-operations-to-control-user-permissions/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>公司重构系统，我被分配到了用户管理模块，在做到权限的时候发现之前的权限管理是用一个长的字符串来存储所有权限的，例如：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5101110</span><br><span class="line">ABCDEFG</span><br></pre></td></tr></table></figure>

<p>上面的 <code>7</code> 位数字分别对应下面的 <code>7</code> 个权限，除了第一位为权限等级（分为 1 至 5 档）外，其他的都是是否拥有该权限的状态（1 代表拥有该权限，0 代表没有该权限）。 这样的做法虽然看似简单，但在代码编写中会麻烦很多，特别是当权限种类数量很多的时候。所以，在查阅资料后，我决定<strong>使用枚举和按位运算来控制用户权限</strong>（点题），在向 leader 请示后，开始改造。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先要把原有的权限拆分为两部分，一部分是第一位的权限等级，另一部分是各个权限状态，需要改造的主要是各个权限状态。 为了简化步骤，我把权限数量缩小为 <code>6</code> 个，实际有 <code>15</code> 个（并且未来还可能增加），具体是这样的： 一个六个权限，分别用 0 和 1 来表示<strong>有</strong>或<strong>没有</strong>对应的权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17</span><br><span class="line"></span><br><span class="line">FEDCBA</span><br><span class="line">010001B</span><br></pre></td></tr></table></figure>

<p>如上，代表用户拥有 <code>A</code> 权限和 <code>E</code> 权限，同理可得如果有 一个用户拥有 <code>B</code> 权限、<code>C</code> 权限和 <code>D</code> 权限，那我们就可以这样计算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 | 4 | 8 &#x3D; 14</span><br><span class="line"></span><br><span class="line">  000010B</span><br><span class="line">  000100B</span><br><span class="line">| 001000B</span><br><span class="line">---------</span><br><span class="line">  001110B</span><br></pre></td></tr></table></figure>

<p>然后我们就可以用 <code>001110</code> 来代表用户所拥有的权限了。 当我们需要<strong>添加权限</strong>的时候，我们就可以用<strong>按位或</strong>（<code>|</code>）来计算，比如我们要为上面的 <code>001110B</code> 来添加一个 F 权限（<code>100000B</code>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">001110B | 100000B &#x3D; 101110B</span><br><span class="line"></span><br><span class="line">14 | 32 &#x3D; 45</span><br></pre></td></tr></table></figure>

<p>而且就算用户已经有了需要添加的权限，再进行<strong>按位或</strong>的运算也是没有问题的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 | 32 &#x3D; 45</span><br><span class="line"></span><br><span class="line">101110B | 100000B &#x3D; 101110B</span><br></pre></td></tr></table></figure>

<p>当我们需要<strong>移除权限</strong>的时候，我们就要用到<strong>与非运算</strong>（<code>&amp;</code> 和 <code>~</code>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 &amp; ~32 &#x3D; 14</span><br><span class="line"></span><br><span class="line">101110B &amp; ~100000B &#x3D; 001110B</span><br></pre></td></tr></table></figure>

<p>同样的，就算用户本来没有这个权限，在移除权限时也不会有问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14 &amp; ~32 &#x3D; 14</span><br><span class="line"></span><br><span class="line">001110B &amp; ~100000B &#x3D; 001110B</span><br></pre></td></tr></table></figure>

<p>当我们需要判断一个用户<strong>是否拥有权限</strong>的时候，可以用用户的权限来<strong>与</strong>（<code>&amp;</code>）要判断的权限，当结果还是判断的权限时，则代表用户有这个权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 &amp; 32 &#x3D; 32</span><br><span class="line"></span><br><span class="line">101110B &amp; 100000B &#x3D; 100000B</span><br></pre></td></tr></table></figure>

<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>首先列出所有的权限的枚举：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 权限集枚举</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RightsSet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> A 权限</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ARights = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> B 权限</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    BRights = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> C 权限</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    CRights = <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> D 权限</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    DRights = <span class="number">8</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> E 权限</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ERights = <span class="number">16</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> F 权限</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    FRights = <span class="number">32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，枚举的值一定要是 <code>2</code> 的 N 次幂形式。 然后是三个与权限相关个公共静态方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断是否拥有一个权限</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="userRights"&gt;</span>用户原有的权限<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="newRights"&gt;</span>需要判断的权限<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否拥有一个权限<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">hasRights</span>(<span class="params">RightsSet userRights, RightsSet newRights</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (userRights &amp; newRights) == newRights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加一个权限</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="userRights"&gt;</span>用户原有的权限<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="newRights"&gt;</span>需要添加的权限<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>用户的新权限<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RightsSet <span class="title">addRights</span>(<span class="params">RightsSet userRights, RightsSet newRights</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userRights | newRights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除一个权限</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="userRights"&gt;</span>用户原有的权限<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="newRights"&gt;</span>需要删除的权限<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>用户的新权限<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RightsSet <span class="title">deleteRights</span>(<span class="params">RightsSet userRights, RightsSet newRights</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userRights &amp; ~newRights;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>位运算是最基础的计算机运算，各个语言的用法不会有太大的变化，所以不管是什么语言应该都是可以实现的； 在数据库中我们只需要存储 <code>RightsSet</code> 的值就可以代表各种权限的组合结果了； 在数据库操作中，如果我们要对某一类的权限进行处理时，也不需要像以前一样进行复杂的字符串处理了； 并且位运算作为基础的计算机运算的速度是非常快的，各种数据库也都支持位运算； 而在代码编写中，我们只需要使用权限的名称（类似于上方代码中的枚举标志符 <code>ARights</code>、<code>BRights</code>）来进行操作，而不用记忆各个权限对应的数值； 当在前端进行权限更改等操作时，我们也可以直接在前端计算好 <code>RightsSet</code> 的值，再传给后台，反过来前台显示也是一样；</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
  </entry>
  <entry>
    <title>ASF（ArchiSteamFarm） 挂卡指南-入门篇</title>
    <url>/2018/09/20/archisteamfarm-guide-getting-started/</url>
    <content><![CDATA[<p>之前有写过 <em>Windows</em> 版本的 <em>ArchiSteamFarm</em> 在<strong>树莓派</strong>上的挂卡教程，那次过后到现在已经一年多了，<em>Steam</em> 库又新进了批货，所以又要挂一次啦。这次呢，发现 <em>ArchiSteamFarm</em> 已经更新到了 <strong>3.3.6.0</strong> 版本，所以就准备用最新的版本。还有就是由于众所周知的原因，国内很难正常的登录 <em>Steam</em> ，所以这次挂机的平台从自家的树莓派转移到了 <em>Google Cloud</em> 上。</p>
<a id="more"></a>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol start="0">
<li><p>最新版本的 <em>ArchiSteamFarm</em> ，具体可以去<a href="https://github.com/JustArchi/ArchiSteamFarm/releases" target="_blank" rel="noopener">这里</a>下载，我用的是 <strong>3.3.6.0</strong> 版本（这个作者更新得很勤快）；</p>
</li>
<li><p><em>Google Cloud</em> 的云服务器一台，这个的话只要你有国际信用卡，就能免费领取一台一年的云服务器，从开始到现在只装了一个梯子，其他什么都没用，现在终于可以发挥一下余热了。</p>
</li>
</ol>
<h2 id="下载以及配置"><a href="#下载以及配置" class="headerlink" title="下载以及配置"></a>下载以及配置</h2><ol start="0">
<li><p>在最近的更新中，<em>ArchiSteamFarm</em> 开始支持多平台，所以我们不用像以前那样麻烦得再安装 <em>Mono</em> 了。首先先去下载对应的版本，可以去上面提到的<a href="https://github.com/JustArchi/ArchiSteamFarm/releases" target="_blank" rel="noopener">地址</a>，然后通过 <em>FTP</em> 等方式放入云主机，也可以直接通过如下命令下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/JustArchi/ArchiSteamFarm/releases/download/3.3.0.6/ASF-linux-x64.zip</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后解压文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> unzip ASF-linux-x64.zip</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>之后需要开始调整配置文件，总共需要调整的配置文件一共有三个，第一个是位于根目录下的 <code>ArchiSteamFarm.runtimeconfig.json</code>，默认值是这样的：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"runtimeOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"configProperties"</span>: &#123;</span><br><span class="line">            <span class="attr">"System.GC.Concurrent"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"System.GC.Server"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用此配置来启动的话，在我的云服务器上会报如下错误</p>
<blockquote>
<p>FailFast: Couldn’t find a valid ICU package installed on the system. Set the configuration flag System.Globalization.Invariant to true if you want to run with no globalization support.</p>
</blockquote>
<p>为此我们要加上这么一句：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"runtimeOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"configProperties"</span>: &#123;</span><br><span class="line">            <span class="attr">"System.GC.Concurrent"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"System.GC.Server"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 防止运行报错</span></span><br><span class="line">            <span class="attr">"System.Globalization.Invariant"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个错误只在我这台谷歌云的云服务器上出现过，在其他的上面都是使用默认配置也能成功启动。所以可以暂时先不加这一句，如果启动时报错，可以加上这一句试一试。 第二处需要更改的配置文件是位于 <code>config</code> 文件夹下的 <code>ASF.json</code>，这部分的配置也不是必须的，主要是为了修改运行时的语言，默认的话都是系统设置的语言，而在 <em>Linux</em> 系统上，基本上都是英语，所以要将其更改成中文的话，需要将其修改成如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"AutoRestart"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"Blacklist"</span>: [],</span><br><span class="line">    <span class="attr">"CommandPrefix"</span>: <span class="string">"!"</span>,</span><br><span class="line">    <span class="attr">"ConfirmationsLimiterDelay"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"ConnectionTimeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"CurrentCulture"</span>: <span class="string">"zh-CN"</span>,</span><br><span class="line">    <span class="attr">"Debug"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"FarmingDelay"</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">"GiftsLimiterDelay"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"Headless"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"IdleFarmingPeriod"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"InventoryLimiterDelay"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"IPC"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"IPCPassword"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"IPCPrefixes"</span>: [</span><br><span class="line">        <span class="string">"http://127.0.0.1:1242/"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"LoginLimiterDelay"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"MaxFarmingTime"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"MaxTradeHoldDuration"</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">"OptimizationMode"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"Statistics"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"SteamMessagePrefix"</span>: <span class="string">"/me "</span>,</span><br><span class="line">    <span class="attr">"SteamOwnerID"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"SteamProtocols"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"UpdateChannel"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"UpdatePeriod"</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"WebLimiterDelay"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"WebProxy"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WebProxyPassword"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WebProxyUsername"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第 <em>7</em> 行，将 <code>CurrentCulture</code> 的值改为 <code>zh-CN</code>，记得要加双引号。 第三处的话就是我们自己的账号配置文件了，如果你想以默认配置挂卡，你只需要复制一份 <code>config</code> 目录下的 <code>minimal.json</code>，使用最简配置就可以了：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Enabled"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"SteamLogin"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"SteamPassword"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>填入你的用户名和密码，并将 <code>Enabled</code> 的值改为 <code>true</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"SteamLogin"</span>: <span class="string">"Aemon"</span>,</span><br><span class="line">    <span class="attr">"SteamPassword"</span>: <span class="string">"QdXR@Fj%YEb#bA@du#$p7nYS6E1XemFY"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以了。 如果你嫌这样麻烦，并且怕自己粗心的话，可以去这个官方提供的<a href="https://justarchi.github.io/ArchiSteamFarm/#/" target="_blank" rel="noopener">配置文件生成网站</a>，来生成自己的配置文件。 如果想配置更多的功能，但又看不懂属性名称的话，你可以对着这份<a href="https://www.jianshu.com/p/a1459d1ca639" target="_blank" rel="noopener">配置说明</a>，来进行配置。 当然，如果你英语足够好，也可以参阅<a href="https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Configuration" target="_blank" rel="noopener">官方的文档</a>。</p>
</li>
</ol>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ol start="0">
<li><p>在运行之前呢还需要一步，就是为 <em>ArchiSteamFarm</em> 增加可执行权限，只要执行一下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod +x ArchiSteamFarm</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于我们需要长时间挂机，需要 <em>ArchiSteamFarm</em> 能在后台运行，所以我就开一个名为 <em>asf</em> 的 <em>screen</em> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> screen -S asf</span></span><br></pre></td></tr></table></figure>

<p>进入这个 <em>screen</em> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> screen -r asf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后我们运行 <em>ArchiSteamFarm</em> 即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ./ArchiSteamFarm</span></span><br></pre></td></tr></table></figure>

<p>根据你的设置不同，可能会提示你输入 <em>Steam 令牌</em> 的五位代码，检查一下你绑定的邮箱或者是手机 <em>APP</em> ，然后输入即可（不区分大小写）。 好了，现在就已经开始挂卡了，你可以按 <code>Ctrl</code> + <code>A</code> 和 <code>Ctrl</code> + <code>D</code> 来退出这个 <em>screen</em> ，并退出终端，程序会一直运行的。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后祝大家挂卡顺利，早日回本。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchiSteamFarm</tag>
        <tag>ASF</tag>
        <tag>Linux</tag>
        <tag>Steam</tag>
        <tag>喜加一</tag>
        <tag>挂卡</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 raspberry 配合 frp 来进行远程开机</title>
    <url>/2018/07/19/use-raspberry-with-frp-for-remote-boot/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一直有在外操作家里电脑的需求，远程控制这一步好解决，一般是通过 <em>TeamViewer</em> 来进行。但是前提之一是需要家中电脑时刻处于开机状态，但是由于电脑是台式即使待机也比平常笔记本的功率要高不少（可以看一下半个月的电费），而且如果 24 小时开机的话，散热器风扇一直处于运行状态，会使机箱的灰尘增多，这样的话清灰频率又要大大增加了。</p>
<a id="more"></a>

<!-- ![5.png](https://i.loli.net/2018/07/19/5b507b12be317.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/%E7%94%B5%E8%B4%B9.webp" class="" title="电费">


<p>所以需要一种可以远程开机的办法。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>之前的方法是使用即时通讯软件让家中的室友帮忙开机，但是也只限于家中有室友的情况，如果室友去上班了，那就没办法了。 也想过训练猫来帮助我开机，但是奈何这猫实在太蠢，朽木不可雕也。而且就算是训练成功了，那当我需要开机时，我该怎么通知到猫呢？这也是一个问题。 在试验过各种方法后，最后我使用了树莓派（raspberry）结合 frp 的方式来完成我的需求。</p>
<h2 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h2><p>需要用到的设备有：</p>
<ol start="0">
<li><p>用来进行远程开机以及远程控制的设备一台；</p>
</li>
<li><p>具有 <strong>IP/MAC绑定</strong> 功能的路由器一台；</p>
</li>
<li><p>树莓派一台；</p>
</li>
<li><p>支持 WOL 的 PC 一台；</p>
</li>
<li><p>带有公网 IP 的服务器一台。</p>
</li>
</ol>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="局域网设备配置"><a href="#局域网设备配置" class="headerlink" title="局域网设备配置"></a>局域网设备配置</h3><p>首先是家中局域网的配置，PC 和 树莓派要位于同一局域网，然后在路由器中把两者的 MAC 和 IP 进行绑定。这里需要注意的是 MAC 不是代表一台设备而是一个网卡，所以在设置树莓派的 MAC 地址的时候需要根据当前树莓派连接路由器的方式来设置。我使用的路由器可以直接查看设备的 MAC 地址。如下：</p>
<!-- ![Routerlist.png](https://i.loli.net/2018/07/19/5b507b1a3f9aa.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/Routerlist.webp" class="" title="Routerlist">

<p>如果路由器无法查看 MAC 地址或者设备太多无法区分，那么在 <strong>Windows</strong> 系统下可以使用</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ipconfig</span> -all</span><br></pre></td></tr></table></figure>

<p>来查看</p>
<!-- ![MACWindows.png](https://i.loli.net/2018/07/19/5b507b1a4128f.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/MACWindows.webp" class="" title="MACWindows">

<p>在 <strong>raspberry</strong> 下可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ifconfig</span></span><br></pre></td></tr></table></figure>

<p>来查看</p>
<p><img data-src="https://i.loli.net/2018/07/19/5b507b1a4292a.png" alt="MACraspberry.png"></p>


<p>可以看到树莓派有两个 MAC 地址，由于我是使用无线连接所以我选择的是第二个 _wlan0_。 然后使用 <strong>IP/MAC绑定</strong> 功能将两台设备与 IP 进行绑定，绑定的时候建议就选择当前使用的 IP 以免用了其他设备正在使用的 IP，造成 IP 冲突。 如果绑定了其他的 IP，请在绑定成功后重启设备。</p>
<h3 id="PC-WOL-配置"><a href="#PC-WOL-配置" class="headerlink" title="PC WOL 配置"></a>PC WOL 配置</h3><p>然后是要配置 PC 使其可以支持 WOL（wake-on-LAN）开机。WOL 是一种电源管理功能，中文译为 <strong>网络唤醒</strong>，以下是 Wiki 对其作出的解释：</p>
<blockquote>
<p>Wake-on-LAN简称WOL或WoL，中文多译为“网络唤醒”、“远程唤醒”技术。WOL是一种技术，同时也是该技术的规范标准，它的功效在于让已经进入休眠状态或关机状态的电脑，透过局域网（多半为以太网）的另一端对其发令，使其从休眠状态唤醒、恢复成运作状态，或从关机状态转成引导状态。此外，与WOL相关的技术也包括远程下令关机、远程下令重启等相关的遥控机制。</p>
</blockquote>
<p>它的具体方法就是向要启动的设备发送一个魔法数据包（Magic Packet）：</p>
<blockquote>
<p>魔法数据包（Magic Packet）是一个广播性的帧（frame），透过端口7或端口9进行发送，且可以用无连接（Connectionless protocol）的通信协议（如UDP、IPX）来传递，不过一般而言多是用UDP，原因是Novell公司的Netware网络操作系统的IPX协议已经愈来愈少机会被使用。 在魔法数据包内，每次都会先有连续6个”FF”（十六进制，换算成二进制即：11111111）的数据，即：FF FF FF FF FF FF，在连续6个”FF”后则开始带出MAC地址信息，有时还会带出4字节或6字节的密码，一旦经由网卡侦测、解读、研判（广播）魔法数据包的内容，内容中的MAC地址、密码若与电脑自身的地址、密码吻合，就会启动唤醒、引导的程序。</p>
</blockquote>
<p>所以我们要先设置 BIOS 打开「<strong>网卡唤醒</strong>」这一功能，由于各个品牌主板的 BIOS 各不相同，所以设置的方法也各式各样，大家可以自行搜索「<strong>wake on lan 设置</strong>」，来寻找正确的方式。不过大多是在 <strong>电源管理</strong>（Power Management Setup）中。 然后是系统上的设置，这里我以 <em>Windows 10 17134.165</em> 版本为例。 首先右键「<strong>网络</strong>」-「<strong>属性</strong>」来打开「<strong>网络和共享中心</strong>」面板：</p>
<!-- ![4.png](https://i.loli.net/2018/07/19/5b507b129fdee.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/4.webp" class="" title="网络和共享中心">

<p>在左侧单击「<strong>更改适配器设置</strong>」-右键你现在正在使用的网卡-「<strong>属性</strong>」来打开「<strong>属性</strong>」面板：</p>
<!-- ![1.png](https://i.loli.net/2018/07/19/5b507b12983ac.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/1.png" class="" title="更改适配器设置">

<p>单击上方的「<strong>配置</strong>」-选择「<strong>高级</strong>」选项卡-在属性类别中将「<strong>关机 网络唤醒</strong>」和「<strong>魔术封包唤醒</strong>」的值设置为「<strong>开启</strong>」：</p>
<!-- ![3.png](https://i.loli.net/2018/07/19/5b507b129f1e7.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/3.webp" class="" title="高级">

<p>选择「<strong>电源管理</strong>」选项卡-勾选「<strong>允许计算机关闭此设备以节约电源</strong>」和「<strong>允许此设备唤醒计算机</strong>」选项：</p>
<!-- ![2.png](https://i.loli.net/2018/07/19/5b507b1298186.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/2.webp" class="" title="电源管理">

<p>就此，PC 端的设置已经完成了。</p>
<h3 id="带公网-IP-的服务器配置"><a href="#带公网-IP-的服务器配置" class="headerlink" title="带公网 IP 的服务器配置"></a>带公网 IP 的服务器配置</h3><p>带公网 IP 的服务器，大家可以去阿里云或者腾讯云买一台最低配的就可以了，我的这台是之前在腾讯云薅羊毛薅的。 这个服务器的作用主要是运行 <em>frp</em> 的服务端来使局域网内的树莓派可以内网穿透。 <em>frp</em> 是一个免费的开源的内网穿透软件，而且部署简单方便。具体方式如下：</p>
<p>我们可以在 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a> 下载指定架构下的版本，我在腾讯云服务器上使用的 <em>Ubuntu</em> 系统，所以选择的是 <code>frp_0.20.0_linux_amd64.tar.gz</code> 这个版本。可以下载下来使用 <em>FTP</em> 来放到服务器上，也可以在服务器上使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>来直接下载到服务器上。</p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>下载完成后使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf frp_0.20.0_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>
<p>解压文件。</p>
<h4 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> frp_2.20.0_linux_amd64</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-rm-命令来删除-frpc-和-frpc-ini-两个文件"><a href="#通过-rm-命令来删除-frpc-和-frpc-ini-两个文件" class="headerlink" title="通过 rm 命令来删除 frpc 和 frpc.ini 两个文件"></a>通过 <code>rm</code> 命令来删除 <code>frpc</code> 和 <code>frpc.ini</code> 两个文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm frpc frpc.ini</span></span><br></pre></td></tr></table></figure>

<h4 id="打开配置文件-frps-ini"><a href="#打开配置文件-frps-ini" class="headerlink" title="打开配置文件 frps.ini"></a>打开配置文件 <code>frps.ini</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim frps.ini</span></span><br></pre></td></tr></table></figure>

<h4 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h4><p>更改配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span>           <span class="comment">#与客户端绑定的进行通信的端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">6081</span>     <span class="comment">#访问客户端web服务自定义的端口号</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<ol>
<li><p>「#」 后面的是注释，可以不写；</p>
</li>
<li><p>这边 <em>Vim</em> 的用法可以上搜索引擎查一下，这里不多赘述。</p>
</li>
</ol>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./frps -c ./frps.ini</span></span><br></pre></td></tr></table></figure>

<p>这个是前台启动服务，会输出日志信息，是用来调试的用的，到时调试成功了就可以使用后台服务启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./frps -c ./frps.ini &amp;</span></span><br></pre></td></tr></table></figure>

<p>至此，服务器也设置完成。</p>
<h3 id="树莓派配置"><a href="#树莓派配置" class="headerlink" title="树莓派配置"></a>树莓派配置</h3><p>我现在使用的是 <em>Raspberry 3B_，当时是在淘宝 _￥195</em> 的价格买的，如果配上电源以及 <em>SD</em> 卡的等配件一共是 _￥278.9_。清单如下：</p>
<!-- ![list.png](https://i.loli.net/2018/07/19/5b507b12b3fed.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/list.webp" class="" title="list">

<p>之后的系统安装我就不在这详细说明了，网上有很多详细的教程。 树莓派的配置和服务器配置其实是差不多的，不同的是服务器上的部署的是 <em>frp</em> 的服务端，而树莓派上的部署的是客户端。 从下载到解压的步骤和服务器端是一模一样的，只要照着之前的步骤做就可以了。 从第三步删除文件开始有所不同：</p>
<h4 id="删除不必要的文件"><a href="#删除不必要的文件" class="headerlink" title="删除不必要的文件"></a>删除不必要的文件</h4><p>在服务器上我们删除的是 <code>frpc</code> 和 <code>frpc.ini</code>，这两个是 <em>frp</em> 的客户端程序和客户端配置文件，同理我们在树莓派也就是服务器端上就要删除 <code>frps</code> 和 <code>frps.ini</code> 这两个文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm frps frps.ini</span></span><br></pre></td></tr></table></figure>

<h4 id="打开配置文件-frpc-ini"><a href="#打开配置文件-frpc-ini" class="headerlink" title="打开配置文件 frpc.ini"></a>打开配置文件 <code>frpc.ini</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim frpc.ini</span></span><br></pre></td></tr></table></figure>

<h4 id="更改配置-1"><a href="#更改配置-1" class="headerlink" title="更改配置"></a>更改配置</h4><p>更改配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">118.126</span>.***.***</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">1.100</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6022</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">3306</span></span><br></pre></td></tr></table></figure>

<p><code>server_addr</code> 即为服务器的公网 IP 的地址，<code>server_port</code> 为之前在服务端配置时的 <code>bind_port</code>，这里我用的是 <code>7000</code>。 然后是需要内网穿透的服务的配置，我这里写了两个，一个是 <em>SSH_，一个是 _MySQL_。如果只要能进行远程连接的话我们只需要 _SSH</em> 的配置就好了，这里要注意的就是 <code>remote_port</code>，自定义的端口号，不要填 <code>22</code>，因为在服务器上已经被占用了（被用于服务器的 _SSH_），所以你要选一个没被占用的端口来使用，这里我用的是 <code>6022</code>。</p>
<h4 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./frpc -c ./frpc.ini</span></span><br></pre></td></tr></table></figure>

<p>同样的，后台服务启动是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup ./frpc -c ./frpc.ini &amp;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-frp"><a href="#测试-frp" class="headerlink" title="测试 frp"></a>测试 frp</h3><p>现在我们可以在自己的 PC 上使用以下命令来访问树莓派了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-p</span> <span class="number">6022</span> <span class="number">118.126</span>.***.***</span><br></pre></td></tr></table></figure>

<p>然后键入树莓派的密码就可以了：</p>
<!-- ![SSHraspberryPC.png](https://i.loli.net/2018/07/19/5b507b1a44208.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/SSHraspberryPC.png" class="" title="SSHraspberryPC">

<p>当然也可以用手机的移动网络来访问：</p>
<!-- ![SSHPhone.png](https://i.loli.net/2018/07/19/5b507b1a5450c.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/SSHPhone.webp" class="" title="SSHPhone">

<p>至此我们已经成功的内网内网穿透了，即可以从外网访问内网设备了，接下来我们就要通过树莓派来使家中的 PC 开机了。</p>
<h3 id="在树莓派上使用-WOL-控制-PC-开机"><a href="#在树莓派上使用-WOL-控制-PC-开机" class="headerlink" title="在树莓派上使用 WOL 控制 PC 开机"></a>在树莓派上使用 <em>WOL</em> 控制 PC 开机</h3><p>这里我找了好多软件，测试了好久，不是没有 <em>Linux</em> 平台的，就是不能用。所以最后还是用 <em>Python</em> 了，具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">BROADCAST_IP = <span class="string">'255.255.255.255'</span></span><br><span class="line">DEFAULT_PORT = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_magic_packet</span><span class="params">(macaddress)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(macaddress) == <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> len(macaddress) == <span class="number">17</span>:</span><br><span class="line">        sep = macaddress[<span class="number">2</span>]</span><br><span class="line">        macaddress = macaddress.replace(sep, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Incorrect MAC address format'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pad the synchronization stream</span></span><br><span class="line">    data = <span class="string">b'FFFFFFFFFFFF'</span> + (macaddress * <span class="number">16</span>).encode()</span><br><span class="line">    send_data = <span class="string">b''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Split up the hex values in pack</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">2</span>):</span><br><span class="line">        send_data += struct.pack(<span class="string">b'B'</span>, int(data[i: i + <span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> send_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_magic_packet</span><span class="params">(*macs, **kwargs)</span>:</span></span><br><span class="line">    packets = []</span><br><span class="line">    ip = kwargs.pop(<span class="string">'ip_address'</span>, BROADCAST_IP)</span><br><span class="line">    port = kwargs.pop(<span class="string">'port'</span>, DEFAULT_PORT)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'send_magic_packet() got an unexpected keyword '</span></span><br><span class="line">                        <span class="string">'argument &#123;!r&#125;'</span>.format(k))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> mac <span class="keyword">in</span> macs:</span><br><span class="line">        packet = create_magic_packet(mac)</span><br><span class="line">        packets.append(packet)</span><br><span class="line"></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class="number">1</span>)</span><br><span class="line">    sock.connect((ip, port))</span><br><span class="line">    <span class="keyword">for</span> packet <span class="keyword">in</span> packets:</span><br><span class="line">        sock.send(packet)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">'Wake one or more computers using the wake on lan'</span></span><br><span class="line">                    <span class="string">' protocol.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'macs'</span>,</span><br><span class="line">        metavar=<span class="string">'mac address'</span>,</span><br><span class="line">        nargs=<span class="string">'+'</span>,</span><br><span class="line">        help=<span class="string">'The mac addresses or of the computers you are trying to wake.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'-i'</span>,</span><br><span class="line">        metavar=<span class="string">'ip'</span>,</span><br><span class="line">        default=BROADCAST_IP,</span><br><span class="line">        help=<span class="string">'The ip address of the host to send the magic packet to.'</span></span><br><span class="line">                <span class="string">' (default &#123;&#125;)'</span>.format(BROADCAST_IP))</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'-p'</span>,</span><br><span class="line">        metavar=<span class="string">'port'</span>,</span><br><span class="line">        type=int,</span><br><span class="line">        default=DEFAULT_PORT,</span><br><span class="line">        help=<span class="string">'The port of the host to send the magic packet to (default 9)'</span>)</span><br><span class="line">    args = parser.parse_args(argv)</span><br><span class="line">    send_magic_packet(*args.macs, ip_address=args.i, port=args.p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  <span class="comment"># pragma: nocover</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>我们把上面的代码保存为 <code>*.py</code> 格式，例如 <code>wol.py</code> 然后通过 <em>ftp</em> 传输到树莓派上去。 然后在存有这个 <code>wol.py</code> 的文件夹下使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python wol.py E0:D5:5E:88:88:88</span></span><br></pre></td></tr></table></figure>

<p><code>E0:D5:5E:88:88:88</code> 就是你需要启动的 PC 的 MAC 地址了。 回车后发现没有任何提示，这是正常了，因为在 <em>Linux</em> 中，_没有消息就是好消息_。 如果你只需要启动一台 PC，而且你不想记录这么长的 MAC 地址（通常也不需要你记录，因为你可以在终端通过上下键来显示历史使用过的命令），你可以将你的 MAC 地址写入到代码中去，这样就可以一劳永逸了。 至此，你已经可以通过树莓派来启动你的 PC 了，快关闭你的电脑试一试吧。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>事后，我用 <em>Wireshark</em> 抓了包，找到了这个 _Magic Packet_：</p>
<!-- ![6.png](https://i.loli.net/2018/07/19/5b507b12b69cb.png) -->
<img data-src="/2018/07/19/use-raspberry-with-frp-for-remote-boot/6.webp" class="" title="MagicPacket">

<p>发现和 <em>Wiki</em> 上说的一样：以 <code>6</code> 个 <code>FF</code> 开始，并且重复 <code>16</code> 遍 MAC 地址。</p>
</li>
<li><p>可以看到，我在树莓派上的 <em>frp</em> 配置文件中有一个 <em>MySQL</em> 的条目：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">3306</span></span><br></pre></td></tr></table></figure>

<p>当如此设置后，并且在树莓派上安装 <em>MySQL_，就可以在外网用类似的方法来访问内网的数据库了。 同样的，我们知道，网站（HTTP）是通过 <code>80</code> 端口来传输的，由此如果我们在树莓派上有部署网站的话，那么就可以通过 _frp</em> 进行类似的配置（这部分可能会有一些不同），我们就可以在外网访问该网站了。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没有总结。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>在树莓派上安装 Chrome（Chromium） 浏览器</title>
    <url>/2017/09/23/install-chrome-chromium-browser-on-raspberry/</url>
    <content><![CDATA[<p>用习惯了谷歌浏览器，树莓派上面自带的浏览器有些不习惯，所以就想着弄一个 <em>Chrome</em> 在上边。其实是 <em>Chromium_，_Chromium</em> 是 <em>Google</em> 的 <em>Chrome</em> 浏览器背后的引擎。不过除了一些细小功能上的差别以及图标的样子，<em>Chromium</em> 和 <em>Chrome</em> 在绝大部分功能上还是一致的。</p>
<a id="more"></a>

<p>要安装的话，首先你需要一台树莓派。为了输入方便，你可能还需要一台 <em>PC</em> 通过 <em>SSH</em> 连接到这台树莓派上边。</p>
<p>搜索了很多资料，最后是安装这个<a href="http://video.tudou.com/v/XMTc4OTczNjEyMA==.html" target="_blank" rel="noopener">视频</a>的方式来安装的。</p>
<p>接下来的安装方法都是视频中所讲的，如果懒得看我写的，也可以直接去看视频。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先要去这个网站去下载三个文件</p>
<p><a href="http://ports.ubuntu.com/pool/universe/c/chromium-browser/" target="_blank" rel="noopener">http://ports.ubuntu.com/pool/universe/c/chromium-browser/</a></p>
<p>下载地址分别是：</p>
<ol start="0">
<li><p><a href="http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-codecs-ffmpeg-extra_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb" target="_blank" rel="noopener">http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-codecs-ffmpeg-extra_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb</a></p>
</li>
<li><p><a href="http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-browser_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb" target="_blank" rel="noopener">http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-browser_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb</a></p>
</li>
<li><p><a href="http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-browser-l10n_48.0.2564.82-0ubuntu0.15.04.1.1193_all.deb" target="_blank" rel="noopener">http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-browser-l10n_48.0.2564.82-0ubuntu0.15.04.1.1193_all.deb</a></p>
</li>
</ol>
<p>可以使用如下命令来进行下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-codecs-ffmpeg-extra_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-browser_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://ports.ubuntu.com/pool/universe/c/chromium-browser/chromium-browser-l10n_48.0.2564.82-0ubuntu0.15.04.1.1193_all.deb</span></span><br></pre></td></tr></table></figure>

<p>顺序可以调换，没有关系。</p>
<p>速度可能并不稳定，下载的时候请耐心等待。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>下载完成后使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br></pre></td></tr></table></figure>

<p>来查看是否下载成功。</p>
<p>检查三个文件名是否有误，确认无误后进行接下来的操作。</p>
<p>输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i chromium-codecs-ffmpeg-extra_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb</span></span><br></pre></td></tr></table></figure>

<p>等待安装完成后，再输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i  chromium-browser_48.0.2564.82-0ubuntu0.15.04.1.1193_armhf.deb chromium-browser-l10n_48.0.2564.82-0ubuntu0.15.04.1.1193_all.deb</span></span><br></pre></td></tr></table></figure>

<p>耐心等待安装完成。</p>
<p>当提示完成后，你就可以去树莓派使用 <em>Chromium</em> 浏览器啦。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】依赖注入那些事儿</title>
    <url>/2017/09/15/those-stories-of-dependency-injection/</url>
    <content><![CDATA[<p>为方便以后查阅，特地转载一下，整理为 <a href="/2017/09/15/those-stories-of-dependency-injection/md.txt" title="Markdown格式">Markdown格式</a>。</p>
<p>转载自：<a href="http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html" target="_blank" rel="noopener">依赖注入那些事儿 - T2噬菌体</a></p>
<a id="more"></a>

<h2 id="IGame-游戏公司的故事"><a href="#IGame-游戏公司的故事" class="headerlink" title="IGame 游戏公司的故事"></a>IGame 游戏公司的故事</h2><h3 id="讨论会"><a href="#讨论会" class="headerlink" title="讨论会"></a>讨论会</h3><p>话说有一个叫 IGame 的游戏公司，正在开发一款 ARPG 游戏（动作&amp;角色扮演类游戏，如魔兽世界、梦幻西游这一类的游戏）。一般这类游戏都有一个基本的功能，就是打怪（玩家攻击怪物，借此获得经验、虚拟货币和虚拟装备），并且根据玩家角色所装备的武器不同，攻击效果也不同。这天，IGame 公司的开发小组正在开会对打怪功能中的某一个功能点如何实现进行讨论，他们面前的大屏幕上是这样一份需求描述的 PPT：</p>
<!-- ![01_3.gif](https://i.loli.net/2017/09/15/59bb9d3e3a3c1.gif) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/1.webp" class="" title="PPT">

<p><strong>图1.1 需求描述ppt</strong></p>
<p>各个开发人员，面对这份需求，展开了热烈的讨论，下面我们看看讨论会上都发生了什么。</p>
<h3 id="实习生小李的实现方式"><a href="#实习生小李的实现方式" class="headerlink" title="实习生小李的实现方式"></a>实习生小李的实现方式</h3><p>在经过一番讨论后，项目组长 Peter 觉得有必要整理一下各方的意见，他首先询问小李的看法。小李是某学校计算机系大三学生，对游戏开发特别感兴趣，目前是 IGame 公司的一名实习生。 经过短暂的思考，小李阐述了自己的意见： “我认为，这个需求可以这么实现。HP当然是怪物的一个属性成员，而武器是角色的一个属性成员，类型可以使字符串，用于描述目前角色所装备的武器。角色类有一个攻击方法，以被攻击怪物为参数，当实施一次攻击时，攻击方法被调用，而这个方法首先判断当前角色装备了什么武器，然后据此对被攻击怪物的 <code>HP</code> 进行操作，以产生不同效果。” 而在阐述完后，小李也飞快的在自己的电脑上写了一个 Demo，来演示他的想法，Demo 代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的名字</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> String Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的生命值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> Int32 HP &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params">String name,Int32 hp</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">            <span class="keyword">this</span>.HP = hp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Role</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Random _random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 表示角色目前所持武器的字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> String WeaponTag &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 攻击怪物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="monster"&gt;</span>被攻击的怪物<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"此怪物已死"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"WoodSword"</span> == <span class="keyword">this</span>.WeaponTag)</span><br><span class="line">            &#123;</span><br><span class="line">                monster.HP -= <span class="number">20</span>;</span><br><span class="line">                <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"已死亡"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"损失20HP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"IronSword"</span> == <span class="keyword">this</span>.WeaponTag)</span><br><span class="line">            &#123;</span><br><span class="line">                monster.HP -= <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"已死亡"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"损失50HP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"MagicSword"</span> == <span class="keyword">this</span>.WeaponTag)</span><br><span class="line">            &#123;</span><br><span class="line">                Int32 loss = (_random.NextDouble() &lt; <span class="number">0.5</span>) ? <span class="number">100</span> : <span class="number">200</span>;</span><br><span class="line">                monster.HP -= loss;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">200</span> == loss)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"出现暴击！！！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"已死亡"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"损失"</span> + loss + <span class="string">"HP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"角色手里没有武器，无法攻击！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//生成怪物</span></span><br><span class="line">            Monster monster1 = <span class="keyword">new</span> Monster(<span class="string">"小怪A"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster2 = <span class="keyword">new</span> Monster(<span class="string">"小怪B"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster3 = <span class="keyword">new</span> Monster(<span class="string">"关主"</span>, <span class="number">200</span>);</span><br><span class="line">            Monster monster4 = <span class="keyword">new</span> Monster(<span class="string">"最终Boss"</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成角色</span></span><br><span class="line">            Role role = <span class="keyword">new</span> Role();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//木剑攻击</span></span><br><span class="line">            role.WeaponTag = <span class="string">"WoodSword"</span>;</span><br><span class="line">            role.Attack(monster1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//铁剑攻击</span></span><br><span class="line">            role.WeaponTag = <span class="string">"IronSword"</span>;</span><br><span class="line">            role.Attack(monster2);</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//魔剑攻击</span></span><br><span class="line">            role.WeaponTag = <span class="string">"MagicSword"</span>;</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果如下：</p>
<!-- ![02_3.gif](https://i.loli.net/2017/09/15/59bbae64f08ba.gif) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/2.webp" class="" title="结果023">

<p><strong>图1.2 小李程序的运行结果</strong></p>
<h3 id="架构师的建议"><a href="#架构师的建议" class="headerlink" title="架构师的建议"></a>架构师的建议</h3><p>小李阐述完自己的想法并演示了 Demo 后，项目组长 Peter 首先肯定了小李的思考能力、编程能力以及初步的面向对象分析与设计的思想，并承认小李的程序正确完成了需求中的功能。但同时，Peter 也指出小李的设计存在一些问题，他请小于讲一下自己的看法。 小于是一名有五年软件架构经验的架构师，对软件架构、设计模式和面向对象思想有较深入的认识。他向 Peter 点了点头，发表了自己的看法： “小李的思考能力是不错的，有着基本的面向对象分析设计能力，并且程序正确完成了所需要的功能。不过，这里我想从架构角度，简要说一下我认为这个设计中存在的问题。 首先，小李设计的 <code>Role</code> 类的 <code>Attack</code> 方法很长，并且方法中有一个冗长的 <code>if…else</code> 结构，且每个分支的代码的业务逻辑很相似，只是很少的地方不同。 再者，我认为这个设计比较大的一个问题是，违反了 OCP 原则。在这个设计中，如果以后我们增加一个新的武器，如倚天剑，每次攻击损失 500HP，那么，我们就要打开 <code>Role</code>，修改 <code>Attack</code> 方法。而我们的代码应该是对修改关闭的，当有新武器加入的时候，应该使用扩展完成，避免修改已有代码。 一般来说，当一个方法里面出现冗长的 <code>if…else</code> 或 <code>switch…case</code> 结构，且每个分支代码业务相似时，往往预示这里应该引入多态性来解决问题。而这里，如果把不同武器攻击看成一个策略，那么引入策略模式（ <em>Strategy Pattern</em> ）是明智的选择。 最后说一个小的问题，被攻击后，减HP、死亡判断等都是怪物的职责，这里放在 <code>Role</code> 中有些不当。”</p>
<blockquote>
<p>Tip：OCP 原则，即开放关闭原则，指设计应该对扩展开放，对修改关闭。 Tip：策略模式，英文名 <em>Strategy Pattern</em> ，指定义算法族，分别封装起来，让他们之间可以相互替换，此模式使得算法的变化独立于客户。</p>
</blockquote>
<p>小于边说，边画了一幅 UML 类图，用于直观表示他的思想：、</p>
<!-- ![03_3.jpg](https://i.loli.net/2017/09/15/59bbaf77f3db6.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/3.webp" class="" title="uml类图">

<p><strong>图1.3 小于的设计</strong></p>
<p>Peter 让小李按照小于的设计重构 Demo，小李看了看小于的设计图，很快完成。相关代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">WoodSword</span> : <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            monster.Notify(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">IronSword</span> : <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            monster.Notify(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MagicSword</span> : <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Random _random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Int32 loss = (_random.NextDouble() &lt; <span class="number">0.5</span>) ? <span class="number">100</span> : <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> == loss)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"出现暴击！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            monster.Notify(loss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的名字</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> String Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的生命值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> Int32 HP &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params">String name,Int32 hp</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">            <span class="keyword">this</span>.HP = hp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物被攻击时，被调用的方法，用来处理被攻击后的状态更改</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="loss"&gt;</span>此次攻击损失的HP<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params">Int32 loss</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.HP &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"此怪物已死"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.HP -= loss;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.HP &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"怪物"</span> + <span class="keyword">this</span>.Name + <span class="string">"被打死"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"怪物"</span> + <span class="keyword">this</span>.Name + <span class="string">"损失"</span> + loss + <span class="string">"HP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Role</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 表示角色目前所持武器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IAttackStrategy Weapon &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 攻击怪物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="monster"&gt;</span>被攻击的怪物<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Weapon.AttackTarget(monster);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//生成怪物</span></span><br><span class="line">            Monster monster1 = <span class="keyword">new</span> Monster(<span class="string">"小怪A"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster2 = <span class="keyword">new</span> Monster(<span class="string">"小怪B"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster3 = <span class="keyword">new</span> Monster(<span class="string">"关主"</span>, <span class="number">200</span>);</span><br><span class="line">            Monster monster4 = <span class="keyword">new</span> Monster(<span class="string">"最终Boss"</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成角色</span></span><br><span class="line">            Role role = <span class="keyword">new</span> Role();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//木剑攻击</span></span><br><span class="line">            role.Weapon = <span class="keyword">new</span> WoodSword();</span><br><span class="line">            role.Attack(monster1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//铁剑攻击</span></span><br><span class="line">            role.Weapon = <span class="keyword">new</span> IronSword();</span><br><span class="line">            role.Attack(monster2);</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//魔剑攻击</span></span><br><span class="line">            role.Weapon = <span class="keyword">new</span> MagicSword();</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译运行以上代码，得到的运行结果与上一版本代码基本一致。</p>
<h3 id="小李的小结"><a href="#小李的小结" class="headerlink" title="小李的小结"></a>小李的小结</h3><p>Peter 显然对改进后的代码比较满意，他让小李对照两份设计和代码，进行一个小结。小李简略思考了一下，并结合小于对一次设计指出的不足，说道： “我认为，改进后的代码有如下优点： 第一，虽然类的数量增加了，但是每个类中方法的代码都非常短，没有了以前 <code>Attack</code> 方法那种很长的方法，也没有了冗长的 <code>if…else</code>，代码结构变得很清晰。 第二，类的职责更明确了。在第一个设计中，<code>Role</code> 不但负责攻击，还负责给怪物减少 <code>HP</code> 和判断怪物是否已死。这明显不应该是 <code>Role</code> 的职责，改进后的代码将这两个职责移入Monster内，使得职责明确，提高了类的内聚性。 第三，引入 Strategy 模式后，不但消除了重复性代码，更重要的是，使得设计符合了 OCP。如果以后要加一个新武器，只要新建一个类，实现 <code>IAttackStrategy</code> 接口，当角色需要装备这个新武器时，客户代码只要实例化一个新武器类，并赋给 <code>Role</code> 的 <code>Weapon</code> 成员就可以了，已有的 <code>Role</code> 和 <code>Monster</code> 代码都不用改动。这样就实现了对扩展开发，对修改关闭。” Peter和小于听后都很满意，认为小李总结的非常出色。 IGame公司的讨论会还在进行着，内容是非常精彩，不过我们先听到这里，因为，接下来，我们要对其中某些问题进行一点探讨。别忘了，本文的主题可是依赖注入，这个主角还没登场呢！让主角等太久可不好。</p>
<h2 id="探究依赖注入"><a href="#探究依赖注入" class="headerlink" title="探究依赖注入"></a>探究依赖注入</h2><h3 id="故事的启迪"><a href="#故事的启迪" class="headerlink" title="故事的启迪"></a>故事的启迪</h3><p>我们现在静下心来，再回味一下刚才的故事。因为，这个故事里面隐藏着<strong>依赖注入</strong>的出现原因。我说过不只一次，想真正认清一个事物，不能只看“它是什么？什么样子？”，而应该先弄清楚“它是怎么来的？是什么样的需求和背景促使了它的诞生？它被创造出来是做什么用的？”。 回想上面的故事。刚开始，主要需求是一个打怪的功能。小李做了一个初步面向对象的设计：抽取领域场景中的实体（怪物、角色等），封装成类，并为各个类赋予属性与方法，最后通过类的交互完成打怪功能，这应该算是面向对象设计的初级阶段。 在小李的设计基础上，架构师小于指出了几点不足，如不符合 OCP，职责划分不明确等等，并根据情况引入策略模式。这是更高层次的面向对象设计。其实就核心来说，小于只做了一件事：利用多态性，隔离变化。它清楚认识到，这个打怪功能中，有些业务逻辑是不变的，如角色攻击怪物，怪物减少 HP，减到 0 怪物就会死；而变化的仅仅是不同的角色持有不同武器时，每次攻击的效用不一样。于是他的架构，本质就是把变化的部分和不变的部分隔离开，使得变化部分发生变化时，不变部分不受影响。 我们再仔细看看小于的设计图，这样设计后，有个基本的问题需要解决：现在 <code>Role</code> 不依赖具体武器，而仅仅依赖一个 <code>IAttackStrategy</code> 接口，接口是不能实例化的，虽然 <code>Role</code> 的 <code>Weapon</code> 成员类型定义为 <code>IAttackStrategy</code>，但最终还是会被赋予一个实现了 <code>IAttackStrategy</code> 接口的具体武器，并且随着程序进展，一个角色会装备不同的武器，从而产生不同的效用。赋予武器的职责，在 Demo 中是放在了测试代码里。 这里，测试代码实例化一个具体的武器，并赋给 <code>Role</code> 的 <code>Weapon</code> 成员的过程，就是<strong>依赖注入</strong>！这里要清楚，<strong>依赖注入</strong>其实是一个过程的称谓！</p>
<h3 id="正式定义依赖注入"><a href="#正式定义依赖注入" class="headerlink" title="正式定义依赖注入"></a>正式定义依赖注入</h3><p>下面，用稍微正式一点的语言，定义依赖注入产生的背景缘由和依赖注入的含义。在读的过程中，读者可以结合上面的例子进行理解。 依赖注入产生的背景： 随着面向对象分析与设计的发展，一个良好的设计，核心原则之一就是将变化隔离，使得变化部分发生变化时，不变部分不受影响（这也是 OCP 的目的）。为了做到这一点，要利用面向对象中的多态性，使用多态性后，客户类不再直接依赖服务类，而是依赖于一个抽象的接口，这样，客户类就不能在内部直接实例化具体的服务类。但是，客户类在运作中又客观需要具体的服务类提供服务，因为接口是不能实例化去提供服务的。就产生了“客户类不准实例化具体服务类”和“客户类需要具体服务类”这样一对矛盾。为了解决这个矛盾，开发人员提出了一种模式：客户类（如上例中的 <code>Role</code>）定义一个注入点（<code>Public</code> 成员 <code>Weapon</code>），用于服务类（实现 <code>IAttackStrategy</code> 的具体类，如 <code>WoodSword</code>、<code>IronSword</code> 和 <code>MagicSword</code>，也包括以后加进来的所有实现 <code>IAttackStrategy</code> 的新类）的注入，而客户类的客户类（<code>Program</code>，即测试代码）负责根据情况，实例化服务类，注入到客户类中，从而解决了这个矛盾。 依赖注入的正式定义： 依赖注入（ <em>Dependency Injection</em> ），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。</p>
<h2 id="依赖注入那些事儿"><a href="#依赖注入那些事儿" class="headerlink" title="依赖注入那些事儿"></a>依赖注入那些事儿</h2><p>上面我们从需求背景的角度，讲述了依赖注入的来源和定义。但是，如果依赖注入仅仅就只有这么点东西，那也没有什么值得讨论的了。但是，上面讨论的仅仅是依赖注入的内涵，其外延还是非常广泛的，从依赖注入衍生出了很多相关的概念与技术，下面我们讨论一下依赖注入的“那些事儿”。</p>
<h3 id="依赖注入的类别"><a href="#依赖注入的类别" class="headerlink" title="依赖注入的类别"></a>依赖注入的类别</h3><p>依赖注入有很多种方法，上面看到的例子中，只是其中的一种，下面分别讨论不同的依赖注入类型。</p>
<h4 id="Setter-注入"><a href="#Setter-注入" class="headerlink" title="Setter 注入"></a>Setter 注入</h4><p>第一种依赖注入的方式，就是 Setter 注入，上面的例子中，将武器注入 <code>Role</code> 就是 Setter 注入。正式点说： Setter 注入（ <em>Setter Injection</em> ）是指在客户类中，设置一个服务类接口类型的数据成员，并设置一个 <code>Set</code> 方法作为注入点，这个 <code>Set</code> 方法接受一个具体的服务类实例为参数，并将它赋给服务类接口类型的数据成员。</p>
<!-- ![04_6.jpg](https://i.loli.net/2017/09/15/59bbb21e689a0.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/4.webp" class="" title="img046">

<p><strong>图3.1 Setter注入示意</strong></p>
<p>上图展示了Setter注入的结构示意图，客户类 <code>ClientClass</code> 设置 <code>IServiceClass</code> 类型成员 <code>_serviceImpl</code>，并设置 <code>Set_ServiceImpl</code> 方法作为注入点。<code>Context</code> 会负责实例化一个具体的 <code>ServiceClass</code>，然后注入到 <code>ClientClass</code> 里。 下面给出 Setter 注入的示例代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SetterInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IServiceClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">String <span class="title">ServiceInfo</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SetterInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ServiceClassA</span> : <span class="title">IServiceClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ServiceInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"我是ServceClassA"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SetterInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ServiceClassB</span> : <span class="title">IServiceClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ServiceInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"我是ServceClassB"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SetterInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ClientClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IServiceClass _serviceImpl;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set_ServiceImpl</span>(<span class="params">IServiceClass serviceImpl</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._serviceImpl = serviceImpl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(_serviceImpl.ServiceInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SetterInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            IServiceClass serviceA = <span class="keyword">new</span> ServiceClassA();</span><br><span class="line">            IServiceClass serviceB = <span class="keyword">new</span> ServiceClassB();</span><br><span class="line">            ClientClass client = <span class="keyword">new</span> ClientClass();</span><br><span class="line"></span><br><span class="line">            client.Set_ServiceImpl(serviceA);</span><br><span class="line">            client.ShowInfo();</span><br><span class="line">            client.Set_ServiceImpl(serviceB);</span><br><span class="line">            client.ShowInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<!-- ![05_3.jpg](https://i.loli.net/2017/09/15/59bbb2c0e0be7.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/5.jpg" class="" title="结果053">

<p><strong>图3.2 Setter注入运行结果</strong></p>
<h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>另外一种依赖注入方式，是通过客户类的构造函数，向客户类注入服务类实例。 构造注入（ <em>Constructor Injection</em> ）是指在客户类中，设置一个服务类接口类型的数据成员，并以构造函数为注入点，这个构造函数接受一个具体的服务类实例为参数，并将它赋给服务类接口类型的数据成员。</p>
<!-- ![06_3.jpg](https://i.loli.net/2017/09/15/59bbb3267fef0.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/6.webp" class="" title="img063">

<p><strong>图3.3 构造注入示意</strong></p>
<p>图3.3是构造注入的示意图，可以看出，与 Setter 注入很类似，只是注入点由 Setter 方法变成了构造方法。这里要注意，由于构造注入只能在实例化客户类时注入一次，所以一点注入，程序运行期间是没法改变一个客户类对象内的服务类实例的。 由于构造注入和 Setter 注入的 <code>IServiceClass</code>，<code>ServiceClassA</code> 和 <code>ServiceClassB</code> 是一样的，所以这里给出另外 <code>ClientClass</code> 类的示例代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConstructorInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ClientClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IServiceClass _serviceImpl;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientClass</span>(<span class="params">IServiceClass serviceImpl</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._serviceImpl = serviceImpl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(_serviceImpl.ServiceInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，唯一的变化就是构造函数取代了 <code>Set_ServiceImpl</code> 方法，成为了注入点。</p>
<h4 id="依赖获取"><a href="#依赖获取" class="headerlink" title="依赖获取"></a>依赖获取</h4><p>上面提到的注入方式，都是客户类被动接受所依赖的服务类，这也符合“注入”这个词。不过还有一种方法，可以和依赖注入达到相同的目的，就是依赖获取。 依赖获取（ <em>Dependency Locate</em> ）是指在系统中提供一个获取点，客户类仍然依赖服务类的接口。当客户类需要服务类时，从获取点主动取得指定的服务类，具体的服务类类型由获取点的配置决定。 可以看到，这种方法变被动为主动，使得客户类在需要时主动获取服务类，而将多态性的实现封装到获取点里面。获取点可以有很多种实现，也许最容易想到的就是建立一个Simple Factory作为获取点，客户类传入一个指定字符串，以获取相应服务类实例。如果所依赖的服务类是一系列类，那么依赖获取一般利用 Abstract Factory 模式构建获取点，然后，将服务类多态性转移到工厂的多态性上，而工厂的类型依赖一个外部配置，如XML文件。 不过，不论使用 Simple Factory 还是 Abstract Factory，都避免不了判断服务类类型或工厂类型，这样系统中总要有一个地方存在不符合 OCP 的 <code>if…else</code> 或 <code>switch…case</code> 结构，这种缺陷是 Simple Factory 和 Abstract Factory 以及依赖获取本身无法消除的，而在某些支持反射的语言中（如 C#），通过将反射机制的引入彻底解决了这个问题（后面讨论）。 下面给一个具体的例子，现在我们假设有个程序，既可以使用 Windows 风格外观，又可以使用 Mac 风格外观，而内部业务是一样的。</p>
<!-- ![07_3.jpg](https://i.loli.net/2017/09/15/59bbb3d9a6b9f.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/7.webp" class="" title="img073">

<p><strong>图3.4 依赖获取示意</strong></p>
<p>上图乍看有点复杂，不过如果读者熟悉 Abstract Factory 模式，应该能很容易看懂，这就是 Abstract Factory 在实际中的一个应用。这里的 Factory Container 作为获取点，是一个静态类，它的“<strong>Type 构造函数</strong>”依据外部的XML配置文件，决定实例化哪个工厂。下面还是来看示例代码。由于不同组件的代码是相似的，这里只给出 Button 组件的示例代码，完整代码请参考文末附上的完整源程序。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IButton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">String <span class="title">ShowInfo</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">WindowsButton</span> : <span class="title">IButton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> String Description &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WindowsButton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Description = <span class="string">"Windows风格按钮"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ShowInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.Description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MacButton</span> : <span class="title">IButton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> String Description &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MacButton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Description = <span class="string">" Mac风格按钮"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">ShowInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.Description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">IWindow <span class="title">MakeWindow</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">IButton <span class="title">MakeButton</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">ITextBox <span class="title">MakeTextBox</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">WindowsFactory</span> : <span class="title">IFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IWindow <span class="title">MakeWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WindowsWindow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IButton <span class="title">MakeButton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WindowsButton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ITextBox <span class="title">MakeTextBox</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WindowsTextBox();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MacFactory</span> : <span class="title">IFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IWindow <span class="title">MakeWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MacWindow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IButton <span class="title">MakeButton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MacButton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ITextBox <span class="title">MakeTextBox</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MacTextBox();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">FactoryContainer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> IFactory factory &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">FactoryContainer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            XmlDocument xmlDoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDoc.Load(<span class="string">"http://www.cnblogs.com/Config.xml"</span>);</span><br><span class="line">            XmlNode xmlNode = xmlDoc.ChildNodes[<span class="number">1</span>].ChildNodes[<span class="number">0</span>].ChildNodes[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"Windows"</span> == xmlNode.Value)</span><br><span class="line">            &#123;</span><br><span class="line">                factory = <span class="keyword">new</span> WindowsFactory();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Mac"</span> == xmlNode.Value)</span><br><span class="line">            &#123;</span><br><span class="line">                factory = <span class="keyword">new</span> MacFactory();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Factory Init Error"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            IFactory factory = FactoryContainer.factory;</span><br><span class="line">            IWindow window = factory.MakeWindow();</span><br><span class="line">            Console.WriteLine(<span class="string">"创建 "</span> + window.ShowInfo());</span><br><span class="line">            IButton button = factory.MakeButton();</span><br><span class="line">            Console.WriteLine(<span class="string">"创建 "</span> + button.ShowInfo());</span><br><span class="line">            ITextBox textBox = factory.MakeTextBox();</span><br><span class="line">            Console.WriteLine(<span class="string">"创建 "</span> + textBox.ShowInfo());</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们用XML作为配置文件。配置文件 <code>Config.xml</code> 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">factory</span>&gt;</span>Mac<span class="tag">&lt;/<span class="name">factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，这里我们将配置设置为 Mac 风格，编译运行上述代码，运行结果如下：</p>
<!-- ![08_3.jpg](https://i.loli.net/2017/09/15/59bbb4ede424d.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/8.jpg" class="" title="结果083">

<p><strong>图3.5 配置Mac风格后的运行结果</strong></p>
<p>现在，我们不动程序，仅仅将配置文件中的“Mac”改为 Windows，运行后结果如下：</p>
<!-- ![09_3.jpg](https://i.loli.net/2017/09/15/59bbb4d5af22b.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/9.jpg" class="" title="结果093">

<p><strong>图3.6 配置为Windows风格后的运行结果</strong></p>
<p>从运行结果看出，我们仅仅通过修改配置文件，就改变了整个程序的行为（我们甚至没有重新编译程序），这就是多态性的威力，也是依赖注入效果。 本节共讨论了三种基本的依赖注入类别，有关更多依赖注入类别和不同类别对比的知识，可以参考 Martin Fowler 的《<a href="https://www.martinfowler.com/articles/injection.html" target="_blank" rel="noopener"><em>Inversion of Control Containers and the Dependency Injection pattern</em></a>》。</p>
<h3 id="反射与依赖注入"><a href="#反射与依赖注入" class="headerlink" title="反射与依赖注入"></a>反射与依赖注入</h3><p>回想上面 <em>Dependency Locate</em> 的例子，我们虽然使用了多态性和 <em>Abstract Factory</em> ，但对 OCP 贯彻的不够彻底。在理解这点前，朋友们一定要注意潜在扩展在哪里，潜在会出现扩展的地方是“新的组件系列”而不是“组件种类”，也就是说，这里我们假设组件就三种，不会增加新的组件，但可能出现新的外观系列，如需要加一套 <em>Ubuntu</em> 风格的组件，我们可以新增 <em>UbuntuWindow</em> 、 <em>UbuntuButton</em> 、 <em>UbuntuTextBox</em> 和 <em>UbuntuFactory</em> ，并分别实现相应接口，这是符合 OCP 的，因为这是扩展。但我们除了修改配置文件，还要无可避免的修改 <em>FactoryContainer</em> ，需要加一个分支条件，这个地方破坏了 OCP。依赖注入本身是没有能力解决这个问题的，但如果语言支持反射机制（ <em>Reflection</em> ），则这个问题就迎刃而解。 我们想想，现在的难点是出在这里：对象最终还是要通过“new”来实例化，而“<code>new</code>”只能实例化当前已有的类，如果未来有新类添加进来，必须修改代码。如果，我们能有一种方法，不是通过“<code>new</code>”，而是通过类的名字来实例化对象，那么我们只要将类的名字作为配置项，就可以实现在不修改代码的情况下，加载未来才出现的类。所以，反射给了语言“预见未来”的能力，使得多态性和依赖注入的威力大增。 下面是引入反射机制后，对上面例子的改进：</p>
<!-- ![10_3.jpg](https://i.loli.net/2017/09/15/59bbb60a2b744.jpg) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/10.webp" class="" title="img103">

<p><strong>图3.7 引入反射机制的Dependency Locate</strong></p>
<p>可以看出，引入反射机制后，结构简单了很多，一个反射工厂代替了以前的一堆工厂，<code>Factory Container</code> 也不需要了。而且以后有新组件系列加入时，反射工厂是不用改变的，只需改变配置文件就可以完成。下面给出反射工厂和配置文件的代码。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyLocate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReflectionFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String _windowType;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String _buttonType;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String _textBoxType;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">ReflectionFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            XmlDocument xmlDoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDoc.Load(<span class="string">"http://www.cnblogs.com/Config.xml"</span>);</span><br><span class="line">            XmlNode xmlNode = xmlDoc.ChildNodes[<span class="number">1</span>].ChildNodes[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            _windowType = xmlNode.ChildNodes[<span class="number">0</span>].Value;</span><br><span class="line">            _buttonType = xmlNode.ChildNodes[<span class="number">1</span>].Value;</span><br><span class="line">            _textBoxType = xmlNode.ChildNodes[<span class="number">2</span>].Value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWindow <span class="title">MakeWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Assembly.Load(<span class="string">"DependencyLocate"</span>).CreateInstance(<span class="string">"DependencyLocate."</span> + _windowType) <span class="keyword">as</span> IWindow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IButton <span class="title">MakeButton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Assembly.Load(<span class="string">"DependencyLocate"</span>).CreateInstance(<span class="string">"DependencyLocate."</span> + _buttonType) <span class="keyword">as</span> IButton;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ITextBox <span class="title">MakeTextBox</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Assembly.Load(<span class="string">"DependencyLocate"</span>).CreateInstance(<span class="string">"DependencyLocate."</span> + _textBoxType) <span class="keyword">as</span> ITextBox;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">window</span>&gt;</span>MacWindow<span class="tag">&lt;/<span class="name">window</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>MacButton<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textBox</span>&gt;</span>MacTextBox<span class="tag">&lt;/<span class="name">textBox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>反射不仅可以与 <em>Dependency Locate</em> 结合，也可以与 <em>Setter Injection</em> 与 <em>Construtor Injection</em> 结合。反射机制的引入，降低了依赖注入结构的复杂度，使得依赖注入彻底符合 OCP，并为通用依赖注入框架（如 Spring.NET 中的 IoC 部分、Unity 等）的设计提供了可能性。</p>
<h3 id="多态的活性与依赖注入"><a href="#多态的活性与依赖注入" class="headerlink" title="多态的活性与依赖注入"></a>多态的活性与依赖注入</h3><h4 id="多态性的活性"><a href="#多态性的活性" class="headerlink" title="多态性的活性"></a>多态性的活性</h4><p>这一节我们讨论多态的活性及其与依赖注入类型选择间密切的关系。 首先说明，“多态的活性”这个术语是我个人定义的，因为我没有找到既有的概念名词可以表达我的意思，所以就自己造了一个词。这里，某多态的活性是指被此多态隔离的变化所发生变化的频繁程度，频繁程度越高，则活性越强，反之亦然。 上文说过，多态性可以隔离变化，但是，不同的变化，发生的频率是不一样的，这就使得多态的活性有所差别，这种差别影响了依赖注入的类型选择。 举例来说，本文最开始提到的武器多态性，其活性非常高，因为在那个程序中，<em>Role</em> 在一次运行中可能更换多次武器。而现在我们假设 <em>Role</em> 也实现了多态性，这是很可能的，因为在游戏中，不同类型的角色（如暗夜精 灵、牛头人、矮人等）很多属性和业务是想通的，所以很可能通过一个 <em>IRole</em> 或 <em>AbstractRole</em> 抽象类实现多态性，不过，<em>Role</em> 在实例化后（一般在用户登录成功后），是不会变化的，很少有游戏允许同一个玩家在运行中变换 <em>Role</em> 类型，所以 <em>Role</em> 应该是一但实例化，就不会变化，但如果再实例化一个（如另一个玩家登录），则可能就变化了。最后，还有一种多态性是活性非常低的，如我们熟悉的数据访问层多态性，即使我们实现了 SQL Server、Oracle 和 Access 等多种数据库的访问层，并实现了依赖注入，但几乎遇不到程序运行着就改数据库或短期内数据库频繁变动的情况。 以上不同的多态性，不但特征不同，其目的一般也不同，总结如下： 高活多态性——指在客户类实例运行期间，服务类可能会改变的多态性。 中活多态性——指在客户类实例化后，服务类不会改变，但同一时间内存在的不同实例可能拥有不同类型的服务类。 低活多态性——指在客户类实例化后，服务类不会改变，且同一时间内所有客户类都拥有相同类型的服务类。 以上三种多态性，比较好的例子就是上文提到的武器多态性（高活）、角色多态性（中活）和数据访问层多态性（低活）。另外，我们说一种多态性是空间稳定的，如果同一客户类在同一时间内的所有实例都依赖相同类型的服务类，反之则叫做空间不稳定多态性。我们说一种多态性是时间稳定的，如果一个客户类在实例化后，所以来的服务类不能再次更改，反之则叫做时间不稳定多态性。显然，高活多态性时间和空间均不稳定；中活多态性是时间稳定的，但空间不稳定；低活多态性时间空间均稳定。</p>
<h4 id="不同活性多态的依赖注入选择"><a href="#不同活性多态的依赖注入选择" class="headerlink" title="不同活性多态的依赖注入选择"></a>不同活性多态的依赖注入选择</h4><p>一般来说，高活多态性适合使用 Setter 注入。因为 Setter 注入最灵活，也是唯一允许在同一客户类实例运行期间更改服务类的注入方式。并且这种注入一般由上下文环境通过 Setter 的参数指定服务类类型，方便灵活，适合频繁变化的高活多态性。 对于中活多态性，则适合使用 Constructor 注入。因为 Constructor 注入也是由上下文环境通过 Construtor 的参数指定服务类类型，但一点客户类实例化后，就不能进行再次注入，保证了其时间稳定性。 而对于低活多态性，则适合使用 <em>Dependency Locate</em> 并配合文件配置进行依赖注入，或 Setter、Constructor 配合配置文件注入，因为依赖源来自文件，如果要更改服务类，则需要更改配置文件，一则确保了低活多态性的时间和空间稳定性，二是更改配置文件的方式方便于大规模服务类替换。（因为低活多态性一旦改变行为，往往规模很大，如替换整个数据访问层，如果使用 Setter 和 Construtor 传参，程序中需要改变的地方不计其数） 本质上，这种选择是因为不同的依赖注入类型有着不同的稳定性，大家可以细细体会“活性”、“稳定性”和“依赖注入类型”之间密切的关系。</p>
<h2 id="IoC-Container"><a href="#IoC-Container" class="headerlink" title="IoC Container"></a>IoC Container</h2><h3 id="IoC-Container-出现的必然性"><a href="#IoC-Container-出现的必然性" class="headerlink" title="IoC Container 出现的必然性"></a>IoC Container 出现的必然性</h3><p>上面讨论了诸多依赖注入的话题。说道依赖注入，就不能不说 <em>IoC Container</em> （IoC 容器），那么到底什么是 <em>IoC</em> 容器？我们还是先来看看它的出现背景。 我们知道，软件开发领域有句著名的论断：不要重复发明轮子！因为软件开发讲求复用，所以，对于应用频繁的需求，总是有人设计各种通用框架和类库以减轻人们的开发负担。例如，数据持久化是非常频繁的需求，于是各种 <em>ORM</em> 框架应运而生；再如，对 <em>MVC</em> 的需求催生了 <em>Struts</em> 等一批用来实现 <em>MVC</em> 的框架。 随着面向对象分析与设计的发展和成熟，<em>OOA&amp;D</em> 被越来越广泛应用于各种项目中，然而，我们知道，用 <em>OO</em> 就不可能不用多态性，用多态性就不可能不用依赖注入，所以，依赖注入变成了非常频繁的需求，而如果全部手工完成，不但负担太重，而且还容易出错。再加上反射机制的发明，于是，自然有人开始设计开发各种用于依赖注入的专用框架。这些专门用于实现依赖注入功能的组件或框架，就是 <em>IoC Container</em> 。 从这点看，<em>IoC Container</em> 的出现有其历史必然性。目前，最著名的 <em>IoC</em> 也许就是 <em>Java</em> 平台上的 <em>Spring</em> 框架的 <em>IoC</em> 组件，而 <em>.NET</em> 平台上也有 <em>Spring.NET</em> 和 <em>Unity</em> 等。</p>
<h3 id="IoC-Container-的分类"><a href="#IoC-Container-的分类" class="headerlink" title="IoC Container 的分类"></a>IoC Container 的分类</h3><p>前面曾经讨论了三种依赖注入方式，但是，想通过方式对 <em>IoC Container</em> 进行分类很困难，因为现在 <em>IoC Container</em> 都设计很完善，几乎支持所有依赖注入方式。不过，根据不同框架的特性和惯用法，还是可以讲 <em>IoC Container</em> 分为两个大类。</p>
<h4 id="重量级-IoC-Container"><a href="#重量级-IoC-Container" class="headerlink" title="重量级 IoC Container"></a>重量级 IoC Container</h4><p>所谓重量级 <em>IoC Container</em> ，是指一般用外部配置文件（一般是 <em>XML</em> ）作为依赖源，并托管整个系统各个类的实例化的 <em>IoC Container</em> 。这种 <em>IoC Container</em> ，一般是承接了整个系统几乎所有多态性的依赖注入工作，并承接了所有服务类的实例化工作，而且这些实例化依赖于一个外部配置文件，这种 <em>IoC Container</em> ，很像通过一个文件，定义整个系统多态结构，视野宏大，想要很好驾驭这种 <em>IoC Container</em> ，需要一定的架构设计能力和丰富的实践经验。 <em>Spring</em> 和 <em>Spring.NET</em> 是重量级 <em>IoC Container</em> 的例子。一般来说，这种 <em>IoC Container</em> 稳定性有余而活性不足，适合进行低活多态性的依赖注入。</p>
<h4 id="轻量级-IoC-Container"><a href="#轻量级-IoC-Container" class="headerlink" title="轻量级 IoC Container"></a>轻量级 IoC Container</h4><p>还有一种 <em>IoC Container</em> ，一般不依赖外部配置文件，而主要使用传参的 Setter 或 Construtor 注入，这种IoC Container叫做轻量级 <em>IoC Container</em> 。这种框架很灵活，使用方便，但往往不稳定，而且依赖点都是程序中的字符串参数，所以，不适合需要大规模替换和相对稳定的低活多态性，而对于高活多态性，有很好的效果。 <em>Unity</em> 是一个典型的轻量级 <em>IoC Container</em> 。</p>
<h3 id="NET平台上典型-IoC-Container-推介"><a href="#NET平台上典型-IoC-Container-推介" class="headerlink" title=".NET平台上典型 IoC Container 推介"></a>.NET平台上典型 IoC Container 推介</h3><h4 id="Spring-NET"><a href="#Spring-NET" class="headerlink" title="Spring.NET"></a>Spring.NET</h4><!-- ![11_3.png](https://i.loli.net/2017/09/15/59bbb86a93913.png) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/11.png" class="" title="img113">

<p><em>Spring.NET</em> 是 <em>Java</em> 平台上 <em>Spring</em> 对 <em>.NET</em> 平台的移植，使用方法和 <em>Spring</em> 很像，并且功能强大，是 <em>.NET</em> 平台上大中型开发 <em>IoC Container</em> 的首选之一。除了 <em>DI</em> 外，<em>Spring.NET</em> 也包括 <em>AOP</em> 等诸多功能。 <em>Spring.NET</em> 的官方网站是：<a href="http://www.springframework.net/" target="_blank" rel="noopener">http://www.springframework.net/</a></p>
<h4 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h4><!-- ![12_3.gif](https://i.loli.net/2017/09/15/59bbb8f4a6954.gif) -->
<img data-src="/2017/09/15/those-stories-of-dependency-injection/12.webp" class="" title="img123">

<p>对于小型项目和讲求敏捷的团队，<em>Spring.NET</em> 可能有点太重量级，那么可以选择轻量级的 <em>Unity</em> 。<em>Unity</em> 是微软 <em>patterns &amp; practices</em> 团队推出的轻量级框架，非常好用，目前最新版本是 1.2。</p>
<p><em>Unity</em> 的官方网站是：<a href="http://unity.codeplex.com/" target="_blank" rel="noopener">http://unity.codeplex.com/</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><p><a href="http://www.codeproject.com/KB/aspnet/IOCDI.aspx" target="_blank" rel="noopener">Shivprasad koirala, Design pattern – Inversion of control and Dependency injection</a></p>
</li>
<li><p><a href="http://www.martinfowler.com/articles/injection.html" target="_blank" rel="noopener">Martin Fowler, Inversion of Control Containers and the Dependency Injection pattern</a></p>
</li>
<li><p><a href="http://docs.codehaus.org/display/PICO/IoC+Types" target="_blank" rel="noopener">Paul, IoC Types</a></p>
</li>
<li><p>Eric Freeman, Elisabeth Freeman. Head First Design Patterns. O’Reilly Media, 2004. ISBN 0596007142</p>
</li>
<li><p>Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, 1995. ISBN 0201633612</p>
</li>
<li><p>Patrick Smacchia 著，施凡等 译，C#和.NET2.0 平台、语言与框架。2008.1，人民邮电出版</p>
</li>
<li><p>Jeffrey Rechter 著，CLR via C#（影印版）。2008.8，人民邮电出版</p>
</li>
</ol>
]]></content>
      <categories>
        <category>C#</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>依赖注入</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序——RushA</title>
    <url>/2017/08/16/wechat-mini-programs-rusha/</url>
    <content><![CDATA[<p>因为现在是三个人合租，所以免不了 AA，但是在付钱的时候 AA，未免也太麻烦了。所以就要等到事后再去算账，然后分别转账，数量少还好，如果数量多的话，计算起来就会特别繁琐，尤其是有些东西不是完全公平的 AA，每个人所占的比例不同。 由此，想要借助<strong>微信小程序</strong>平台来进行一款记账小程序的开发，也可以借此学习一下小程序。</p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h3><p>首先是名字，叫做 <em>RushA</em> ，本来是想取名叫 <em>RushB</em> 的，但是被已经有这个名字了，所以只能退而求其次。名字的来源是 <code>CS:GO</code> 中一个“战术”，意思就是 5 人快速去 B 点，从而达到出其不意的效果。通常这么使用：</p>
<blockquote>
<p>Rush B, dont stop.</p>
</blockquote>
<p>其他的话没有什么别的意思，纯粹是应景。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>然后是需要实现的功能：</p>
<ol start="0">
<li><p>实现两人以上的 <code>AA</code> 账单分配；</p>
</li>
<li><p>能够动态的添加人数，并且添加要方便，每添加一个人就要分配一个颜色，这样会比较容易辨别，最好添加几个快捷选项；</p>
</li>
<li><p>在添加人员之后，则进入记账页面，可以一条一条的添加项目。</p>
</li>
</ol>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>hexakosioihexekontahexaphobia</title>
    <url>/2017/07/11/hexa-koseeo-ee-hexe-konta-hexaphobia/</url>
    <content><![CDATA[<p>hexakosioihexekontahexaphobia 是指专门指害怕666这个数字，即666恐惧症。 还有一首同名歌曲。蛮好听的。 <a href="http://www.niubb.net/a/20160828/308224.html" target="_blank" rel="noopener">来源</a></p>
]]></content>
      <categories>
        <category>趣闻</category>
      </categories>
      <tags>
        <tag>趣闻</tag>
      </tags>
  </entry>
  <entry>
    <title>在树莓派3上使用 ASF（ArchiSteamFarm） 挂卡</title>
    <url>/2017/07/07/how-to-use-asf-archisteamfarm-on-the-raspberry-pi-3/</url>
    <content><![CDATA[<p>最近和室友沉迷 <em>CS:GO（Counter-Strike: Global Offensive）</em>  ，然后就需要钱来起枪了呀。但是又不想往 <em>Steam</em> 里充钱，所以就瞄上了我库里 60 来个游戏，想挂点卡来换点钱去买枪。</p>
<a id="more"></a>

<h2 id="先介绍了一下，什么是挂卡？"><a href="#先介绍了一下，什么是挂卡？" class="headerlink" title="先介绍了一下，什么是挂卡？"></a>先介绍了一下，什么是挂卡？</h2><blockquote>
<p>卡的全称是<strong>Steam 集换式卡牌</strong>，当我们在运行游戏的时候，Steam 平台会产生一些该游戏的卡牌进入库存中。但不是所有游戏都会掉落，我们在游戏商店页面中，如果看到“集换式卡牌”几个字才说明这个游戏会掉卡。 卡牌有什么用？集换式卡牌可不是拿来打牌的，首先就是收藏用，如果你觉得某张卡很好看的话，你就可以把它留着。但是卡牌最主要的作用是用来合徽章的。 我们进入 Steam 的徽章界面就能看到有一行行游戏徽章和卡牌，当我们收集齐一个游戏的徽章之后，就可以消耗它们制作徽章。制作徽章后会得到：徽章、Steam 等级经验、游戏相关背景（用于 Steam 个人资料页）、表情以及随机游戏打折券。 但是需要说明的是，每一个游戏最多只会掉落所有卡牌总量的一半，所以如果你想集齐合徽章，剩下的一半只能通过交易（交换）或是在市场购买获得。 既然卡牌有这样的作用和需求，那么就一定会形成市场，所以如果你对这些卡牌不感兴趣，那就完全可以把它们都卖掉。在市场中出售这些卡牌可以赚取货币，自动存入Steam钱包中，这些货币与当地货币是1：1的兑换率，不能提现，但是可以用来购买游戏或是市场中的别的东西。 <a href="http://soft.zol.com.cn/572/5727507.html" target="_blank" rel="noopener">萌新教学 Steam挂卡回本是怎么一回事？</a></p>
</blockquote>
<p>有了钱之后，就可以去 <em>cs:go</em> 起枪了呀~</p>
<h2 id="游戏来源"><a href="#游戏来源" class="headerlink" title="游戏来源"></a>游戏来源</h2><p>通过上面的介绍我们可以知道，要想挂卡，首先得需要游戏，但是 steam 的大部分游戏都不是免费的，所以就陷入了一个死循环。 你想得没错，要是想挂卡，就必须要先花钱买游戏。但好消息是，有十分优惠的途径可以来获取这些游戏。 具体方式你可以在万能的某宝上面输入关键词“喜加一”即可。刚才去看了一下，最便宜可以到 0.3 元一个游戏。</p>
<h2 id="如何挂卡"><a href="#如何挂卡" class="headerlink" title="如何挂卡"></a>如何挂卡</h2><p>挂卡的方式有两种（我所知道的），最普通的就是自己人工挂卡，即自己开着游戏玩，然后等待掉卡。这种方法的对于挂卡来说没有什么优点，缺点倒是一大堆，首先是效率不高，你在挂卡的时候必须开着游戏，若是小游戏还好，可以后台运行。但要是什么 3A 大作，可能电脑就只能单纯用来打游戏了；其次就是功耗的问题，如果你是偶尔挂挂的话还好，但是要是你想全天 24 小时挂卡，那电费就是一个问题了。 所以就要轮到我们的挂卡工具出厂了，据我所知有两款分别是： <em>Idle Master</em> ： 前者只能在 <em>Windows</em> 平台下运行，并且是图形界面，使用起来很方便。但是作者已经不再更新和维护了。 下载地址：<a href="http://www.steamidlemaster.com/" target="_blank" rel="noopener">Idle Master - Get your Steam Trading Cards the Easy Way</a> 然后呢，就是这次的主角 <em>Archi Steam Farm</em> （下文简称 <em>ASF</em> ）： <em>ASF</em> 是由 <em>C#</em> 编写，所以他可以通过 <em>mono</em> 从而可以在 <em>Linux</em> 系统上运行。既然是 <em>Linux</em> 那么也就能在树莓派上运行啦！至于为什么要在树莓派上运行，最主要的原因就是功耗，树莓派的功耗比起我的笔记本电脑来说小的不是一点两点，正常情况下，只要树莓派的散热能做好，运行 <em>ASF</em> 后就可以一直不关机。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="ASF-配置"><a href="#ASF-配置" class="headerlink" title="ASF 配置"></a>ASF 配置</h3><p>首先我们需要在 <em>Windows</em> 系统下对 <em>ASF</em> 进行配置。 先去下载：<a href="https://github.com/JustArchi/ArchiSteamFarm/releases/tag/2.3.2.0" target="_blank" rel="noopener">Archi Steam Farm</a> 选择下面的 <em>ASF.zip</em> 就可以了。 下载完成后解压，打开文件夹中的 <em>ASF-ConfigGenerator.exe</em> ，对 <em>ASF</em> 进行配置。配置其实很简单，按照提示一步步操作就好了，并是中文提示，所以不会有太大的问题；</p>
<h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p>然后我们需要将这个文件夹传输到树莓派上面，你可以使用U盘，也可以用 <em>FTP</em> 来进行传输。放到任意目录下就可以了（只要你能找得到）；</p>
<h3 id="安装-mono"><a href="#安装-mono" class="headerlink" title="安装 mono"></a>安装 mono</h3><p>接下来我们需要安装 <em>mono</em> 。</p>
<p>可以树莓派直接连接输入输出设备，也可以在 <em>Windows</em> 上通过 <em>ssh</em> 来连接树莓派。</p>
<p>在终端依次输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://download.mono-project.com/repo/debian raspbianjessie main"</span> | sudo tee /etc/apt/sources.list.d/mono-official.list</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure>

<p>耐心等待后，再输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install mono-devel</span></span><br></pre></td></tr></table></figure>

<p>这时候 <em>mono</em> 就开始下载并安装了。由于下载速度的原因，时间可以会比较长。请耐心等待，并且不要关闭终端或切断电源。 安装完成后输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mono -V</span></span><br></pre></td></tr></table></figure>

<p>（注意 <code>V</code> 要大写）查看 <em>mono</em> 版本。好像最新版的 <em>ASF</em> 需要 <em>mono 4.8</em> 及以上版本才可以正常运行，通过上述方法安装的 <em>mono</em> 是 <em>5.0.1 Stable (5.0.1.1)</em> ，符合 <em>ASF</em> 的要求。</p>
<h3 id="安装-Screen"><a href="#安装-Screen" class="headerlink" title="安装 Screen"></a>安装 Screen</h3><p>由于 <em>ASF</em> 需要全天启动，但是我们又不能一直开着 <em>ssh</em> 连接，所以我们就需要安装 <em>Screen</em> 来使 <em>ASF</em> 可以后台运行。 在终端分别输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install screen</span></span><br></pre></td></tr></table></figure>

<p>稍等片刻，<code>Screen</code> 就安装完成了。</p>
<h3 id="运行-ASF"><a href="#运行-ASF" class="headerlink" title="运行 ASF"></a>运行 ASF</h3><p>进入刚才复制到树莓派中的 <em>ASF</em> 目录，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> screen -S asf</span></span><br></pre></td></tr></table></figure>

<p><em>ASF</em> 可以为任意名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mono ASF.exe</span></span><br></pre></td></tr></table></figure>

<p>之后就是熟悉的 <em>ASF</em> 界面了，观察是否运行成功，如果成功了的话就按 Ctrl+a 和 Ctrl+d 就可以将 <em>ASF</em> 挂到后台啦，然后就可以关闭终端或切断 <code>ssh</code> 连接了。 如果想重新打开 <em>ASF</em> ，则可以通过：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> screen -r asf</span></span><br></pre></td></tr></table></figure>

<p>来重新进入。</p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>好啦，教程到这里就结束啦，祝大家挂卡顺利，多出闪卡，早日回本。</p>
<p>等以后有空了会配上图片哒~</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>将博客从阿里云迁移到老薛主机</title>
    <url>/2017/07/06/aliyun-to-laoxuehost/</url>
    <content><![CDATA[<p>将博客从阿里云迁移到老薛主机</p>
<a id="more"></a>

<h2 id="2017年6月23日-15-23"><a href="#2017年6月23日-15-23" class="headerlink" title="2017年6月23日 15:23"></a>2017年6月23日 15:23</h2><p>记录一下，等搬家之后开始动手。 还有 15 天到期，刚去问了一下老薛的客服，说是会有一次免费的网站搬家服务。具体到时候在说。</p>
<h2 id="2017年7月6日-08-43"><a href="#2017年7月6日-08-43" class="headerlink" title="2017年7月6日 08:43"></a>2017年7月6日 08:43</h2><p>然后昨天刚买了一年的香港主机，提供的免费搬家服务，然后就没自己什么事情了。感觉没学到什么东西呀，到时候自己再备份一下吧。</p>
<h2 id="2017年7月7日-14-33"><a href="#2017年7月7日-14-33" class="headerlink" title="2017年7月7日 14:33"></a>2017年7月7日 14:33</h2><p>有一点需要补充的是，换到老薛之后， <code>WordPress</code> 的更新以及插件的更新更加快了，之前在阿里云都是死活更新不了的。</p>
]]></content>
      <categories>
        <category>虚拟主机</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>虚拟主机</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除数组中的 NaN 值</title>
    <url>/2017/06/28/how-to-delete-the-nan-in-the-array/</url>
    <content><![CDATA[<p>今天在刷 FCC <a href="http://(http://www.freecodecamp.cn)" target="_blank" rel="noopener" title="| FreeCodeCamp中文社区">0</a> 的时候遇到这么一题 <a href="http://(http://www.freecodecamp.cn/challenges/falsy-bouncer)" target="_blank" rel="noopener" title="Falsy Bouncer | FreeCodeCamp中文社区">1</a> ，记录一下。</p>
<a id="more"></a>

<h2 id="Falsy-Bouncer（真假美猴王）"><a href="#Falsy-Bouncer（真假美猴王）" class="headerlink" title="Falsy Bouncer（真假美猴王）"></a>Falsy Bouncer（真假美猴王）</h2><p>过滤数组假值 删除数组中的所有假值。 在 <code>JavaScript</code> 中，假值有 <code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code> 和 <code>NaN</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p><code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code> 这几个都很好处理，只要判断是不是等于这些值就好了。就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">    <span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="literal">false</span>;</span><br><span class="line">    &#125;).filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="string">"0"</span>;</span><br><span class="line">    &#125;).filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="literal">undefined</span>;</span><br><span class="line">    &#125;).filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h2><p>但是 <code>NaN</code> 则不能这么判断，因为 <code>NaN</code> 有个不同的地方，就是 <code>NaN</code> 不和任何值相等，包括他自己 <a href="http://(http://www.shaoqun.com/a/249082.aspx)" target="_blank" rel="noopener" title="[Java教程]js删除数组中的NaN">3</a>，也就是说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>所以如果使用和之前几个值一样使用 <code>filter()</code> <a href="http://(https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)" target="_blank" rel="noopener" title="Array.prototype.filter() - JavaScript | MDN">4</a> 的话：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">NaN</span>; <span class="comment">// 这里永远会有返回。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>所以，结合上面说的 <code>NaN</code> 的特点，这部分应该这么写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == value)</span><br><span class="line">        <span class="keyword">return</span> value; <span class="comment">// 对于非 NaN 值来说，永远会有返回值。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>关于题目，到这里就先结束了，发现自己了解的还是太少，等下去总结一下这些“假”值的特点。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title>两种方法显示节点的层次结构</title>
    <url>/2017/06/15/the-two-methods-show-the-hierarchical-structure-of-the-nodes/</url>
    <content><![CDATA[<p>有时为了更好的看清网页的布局，仅仅通过看代码或者 <em>F12</em> 的调试是不够的。这时候我们就需要一些「黑科技」。这里介绍两种方法，一种是通过 <em>JavaScript</em> 来显示，另一种是通过 <em>CSS</em> 样式来显示。</p>
<a id="more"></a>

<h2 id="JavaScript-方法"><a href="#JavaScript-方法" class="headerlink" title="JavaScript 方法"></a>JavaScript 方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>), <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a.style.outline = <span class="string">"1px solid #"</span> + (~~(<span class="built_in">Math</span>.random() * (<span class="number">1</span> &amp; lt; &amp; lt; <span class="number">24</span>))).toString(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 <em>F12</em> 中输入此段 <em>JavaScript</em> 代码，就可以显示各个节点的外部框架。</p>
<p>效果如下：</p>
<!-- ![js](https://ooo.0o0.ooo/2017/06/15/594230a99e355.png) -->
<img data-src="/2017/06/15/the-two-methods-show-the-hierarchical-structure-of-the-nodes/js.png" class="" title="js">

<p>原网站：</p>
<!-- ![原网站](https://ooo.0o0.ooo/2017/06/15/594230a9285a6.png) -->
<img data-src="/2017/06/15/the-two-methods-show-the-hierarchical-structure-of-the-nodes/%E5%8E%9F%E7%BD%91%E7%AB%99.png" class="" title="原网站">

<h2 id="CSS-方法"><a href="#CSS-方法" class="headerlink" title="CSS 方法"></a>CSS 方法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>);&#125;</span><br><span class="line">* * &#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, .<span class="number">2</span>);&#125;</span><br><span class="line">* * * &#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, .<span class="number">2</span>);&#125;</span><br><span class="line">* * * * &#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>, .<span class="number">2</span>);&#125;</span><br><span class="line">* * * * * &#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">2</span>);&#125;</span><br><span class="line">* * * * * * &#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, .<span class="number">2</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>只要在网站中使用这一段 <em>CSS</em> 样式，就能看到如下效果：</p>
<!-- ![css](https://ooo.0o0.ooo/2017/06/15/594230a9a0f03.png) -->
<img data-src="/2017/06/15/the-two-methods-show-the-hierarchical-structure-of-the-nodes/css.png" class="" title="css">

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种方法都有自己的优缺点，<em>JavaScript</em> 的使用方便，但是只能适用于单个网站；而 <em>CSS</em> 样式适用于数量多的网站（只需要在公共 <em>CSS</em> 文件中加入这些代码就可以了）。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><blockquote>
<p><a href="https://www.zhihu.com/question/27432017/answer/40621923" target="_blank" rel="noopener">代码来源-知乎</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.quora.com/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about/answer/Gajus-Kuizinas" target="_blank" rel="noopener">代码来源-Quora</a></p>
</blockquote>
]]></content>
      <categories>
        <category>WEB 前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>WEB前端</tag>
        <tag>CSS</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>关于招聘，求职，面试。</title>
    <url>/2017/06/10/about-recruitment-job-search-interview/</url>
    <content><![CDATA[<p>这几天正要求职，和很多公司企业有交流，总结一点经验。</p>
<p>本来一周前应该完成的，因为要去参加毕业典礼的原因拖了一礼拜。</p>
<a id="more"></a>

<h2 id="注意培训公司"><a href="#注意培训公司" class="headerlink" title="注意培训公司"></a>注意培训公司</h2><blockquote>
<p>一切以岗前培训、工作介绍为名的，收取报名费、培训费的都是耍流氓。切记！——来自我的大学老师 ZYW</p>
</blockquote>
<p>当你在智联招聘、前程无忧等求职平台上填写简历后，迎接你的将是各种鱼目混杂的<strong>培训公司</strong>，如何识别这些公司呢？</p>
<ol start="0">
<li><p>学历要求低，专业要求低，唯一的要求是对这个行业有兴趣；</p>
</li>
<li><p>不符合应届生的工资标准，这个要自行判断了；</p>
</li>
<li><p>广撒网，你可以在这个公司的简介中找到它所有的招聘信息，如果你发现他有超级多要招聘的岗位时（并且大多都是实习岗），基本上就是培训公司没跑了；</p>
</li>
<li><p>善用搜索引擎，当你不确定公司是否为培训公司时，你可以上网查询这家公司，类似于「<a href="http://www.tianyancha.com/" target="_blank" rel="noopener">天眼查</a>」这一类。你可以在其中查到企业的子母公司，如果你发现企业本身没有什么培训公司的特征，但是它有一个类似于「互联网培训」的母公司的话，那很有可能也是一个培训公司。你也可以在百度贴吧等社交网站查询企业名称，大多时候已经有前人帮你探路了（但是要注意的是，贴吧鱼龙混杂，务必需要注意）；</p>
</li>
<li><p>最后一点就是培训公司会主动打电话给你，即使你没有往他们公司投放简历。导致出现这一情况的原因是，你在招聘网上设置了简历公开这一选项。这样的话，公司可以通过少许的付费来直接获得你的简历。当然这有好也有坏，因为同样的也有不少其他公司会注意到你。但是鉴于自己只是毕业生的缘故（并且不是特别优秀的那种），还是不要公开自己的简历了吧。还有就是当你找到工作后，记得也把简历设置为私有的。</p>
</li>
</ol>
<h2 id="面试-amp-笔试"><a href="#面试-amp-笔试" class="headerlink" title="面试&amp;笔试"></a>面试&amp;笔试</h2><ol start="0">
<li><p>切记不要说谎，实事求是，会就是会，不会就是不会，这一点是最重要的；</p>
</li>
<li><p>对于应届毕业生来说，不会问太难的东西，多半是基础知识点。所以这时候临时抱佛脚通常是有奇效的（至于怎么抱，平时的积累很重要，然后就去找各种面试题咯）；</p>
</li>
<li><p>熟悉的自己写在简历上的项目，不要到时一问三不知；</p>
</li>
<li><p>着装方面，程序员的话我觉得并不需要西装革履，打扮得清爽一点就好啦。</p>
</li>
</ol>
<h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><!-- ![简历模版.jpg](https://ooo.0o0.ooo/2017/06/20/594916856b099.jpg) -->


<p>简历方面，除了美术设计方面的职位，都不要太花哨，如果你是应聘前端，你完全可以做个网页，然后把你毕身所学都用上去。简历的样式只要看起来条理清晰就好了。</p>
<ol start="0">
<li><p>照片不需要放上去；</p>
</li>
<li><p>和面试一样实事求是（具体见这里：<a href="https://www.zhihu.com/question/21660867" target="_blank" rel="noopener">在简历上造假是可以接受的吗？</a>）；</p>
</li>
<li><p>控制简历长度，以及内容的分配。我个人是比较喜欢就一页纸。注意简洁明了，个人信息只要写：姓名、求职意向、出生年月、毕业学校专业是否为应届毕业生，比如说：「浙江大学计算机与科学专业应届毕业生」或者「浙江大学计算机与科学专业（2017）」，以及你的籍贯，为什么要写籍贯呢？如果你不是在本地求职，而是在外地，那么拼运气的时候就到了。如果你的 HR 是你的老乡的话，这肯定一个大大的加分项啊！最后就是联系方式。具体见下图：</p>
</li>
</ol>
<!-- ![snipaste_20170610_134835.png](https://ooo.0o0.ooo/2017/06/10/593b8a955e9d7.png) -->
<img data-src="/2017/06/10/about-recruitment-job-search-interview/%E7%AE%80%E5%8E%86%E6%8A%AC%E5%A4%B4.png" class="" title="简历抬头">

<ol start="3">
<li><p>HR 最在意的还是你的项目经历，所以这一部分务必认真对待。如果你有多个项目，请不要按照时间来排序，而是按照你在项目中做出的实际贡献来排序。要写出你在此项目中担任的角色，以及负责哪些部分，这些方面才是 HR 真正看中的。你可以把一页纸的大部分就用来描写这些；</p>
</li>
<li><p>当然你也可以在招聘网上填写你的简历，那会更加规范。填写完后大部分网站都可以生成出 HTML 格式或是 Word 格式的简历文件，你可以稍加修改直接使用。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>祝大家都能找到称心的工作。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>《编码：隐匿在计算机软硬件背后的语言》</title>
    <url>/2017/05/25/codethe-hidden-language-of-computer-hardware-and-software/</url>
    <content><![CDATA[<p>《编码：隐匿在计算机软硬件背后的语言》（Code:The Hidden Language of Computer Hardware and Software）</p>
<a id="more"></a>

<ol>
<li><p>那时很可能有些人会认为“logic gates”（逻辑门）装置是以著名的微软公司创始人的名字来命名的。（Bill Gates 中的 Gates 在英文中有“门”的意思）——P108；</p>
</li>
<li><p>Meow：猫叫的声音——P111；</p>
</li>
<li><p>一般来说，对于涉及正数和负数的加法，如果两个操作数的符号位相同，但结果的符号位不同，则结果是无效的。——P159；</p>
</li>
</ol>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>世界，您好！</title>
    <url>/2017/05/24/hello-world/</url>
    <content><![CDATA[<p>记录一下，希望以后能一直坚持下去。</p>
]]></content>
      <categories>
        <category>记事</category>
      </categories>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Story of My Life</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>关于我什么呢，我也不知道，放一些一直以来收集的骚话吧！</p>
<ul>
<li><blockquote>
<p>  <a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish" target="_blank" rel="noopener">Embrace, extend, and extinguish.</a></p>
</blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E6%8B%A5%E6%8A%B1%E3%80%81%E6%89%A9%E5%B1%95%E5%86%8D%E6%B6%88%E7%81%AD" target="_blank" rel="noopener">拥抱，扩展再消灭。</a></p>
</li>
<li><p><a href="https://www.v2ex.com/t/653386#reply7" target="_blank" rel="noopener">海記憶體知己，天涯若比鄰。</a></p>
</li>
<li><p>World is powered by solitude.</p>
</li>
<li><p>Do have faith in what you’re doing.</p>
</li>
<li><blockquote>
<p>  <a href="https://bedtimepoem.com/?p=12276" target="_blank" rel="noopener">人の命は、2万分の1でも8万分の1でもない。そうじゃなくて、そこには「1人が死んだ事件が2万件あった」ってことなんだよ。</a></p>
</blockquote>
<p>人的性命（死亡）不该说是2万分之一，或8万分之一，它的意思是，有一个人死了这件事，发生了2万次。</p>
</li>
<li><p>你从小到大做了无数个大大小小的选择，都不能阻止你看到这句话。</p>
</li>
<li><blockquote>
<p>  <a href="https://www.bilibili.com/video/av95917816?t=506" target="_blank" rel="noopener">So if people are sufficiently worried, then there&#39;s a lot less to worry about. But if no one is worried, that&#39;s when you should worry!</a></p>
</blockquote>
<p>所以说：如果人们都足够担心的话，那你就没什么可担心的；但如果没有人担心的话，那你就得好好担心一下了。</p>
</li>
<li><p><a href="https://www.bilibili.com/video/av80845403" target="_blank" rel="noopener">人的每一分钟都在变化，所以也要接受别人有变化。如果那个人跟你一日为友，就终身为友，你应该心里很紧张才对。就是：「怎么啦，我们两个都从此不变化了嘛？」所以如果有了变化，然后人际关系也跟着有了变化，他是你某一阶段最好的朋友，然后他当完了他该当的朋友，他就去当别人的朋友了。就接受人生的变化，是最好的态度。</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av15267247?p=82&t=44" target="_blank" rel="noopener">计算机的所有东西都是人做出来的，别人能想得出来的，我也一定能想得出来。在计算机里头，没有任何黑魔法。所有的东西，只不过是我现在不知道而已，总有一天，我会把所有的细节、所有的内部的东西全都搞明白的！</a></p>
</li>
<li><p><a href="https://cnbible.com/proverbs/16-18.htm" target="_blank" rel="noopener">骄傲在败坏以先，狂心在跌倒之前。</a></p>
</li>
<li><p>所有的离别，都是我在练习失去你。</p>
<p><img data-src="index/%E6%89%80%E6%9C%89%E7%9A%84%E7%A6%BB%E5%88%AB%EF%BC%8C%E9%83%BD%E6%98%AF%E6%88%91%E5%9C%A8%E7%BB%83%E4%B9%A0%E5%A4%B1%E5%8E%BB%E4%BD%A0%E3%80%82.jpg" alt="所有的离别，都是我在练习失去你。"></p>
</li>
<li><p><a href="https://baike.baidu.com/item/%E5%8D%9C%E7%AE%97%E5%AD%90%C2%B7%E5%92%8F%E6%A2%85/124232" target="_blank" rel="noopener">已是悬崖百丈冰，犹有花枝俏。</a></p>
</li>
<li><p>Teaching sand to think was a mistake.</p>
<p><a href="https://www.bilibili.com/video/av87216714?t=949" target="_blank" rel="noopener"><img data-src="index/Teaching-sand-to-think-was-a-mistake.png" alt="Teaching sand to think was a mistake."></a></p>
</li>
<li><p><a href="https://weibo.com/1663937380/Is0UJchJW" target="_blank" rel="noopener">一个健康的社会不应该只有一种声音。</a></p>
</li>
<li><p>警察只是按要求训诫，主播只是按稿子播报，后台只是按上面意思删帖撤热搜。大家都认为自己是好人，一切是生活所迫。只有当每一个人都敢说“我拒绝撒谎”，“我拒绝执行”的时候，我们才不会在某一天求助无门，走投无路，像狗一样地死去。但你敢吗。你不敢。所以请记得，无论这个世界最终烂成什么样子，都是在我们的默许之下完成的。</p>
<p><img data-src="index/%E9%99%88%E7%94%9F%E5%A4%A7%E7%8E%8B.jpg" alt="陈生大王"></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av77327621?t=140" target="_blank" rel="noopener">那熔铸眼前世界的炉火，他们早已经忘记了。</a></p>
</li>
<li><p>Everything will be fine in the end, Morty, And if it isn&apos;t, it&apos;s not the end yet.</p>
<p><img data-src="index/Everything-will-be-fine-in-the-end.jpg" alt="Everything-will-be-fine-in-the-end.jpg"></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av83908288#reply2270052215" target="_blank" rel="noopener">「轻奢」这个词造得可谓精妙绝伦，是一种市场细分后的修辞手法。比如 100 块的衣服叫「屌丝」，1000 块的叫「奢侈品」，500 块的命名就很讲究了。不能叫「重屌」，而要叫「轻奢」，给人一种我在向社会上层流动的幻觉。</a></p>
</li>
<li><blockquote>
<p>  <a href="https://book.douban.com/subject/1051524/" target="_blank" rel="noopener">She was still too young to know that life never gives anything for nothing, and that a price is always exacted for what fate bestows.</a></p>
</blockquote>
<p>她那时候还太年轻，不知道所有命运馈赠的礼物，早已在暗中标好了价格。</p>
</li>
<li><p>我们不能随便生气。生气的时候，你会使出真本领。这样，别人就会知道你的真本领很烂。</p>
</li>
<li><p>便宜的东西只有一个优点：就是便宜。</p>
</li>
<li><p>贵的东西只有一个缺点：就是贵。</p>
</li>
<li><p>人的大脑直到 25 岁才发育完全，然而从 15 岁到 18 岁他们的大脑运用得如何，往往将决定他们的余生。</p>
</li>
<li><p>如果你非要等到新年才开始做出改变，说明这个改变对你也不太重要。</p>
</li>
<li><p>在现实的人类社会中，除非有更大的光明将它改变，否则永远存在着两种人，一个在天上，一个在地下，一个是从善的亚伯，一个是从恶的该隐。</p>
</li>
<li><p>很抱歉啊，我白天都没什么机会和你说话，只能憋到晚上给你发句晚安。但你可别小看了这两个字，它可包含着我今天清晨见到的阳光，中午看到的白云，傍晚遇见的微风，包含着我这一天每句想对你说的话。晚安。</p>
</li>
<li><p>我的眼睛很大很大，装得下高山，装得下大海，装得下蓝天，装得下整个世界；我的眼睛很小很小，有时遇到心事，就连两行泪，也装不下。</p>
<p><img data-src="index/%E7%9C%BC%E7%9D%9B.jfif" alt="眼睛"></p>
</li>
<li><p>最痛苦的是什么呢？你恰巧有一点天赋，够你去觊觎天才们那片殿堂，却不够你进入。你在门前徘徊，却敲不开那扇门。你颓然而坐，却隐隐约约听到殿堂内传来一声叹息：「我好菜啊」。</p>
</li>
<li><p>其实，你觉得能觊觎也是错觉，你只是能大概理解对一些科学理论的通俗解释。</p>
</li>
<li><p><a href="https://weibo.com/2377356574/Ii8XQ8zjg" target="_blank" rel="noopener">我见着日落时，她也见着日落，虽相隔千里，但对于太阳来说我和她在一起。</a></p>
</li>
<li><p>我们不能吹嘘自己设置的独特密码，真是太可惜了。</p>
</li>
<li><p>前路虽长，尤可期许。</p>
</li>
<li><p>每当成年人想要改变生活、逆转状态时，会不约而同做一件事：（再次开始）学英语。</p>
<p><img data-src="index/%E6%AF%8F%E5%BD%93%E6%88%90%E5%B9%B4%E4%BA%BA%E6%83%B3%E8%A6%81%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB%E3%80%81%E9%80%86%E8%BD%AC%E7%8A%B6%E6%80%81%E6%97%B6%EF%BC%8C%E4%BC%9A%E4%B8%8D%E7%BA%A6%E8%80%8C%E5%90%8C%E5%81%9A%E4%B8%80%E4%BB%B6%E4%BA%8B%EF%BC%9A%EF%BC%88%E5%86%8D%E6%AC%A1%E5%BC%80%E5%A7%8B%EF%BC%89%E5%AD%A6%E8%8B%B1%E8%AF%AD%E3%80%82.jpg" alt="每当成年人想要改变生活、逆转状态时，会不约而同做一件事：（再次开始）学英语。"></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%A6%E8%83%A7%E8%AF%97#%E5%8C%97%E5%B2%9B" target="_blank" rel="noopener">卑鄙是卑鄙者的通行证，高尚是高尚者的墓志铭。</a></p>
</li>
<li><p>我也不知道喜欢你什么，只是你不在的时候就会想你，想到你的每一个分钟我都会变得开心，这就是我最单纯的想法。如果只是单纯喜欢你的某一点的话，那就是有条件的喜欢而已，假使有一天那个条件突然发生了改变，那我对你得喜欢是不是应该就会变？所以我喜欢的不是你的某个什么，而是你的一切和每个和你在一起的瞬间。</p>
</li>
<li><p>我告诉你我喜欢你，并不是一定要和你在一起，只是希望今后的你，在遭遇人生低谷的时候，不要灰心，至少曾经有人被你的魅力所吸引，曾经是，以后也会是。</p>
</li>
<li><p>我永远喜欢你，不是说我会十年二十年一辈子都喜欢你，而是指，我这一刻喜欢你的程度，让我有勇气说出来我永远喜欢你。</p>
</li>
<li><p><a href="https://www.musixmatch.com/lyrics/%E5%A5%BD%E6%A8%82%E5%9C%98-2/%E6%88%91%E6%8A%8A%E6%88%91%E7%9A%84%E9%9D%92%E6%98%A5%E7%BB%99%E4%BD%A0" target="_blank" rel="noopener">我把我的青春给你，不是因为想换取和你的婚礼。</a></p>
</li>
<li><p>但愿我能给你带来快乐，同时，又反射到我身上。</p>
</li>
<li><p>你无法控制其他人的脾气，但你可以保持一颗冷静的头脑。</p>
<p><img data-src="index/%E4%BD%A0%E6%97%A0%E6%B3%95%E6%8E%A7%E5%88%B6%E5%85%B6%E4%BB%96%E4%BA%BA%E7%9A%84%E8%84%BE%E6%B0%94%EF%BC%8C%E4%BD%86%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BF%9D%E6%8C%81%E4%B8%80%E9%A2%97%E5%86%B7%E9%9D%99%E7%9A%84%E5%A4%B4%E8%84%91%E3%80%82.jpg" alt="你无法控制其他人的脾气，但你可以保持一颗冷静的头脑。"></p>
</li>
<li><p>没有你在床真的没什么好赖的。</p>
</li>
<li><p>茫茫人海我们能相遇，缘分占百分之十，我长得好看占百分之九十。</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/The_Heart_of_a_Broken_Story" target="_blank" rel="noopener">Love is a touch and yet not a touch.</a></p>
</li>
<li><p><a href="https://baike.baidu.com/item/%E9%A2%84%E8%A8%80/2915721" target="_blank" rel="noopener">不要前行！前面是无边的森林：古老的树现着野兽身上的斑纹，半生半死的藤蟒一样交缠着，密叶里漏不下一颗星星。你将怯怯地不敢放下第二步，当你听见了第一步空寥的回声。</a></p>
</li>
<li><p>事实上，机场比婚礼现场见证了更多真挚的接吻，医院的墙壁比教堂聆听了更多的祷告。</p>
</li>
<li><blockquote>
<p>  <a href="https://www.youtube.com/watch?v=_3BhOWpurdc" target="_blank" rel="noopener">Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the fire that burns against the cold, the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men. I pledge my life and honor to the Night&apos;s Watch, for this night and all the nights to come.</a></p>
</blockquote>
<p>长夜将至，我从今开始守望，至死方休。我将不娶妻、不封地、不生子。我将不戴宝冠，不争荣宠。我将尽忠职守，生死於斯。我是黑暗中的利剑，长城上的守卫。我是抵御寒冷的烈焰，破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。</p>
</li>
<li><p>年轻有年轻的代价。</p>
</li>
<li><p><a href="https://weibo.com/1428546035/ymeph0NuH" target="_blank" rel="noopener">如果天总也不亮，那就摸黑过生活；如果发出声音是危险的，那就保持沉默；如果自觉无力发光，那就别去照亮别人。但是——但是：不要习惯了黑暗就为黑暗辩护；不要为自己的苟且而得意洋洋；不要嘲讽那些比自己更勇敢、更有热量的人们。可以卑微如尘土，不可扭曲如蛆虫。</a></p>
</li>
<li><p>智商不如人没什么可耻的。只是要承认这一点有点困难。</p>
</li>
<li><p><a href="https://zh.wikisource.org/zh/%E8%8D%80%E5%AD%90/%E4%BF%AE%E8%BA%AB%E7%AF%87" target="_blank" rel="noopener">路虽弥，不行不至。</a></p>
</li>
<li><p>道阻且长，行则将至。</p>
</li>
<li><p>你一直兼容，用户就一直觉得没问题，用户就会一直用，用户一直用，你就要一直兼容。</p>
</li>
<li><p>普通人负责普通就行了。</p>
</li>
<li><p>碎片化时间，听起来像一种能撕裂时空的超能力。</p>
</li>
<li><p>觉得自己能力不足无法战胜黑暗怎么办？</p>
</li>
<li><p><a href="https://www.zhihu.com/question/21905681/answer/92992501" target="_blank" rel="noopener">没有实力到只能去靠诚意表真心。</a></p>
</li>
<li><p>目所能及又岂能是全部呢？</p>
</li>
<li><p>怕什么真理无穷，进一寸有进一寸的欢喜。</p>
<p><img data-src="index/%E8%83%A1%E9%80%82.jpg" alt="胡适"></p>
</li>
<li><p>梦境和死亡，都无定所，无处可去，终将被遗忘，我们身在此处，但没有人会记得，万物皆逝，仅剩夜晚，再见。</p>
<p><img data-src="index/%E4%B8%87%E7%89%A9%E7%9A%86%E9%80%9D%EF%BC%8C%E5%94%AF%E6%9C%89%E5%A4%9C%E9%95%BF%E7%95%99%E3%80%82.jpg" alt="万物皆逝，唯有夜长留"></p>
</li>
<li><p>口才不好的人，总是在夜晚床上躺着时，才想到当时应该怎样反驳别人的话。</p>
<p><img data-src="index/%E5%8F%A3%E6%89%8D%E4%B8%8D%E5%A5%BD%E7%9A%84%E4%BA%BA%EF%BC%8C%E6%80%BB%E6%98%AF%E5%9C%A8%E5%A4%9C%E6%99%9A%E5%BA%8A%E4%B8%8A%E8%BA%BA%E7%9D%80%E6%97%B6%EF%BC%8C%E6%89%8D%E6%83%B3%E5%88%B0%E5%BD%93%E6%97%B6%E5%BA%94%E8%AF%A5%E6%80%8E%E6%A0%B7%E5%8F%8D%E9%A9%B3%E5%88%AB%E4%BA%BA%E7%9A%84%E8%AF%9D%E3%80%82.jpg" alt="口才不好的人，总是在夜晚床上躺着时，才想到当时应该怎样反驳别人的话。"></p>
</li>
<li><p>遇到喜欢的东西，就把它买下来。钱并不是真的花掉了，只是换一种方式，陪伴在你的身边。</p>
<p><img data-src="index/GPU.jpg" alt="遇到喜欢的东西，就把它买下来。钱并不是真的花掉了，只是换一种方式，陪伴在你的身边。"></p>
</li>
<li><p>我不看星星，也不说想你。这样星星和你都蒙在鼓里。</p>
<p><img data-src="index/%E6%88%91%E4%B8%8D%E7%9C%8B%E6%98%9F%E6%98%9F%EF%BC%8C%E4%B9%9F%E4%B8%8D%E8%AF%B4%E6%83%B3%E4%BD%A0%E3%80%82%E8%BF%99%E6%A0%B7%E6%98%9F%E6%98%9F%E5%92%8C%E4%BD%A0%E9%83%BD%E8%92%99%E5%9C%A8%E9%BC%93%E9%87%8C%E3%80%82.jpg" alt="我不看星星，也不说想你。这样星星和你都蒙在鼓里。"></p>
</li>
</ul>
]]></content>
  </entry>
</search>
